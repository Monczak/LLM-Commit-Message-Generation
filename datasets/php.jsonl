{"diff_id": 6, "repo": "alexdebril/feed-io", "sha": "e9c89eddde6a295584d15b63e439f377aa05192a", "time": "23.05.2017 10:28:53", "diff": "mmm a / None <nl> ppp b / examples/rich-feed.php <nl>+<?php <nl> +/* <nl> + * This file is part of the feed-io package. <nl> + * <nl> + * (c) Alexandre Debril <alex.debril@gmail.com> <nl> + * <nl> + * For the full copyright and license information, please view the LICENSE <nl> + * file that was distributed with this source code. <nl> + */ <nl> + <nl> +require __DIR__.DIRECTORY_SEPARATOR.'bootstrap.php'; <nl> + <nl> +$feedIo = \\FeedIo\\Factory::create()->getFeedIo(); <nl> + <nl> +$result = $feedIo->read('https://debril.org/feed/'); <nl> + <nl> +echo \"feed title : {$result->getFeed()->getTitle()} \\n \"; <nl> + <nl> +foreach ($result->getFeed() as $item) { <nl> + echo \"item title : {$item->getTitle()} \\n \"; <nl> + <nl> + foreach ($item->getAllElements() as $element) { <nl> + echo \"element name : \" . $element->getName() . PHP_EOL; <nl> + <nl> + foreach( $element->getAllElements() as $subElement) { <nl> + echo \"sub element name : \" . $subElement->getName() . PHP_EOL; <nl> + echo \"sub element value : \" . $subElement->getValue() . PHP_EOL; <nl> + } <nl> + } <nl> + <nl> +} <nl> ", "msg": "added rich feed parsing example"}
{"diff_id": 15, "repo": "alexdebril/feed-io", "sha": "469e1917a0ab794086b448174e5a96b1deaf168a", "time": "01.08.2017 17:37:28", "diff": "mmm a / src/FeedIo/Formatter/XmlFormatter.php <nl> ppp b / src/FeedIo/Formatter/XmlFormatter.php <nl>@@ -81,7 +81,7 @@ class XmlFormatter implements FormatterInterface <nl> $rules = $this->getAllRules($ruleSet, $node); <nl> foreach ($rules as $rule) { <nl> - $rule->addElement($document, $rootElement, $node); <nl> + $rule->apply($document, $rootElement, $node); <nl> } <nl> } <nl> ", "msg": "Use the appropriate method"}
{"diff_id": 31, "repo": "alexdebril/feed-io", "sha": "63ddd496b6a0a45b6f4633591bb961b1c28b6023", "time": "30.08.2017 13:56:00", "diff": "mmm a / None <nl> ppp b / src/FeedIo/Http/ResponseBuilder.php <nl>+<?php declare(strict_types=1); <nl> +/* <nl> + * This file is part of the feed-io package. <nl> + * <nl> + * (c) Alexandre Debril <alex.debril@gmail.com> <nl> + * <nl> + * For the full copyright and license information, please view the LICENSE <nl> + * file that was distributed with this source code. <nl> + */ <nl> + <nl> +namespace FeedIo\\Http; <nl> + <nl> +use FeedIo\\FeedInterface; <nl> +use FeedIo\\FormatterInterface; <nl> +use GuzzleHttp\\Psr7\\Response; <nl> +use Psr\\Http\\Message\\ResponseInterface; <nl> + <nl> +class ResponseBuilder <nl> +{ <nl> + <nl> + /** <nl> + * @var bool $public is the response public <nl> + */ <nl> + protected $public; <nl> + <nl> + /** <nl> + * @var int $maxAge max-age in seconds <nl> + */ <nl> + protected $maxAge; <nl> + <nl> + /** <nl> + * @param bool $public <nl> + * @param int $maxAge <nl> + */ <nl> + public function __construct(bool $public = true, int $maxAge = 600) <nl> + { <nl> + $this->public = $public; <nl> + $this->maxAge = $maxAge; <nl> + } <nl> + <nl> + /** <nl> + * @param string $format <nl> + * @param FormatterInterface $formatter <nl> + * @param FeedInterface $feed <nl> + * @return ResponseInterface <nl> + */ <nl> + public function createResponse(string $format, FormatterInterface $formatter, FeedInterface $feed) : ResponseInterface <nl> + { <nl> + $headers = [ <nl> + 'Content-Type' => ($format === 'json') ? 'application/json':'application/xhtml+xml', <nl> + 'Cache-Control' => $this->public ? 'public':'private' . \"max-age={$this->maxAge}\", <nl> + 'Last-Modified' => $feed->getLastModified()->format(\\DateTime::RSS); <nl> + ]; <nl> + <nl> + return new Response(200, $headers, $formatter->toString($feed)); <nl> + } <nl> + <nl> +} <nl> ", "msg": "ResponseBuilder : creates a valid response with feed's content"}
{"diff_id": 43, "repo": "alexdebril/feed-io", "sha": "c22ab80b6ca9c9af08373f3e6343ded763edcf74", "time": "29.05.2018 08:33:24", "diff": "mmm a / examples/change-user-agent.php <nl> ppp b / examples/change-user-agent.php <nl>@@ -19,7 +19,8 @@ $stack->push( <nl> $client = new \\FeedIo\\Adapter\\Guzzle\\Client( <nl> new GuzzleHttp\\Client([ <nl> 'handler' => $stack <nl> - ]) <nl> + ]), <nl> + 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36' <nl> ); <nl> $feedIo = new \\FeedIo\\FeedIo($client, $logger); <nl> ", "msg": "Inject a custom user-agent through __construct"}
{"diff_id": 44, "repo": "alexdebril/feed-io", "sha": "38ed35dd100c1b3d9c7b43d2c93986a4e33c0fdd", "time": "29.05.2018 11:18:17", "diff": "mmm a / src/FeedIo/Explorer.php <nl> ppp b / src/FeedIo/Explorer.php <nl>@@ -51,7 +51,15 @@ class Explorer <nl> $this->logger->info(\"discover feeds from {$url}\"); <nl> $stream = $this->client->getResponse($url, new \\DateTime); <nl> - return $this->extractFeeds($stream->getBody()); <nl> + $internalErrors = libxml_use_internal_errors(true); <nl> + $entityLoaderDisabled = libxml_disable_entity_loader(true); <nl> + <nl> + $feeds = $this->extractFeeds($stream->getBody()); <nl> + <nl> + libxml_use_internal_errors($internalErrors); <nl> + libxml_disable_entity_loader($entityLoaderDisabled); <nl> + <nl> + return $feeds; <nl> } <nl> /** <nl> ", "msg": "HTML errors management"}
{"diff_id": 47, "repo": "alexdebril/feed-io", "sha": "93536a9b48707633fe3fe5cf06313a2c53afa324", "time": "02.07.2018 14:02:28", "diff": "mmm a / src/FeedIo/Standard/Rss.php <nl> ppp b / src/FeedIo/Standard/Rss.php <nl>@@ -115,7 +115,7 @@ class Rss extends XmlAbstract <nl> $ruleSet = parent::buildBaseRuleSet(); <nl> $ruleSet <nl> ->add(new Link()) <nl> - ->add(new Description()) <nl> + ->add(new Description(), ['content:encoded']) <nl> ->add($this->getModifiedSinceRule(static::DATE_NODE_TAGNAME, ['lastBuildDate', 'lastPubDate'])) <nl> ->add(new Category()); <nl> ", "msg": "set 'content:encoded' as an alias of 'description'. Fix"}
{"diff_id": 91, "repo": "alexdebril/feed-io", "sha": "dde5e964a82f8becad55a78d37f5e4ef4f4554b9", "time": "04.06.2021 15:16:56", "diff": "mmm a / src/FeedIo/Rule/Language.php <nl> ppp b / src/FeedIo/Rule/Language.php <nl>@@ -17,7 +17,7 @@ class Language extends RuleAbstract <nl> public function setProperty(NodeInterface $node, \\DOMElement $element): void <nl> { <nl> if ($node instanceof FeedInterface) { <nl> - $node->set(static::NODE_NAME, $element->nodeValue); <nl> + $node->setLanguage($element->nodeValue); <nl> } <nl> } <nl> ", "msg": "Actually set language instead of dyn attribute"}
{"diff_id": 98, "repo": "alexdebril/feed-io", "sha": "2e69e789de5b6b3a5202b28412f224dc56026c5c", "time": "09.06.2022 10:15:55", "diff": "mmm a / src/FeedIo/Factory.php <nl> ppp b / src/FeedIo/Factory.php <nl>@@ -39,6 +39,7 @@ class Factory <nl> 'config' => [], <nl> ] <nl> ): Factory { <nl> + @trigger_error('Using the factory is deprecated since 5.2 and will be removed in 6.0', \\E_USER_DEPRECATED); <nl> $factory = new self(); <nl> $clientBuilder = new GuzzleClientBuilder($factory->extractConfig($clientConfig)); <nl> ", "msg": "Deprecate the factory"}
{"diff_id": 101, "repo": "ray-di/ray.di", "sha": "441a45d1e81f0037b81df239b6c7af81fcd4827d", "time": "20.08.2017 15:24:34", "diff": "mmm a / src/Argument.php <nl> ppp b / src/Argument.php <nl>@@ -37,7 +37,7 @@ final class Argument <nl> public function __construct(\\ReflectionParameter $parameter, string $name) <nl> { <nl> - $type = $parameter->getType(); <nl> + $type = $this->getType($parameter); <nl> $isOptional = $parameter->isOptional(); <nl> $this->isDefaultAvailable = $parameter->isDefaultValueAvailable() || $isOptional; <nl> if ($isOptional) { <nl> @@ -105,4 +105,14 @@ private function setDefaultValue(\\ReflectionParameter $parameter) <nl> $this->default = null; <nl> } <nl> } <nl> + <nl> + private function getType(\\ReflectionParameter $parameter) : string <nl> + { <nl> + $type = $parameter->getType(); <nl> + if ($type instanceof \\ReflectionType && in_array((string) $type, ['bool', 'int', 'string', 'array'], true)) { <nl> + return ''; <nl> + } <nl> + <nl> + return (string) $type; <nl> + } <nl> } <nl> ", "msg": "ignore scalar type for binding"}
{"diff_id": 106, "repo": "ray-di/ray.di", "sha": "2f1128302553bfe2578bf24a98f53e3837a47ee6", "time": "22.02.2018 18:28:00", "diff": "mmm a / src/Name.php <nl> ppp b / src/Name.php <nl>@@ -67,7 +67,7 @@ private function setName(string $name) <nl> } <nl> // single name <nl> // @Named(name) <nl> - if ($name === self::ANY || preg_match('/^[a-zA-Z0-9_]+$/', $name)) { <nl> + if ($name === self::ANY || preg_match('/^\\w+$/', $name)) { <nl> $this->name = $name; <nl> return; <nl> ", "msg": "bettere regex expression"}
{"diff_id": 111, "repo": "ray-di/ray.di", "sha": "374bff9d917a680cc24a7b3f7422ea64ed1c34cf", "time": "01.03.2018 18:36:51", "diff": "mmm a / tests/ContainerTest.php <nl> ppp b / tests/ContainerTest.php <nl>@@ -134,7 +134,7 @@ public function testMoveUnbound() <nl> public function testAbstractClassUnbound() <nl> { <nl> try { <nl> - $this->container->getInstance(FakeAbstract::class, Name::ANY); <nl> + $this->container->getInstance('_INVALID_INTERFACE_', Name::ANY); <nl> } catch (\\Exception $e) { <nl> $this->assertSame(Unbound::class, get_class($e)); <nl> } <nl> ", "msg": "use explicit invalid class name"}
{"diff_id": 126, "repo": "ray-di/ray.di", "sha": "7038c5067b3d89284ba4c9f35a12b1a26ddb4f9a", "time": "17.07.2018 10:52:24", "diff": "mmm a / src/AbstractModule.php <nl> ppp b / src/AbstractModule.php <nl>@@ -68,7 +68,7 @@ public function override(self $module) <nl> */ <nl> public function getContainer() : Container <nl> { <nl> - if (! $this->container) { <nl> + if (! $this->container instanceof Container) { <nl> $this->activate(); <nl> } <nl> ", "msg": "validate Container class"}
{"diff_id": 127, "repo": "ray-di/ray.di", "sha": "1ee4387bca253a75fa16e70956e7c8bcc4d38ac5", "time": "17.07.2018 10:53:54", "diff": "mmm a / src/NewInstance.php <nl> ppp b / src/NewInstance.php <nl>@@ -54,7 +54,7 @@ public function __construct( <nl> public function __invoke(Container $container) <nl> { <nl> // constructor injection <nl> - $instance = $this->arguments ? (new \\ReflectionClass($this->class))->newInstanceArgs($this->arguments->inject($container)) : new $this->class; <nl> + $instance = $this->arguments instanceof Arguments ? (new \\ReflectionClass($this->class))->newInstanceArgs($this->arguments->inject($container)) : new $this->class; <nl> // setter injection <nl> ($this->setterMethods)($instance, $container); <nl> ", "msg": "validate Arguments class"}
{"diff_id": 138, "repo": "ray-di/ray.di", "sha": "ee18bf8b41c6d1cf0a569d1b88c030986e81226c", "time": "03.12.2019 18:37:53", "diff": "mmm a / src/InjectionPoint.php <nl> ppp b / src/InjectionPoint.php <nl>use Doctrine\\Common\\Annotations\\Reader; <nl> use Ray\\Di\\Di\\Qualifier; <nl> -final class InjectionPoint implements InjectionPointInterface <nl> +final class InjectionPoint implements InjectionPointInterface, \\Serializable <nl> { <nl> /** <nl> * @var \\ReflectionParameter <nl> @@ -19,9 +19,28 @@ final class InjectionPoint implements InjectionPointInterface <nl> */ <nl> private $reader; <nl> + /** <nl> + * @var string <nl> + */ <nl> + private $pClass; <nl> + <nl> + /** <nl> + * @var string <nl> + */ <nl> + private $pFunction; <nl> + <nl> + /** <nl> + * @var string <nl> + */ <nl> + private $pName; <nl> + <nl> public function __construct(\\ReflectionParameter $parameter, Reader $reader) <nl> { <nl> $this->parameter = $parameter; <nl> + $this->pFunction = $parameter->getDeclaringFunction()->name; <nl> + $class = $parameter->getDeclaringClass(); <nl> + $this->pClass = $class instanceof \\ReflectionClass ? $class->name : ''; <nl> + $this->pName = $parameter->name; <nl> $this->reader = $reader; <nl> } <nl> @@ -30,7 +49,7 @@ public function __construct(\\ReflectionParameter $parameter, Reader $reader) <nl> */ <nl> public function getParameter() : \\ReflectionParameter <nl> { <nl> - return $this->parameter; <nl> + return $this->parameter ?? new \\ReflectionParameter([$this->pClass, $this->pFunction], $this->pName); <nl> } <nl> /** <nl> @@ -79,4 +98,14 @@ public function getQualifiers() : array <nl> return $qualifiers; <nl> } <nl> + <nl> + public function serialize() : string <nl> + { <nl> + return serialize([$this->reader, $this->pClass, $this->pFunction, $this->pName]); <nl> + } <nl> + <nl> + public function unserialize($serialized) <nl> + { <nl> + [$this->reader, $this->pClass, $this->pFunction, $this->pName] = unserialize($serialized); <nl> + } <nl> } <nl> ", "msg": "use Serializable interface\navoid \"Exception: Serialization of 'ReflectionParameter' is not allowed\""}
{"diff_id": 142, "repo": "ray-di/ray.di", "sha": "5ef01f0ccaef92a50f71eb9412b45df26a11ca47", "time": "18.01.2020 21:10:50", "diff": "mmm a / src/MethodInvocationProvider.php <nl> ppp b / src/MethodInvocationProvider.php <nl>@@ -14,7 +14,7 @@ class MethodInvocationProvider implements ProviderInterface <nl> */ <nl> private $invocation; <nl> - public function set(MethodInvocation $invocation) : void <nl> + public function set(MethodInvocation $invocation) <nl> { <nl> $this->invocation = $invocation; <nl> } <nl> ", "msg": "remove return type\naop may return"}
{"diff_id": 161, "repo": "ray-di/ray.di", "sha": "6ab0559d72c8b7c8d04f0be9f775a247757c8ab4", "time": "29.09.2020 10:24:59", "diff": "mmm a / src/compiler/DiCompiler.php <nl> ppp b / src/compiler/DiCompiler.php <nl>@@ -35,10 +35,10 @@ final class DiCompiler implements InjectorInterface <nl> /** @var FilePutContents */ <nl> private $filePutContents; <nl> - public function __construct(?AbstractModule $module = null, string $scriptDir = '') <nl> + public function __construct(AbstractModule $module, string $scriptDir) <nl> { <nl> $this->scriptDir = $scriptDir ?: sys_get_temp_dir(); <nl> - $this->container = $module ? $module->getContainer() : new Container(); <nl> + $this->container = $module->getContainer(); <nl> $this->dependencyCompiler = new DependencyCode($this->container); <nl> $this->module = $module; <nl> $this->dependencySaver = new DependencySaver($scriptDir); <nl> ", "msg": "Null default unnecessary"}
{"diff_id": 172, "repo": "ray-di/ray.di", "sha": "dd77f5b9ea8e80b832b3c0da90775f47f843900d", "time": "11.02.2021 18:25:40", "diff": "mmm a / src/di/NullObjectDependency.php <nl> ppp b / src/di/NullObjectDependency.php <nl>namespace Ray\\Di; <nl> use Koriym\\NullObject\\NullObject; <nl> +use Ray\\Compiler\\FilePutContents; <nl> use Ray\\Di\\Annotation\\ScriptDir; <nl> use ReflectionClass; <nl> use function interface_exists; <nl> use function is_dir; <nl> use function is_string; <nl> +use function sprintf; <nl> +use function str_replace; <nl> /** <nl> * @codeCoverageIgnore <nl> @@ -66,8 +69,12 @@ public function setScope($scope) <nl> public function toNull(string $scriptDir): Dependency <nl> { <nl> assert(is_dir($scriptDir)); <nl> - $nullClass = (new NullObject($scriptDir))($this->interface); <nl> + $nullObject = new NullObject($scriptDir); <nl> + $code = $nullObject->getCode($this->interface); <nl> + $nullObjectClass = $this->interface . 'Null'; <nl> + $file = sprintf('%s/%s.php', $scriptDir, str_replace('\\\\', '_', $nullObjectClass)); <nl> + (new FilePutContents())($file, $code); <nl> - return new Dependency(new NewInstance(new ReflectionClass($nullClass), new SetterMethods([]))); <nl> + return new Dependency(new NewInstance(new ReflectionClass($nullObjectClass), new SetterMethods([]))); <nl> } <nl> } <nl> ", "msg": "Update NullObject API"}
{"diff_id": 204, "repo": "wp-cli/extension-command", "sha": "ca85f5a8f5857bc5430dd39775cfbbe9b299a923", "time": "16.05.2017 06:44:26", "diff": "mmm a / src/WP_CLI/CommandWithUpgrade.php <nl> ppp b / src/WP_CLI/CommandWithUpgrade.php <nl>@@ -331,7 +331,19 @@ abstract class CommandWithUpgrade extends \\WP_CLI_Command { <nl> $cache_manager->whitelist_package($item['update_package'], $this->item_type, $item['name'], $item['update_version']); <nl> } <nl> $upgrader = $this->get_upgrader( $assoc_args ); <nl> + // Ensure the upgrader uses the download offer present in each item <nl> + $transient_filter = function( $transient ) use ( $items_to_update ) { <nl> + foreach( $items_to_update as $name => $item_data ) { <nl> + if ( isset( $transient->response[ $name ] ) ) { <nl> + $transient->response[ $name ]->new_version = $item_data['update_version']; <nl> + $transient->response[ $name ]->package = $item_data['update_package']; <nl> + } <nl> + } <nl> + return $transient; <nl> + }; <nl> + add_filter( 'site_transient_' . $this->upgrade_transient, $transient_filter, 999 ); <nl> $result = $upgrader->bulk_upgrade( wp_list_pluck( $items_to_update, 'update_id' ) ); <nl> + remove_filter( 'site_transient_' . $this->upgrade_transient, $transient_filter, 999 ); <nl> } <nl> // Let the user know the results. <nl> ", "msg": "Ensure modified download offer is used when performing update"}
{"diff_id": 218, "repo": "wp-cli/extension-command", "sha": "4e3e38f86aaac986ef9b360288ce82d8d3932c9d", "time": "05.12.2017 14:55:32", "diff": "mmm a / src/Plugin_Command.php <nl> ppp b / src/Plugin_Command.php <nl>@@ -65,7 +65,7 @@ class Plugin_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> } <nl> /** <nl> - * See the status of one or all plugins. <nl> + * Reveals the status of one or all plugins. <nl> * <nl> * ## OPTIONS <nl> * <nl> @@ -98,7 +98,7 @@ class Plugin_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> } <nl> /** <nl> - * Search the WordPress.org plugin directory. <nl> + * Searches the WordPress.org plugin directory. <nl> * <nl> * Displays plugins in the WordPress.org plugin directory matching a given <nl> * search query. <nl> @@ -238,7 +238,7 @@ class Plugin_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> } <nl> /** <nl> - * Activate a plugin. <nl> + * Activates a plugin. <nl> * <nl> * ## OPTIONS <nl> * <nl> @@ -313,7 +313,7 @@ class Plugin_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> } <nl> /** <nl> - * Deactivate a plugin. <nl> + * Deactivates a plugin. <nl> * <nl> * ## OPTIONS <nl> * <nl> @@ -401,7 +401,7 @@ class Plugin_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> } <nl> /** <nl> - * Toggle a plugin's activation state. <nl> + * Toggles a plugin's activation state. <nl> * <nl> * If the plugin is active, then it will be deactivated. If the plugin is <nl> * inactive, then it will be activated. <nl> @@ -448,7 +448,7 @@ class Plugin_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> } <nl> /** <nl> - * Get the path to a plugin or to the plugin directory. <nl> + * Gets the path to a plugin or to the plugin directory. <nl> * <nl> * ## OPTIONS <nl> * <nl> @@ -507,7 +507,7 @@ class Plugin_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> } <nl> /** <nl> - * Update one or more plugins. <nl> + * Updates one or more plugins. <nl> * <nl> * ## OPTIONS <nl> * <nl> @@ -644,7 +644,7 @@ class Plugin_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> } <nl> /** <nl> - * Install a plugin. <nl> + * Installs a plugin. <nl> * <nl> * ## OPTIONS <nl> * <nl> @@ -732,7 +732,7 @@ class Plugin_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> } <nl> /** <nl> - * Get details about an installed plugin. <nl> + * Gets details about an installed plugin. <nl> * <nl> * ## OPTIONS <nl> * <nl> @@ -786,7 +786,7 @@ class Plugin_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> } <nl> /** <nl> - * Uninstall a plugin. <nl> + * Uninstalls a plugin. <nl> * <nl> * ## OPTIONS <nl> * <nl> @@ -838,7 +838,7 @@ class Plugin_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> } <nl> /** <nl> - * Check if the plugin is installed. <nl> + * Checks if a given plugin is installed. <nl> * <nl> * Returns exit code 0 when installed, 1 when uninstalled. <nl> * <nl> @@ -865,7 +865,7 @@ class Plugin_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> } <nl> /** <nl> - * Delete plugin files without deactivating or uninstalling. <nl> + * Deletes plugin files without deactivating or uninstalling. <nl> * <nl> * ## OPTIONS <nl> * <nl> @@ -900,7 +900,7 @@ class Plugin_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> } <nl> /** <nl> - * Get a list of plugins. <nl> + * Gets a list of plugins. <nl> * <nl> * Displays a list of the plugins installed on the site with activation <nl> * status, whether or not there's an update available, etc. <nl> @@ -1008,7 +1008,7 @@ class Plugin_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> } <nl> /** <nl> - * Get the details of a plugin. <nl> + * Gets the details of a plugin. <nl> * <nl> * @param object <nl> * @return array <nl> @@ -1044,7 +1044,7 @@ class Plugin_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> } <nl> /** <nl> - * Get all available plugins. <nl> + * Gets all available plugins. <nl> * <nl> * Uses the same filter core uses in plugins.php to determine which plugins <nl> * should be available to manage through the WP_Plugins_List_Table class. <nl> ", "msg": "Convert plugin command and subcommand help summaries (and other method DocBlock summaries) to use third-person singular verbs."}
{"diff_id": 219, "repo": "wp-cli/extension-command", "sha": "58afd4223cb3f5514a6570c2364defd24adc3fcc", "time": "05.12.2017 14:56:52", "diff": "mmm a / src/Theme_Command.php <nl> ppp b / src/Theme_Command.php <nl>@@ -66,7 +66,7 @@ class Theme_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> } <nl> /** <nl> - * See the status of one or all themes. <nl> + * Reveals the status of one or all themes. <nl> * <nl> * ## OPTIONS <nl> * <nl> @@ -96,7 +96,7 @@ class Theme_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> } <nl> /** <nl> - * Search the WordPress.org theme directory. <nl> + * Searches the WordPress.org theme directory. <nl> * <nl> * Displays themes in the WordPress.org theme directory matching a given <nl> * search query. <nl> @@ -190,7 +190,7 @@ class Theme_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> } <nl> /** <nl> - * Activate a theme. <nl> + * Activates a theme. <nl> * <nl> * ## OPTIONS <nl> * <nl> @@ -232,7 +232,7 @@ class Theme_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> } <nl> /** <nl> - * Enable a theme on a WordPress multisite install. <nl> + * Enables a theme on a WordPress multisite install. <nl> * <nl> * Permits theme to be activated from the dashboard of a site on a WordPress <nl> * multisite install. <nl> @@ -294,7 +294,7 @@ class Theme_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> } <nl> /** <nl> - * Disable a theme on a WordPress multisite install. <nl> + * Disables a theme on a WordPress multisite install. <nl> * <nl> * Removes ability for a theme to be activated from the dashboard of a site <nl> * on a WordPress multisite install. <nl> @@ -347,7 +347,7 @@ class Theme_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> } <nl> /** <nl> - * Get the path to a theme or to the theme directory. <nl> + * Gets the path to a theme or to the theme directory. <nl> * <nl> * ## OPTIONS <nl> * <nl> @@ -471,7 +471,7 @@ class Theme_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> } <nl> /** <nl> - * Install a theme. <nl> + * Installs a theme. <nl> * <nl> * ## OPTIONS <nl> * <nl> @@ -519,7 +519,7 @@ class Theme_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> } <nl> /** <nl> - * Get details about a theme. <nl> + * Gets details about a theme. <nl> * <nl> * ## OPTIONS <nl> * <nl> @@ -582,7 +582,7 @@ class Theme_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> } <nl> /** <nl> - * Update one or more themes. <nl> + * Updates one or more themes. <nl> * <nl> * ## OPTIONS <nl> * <nl> @@ -676,7 +676,7 @@ class Theme_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> } <nl> /** <nl> - * Check if the theme is installed. <nl> + * Checks if a given theme is installed. <nl> * <nl> * Returns exit code 0 when installed, 1 when uninstalled. <nl> * <nl> @@ -705,7 +705,7 @@ class Theme_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> } <nl> /** <nl> - * Delete a theme. <nl> + * Deletes a theme. <nl> * <nl> * Removes the theme from the filesystem. <nl> * <nl> @@ -749,7 +749,7 @@ class Theme_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> } <nl> /** <nl> - * Get a list of themes. <nl> + * Gets a list of themes. <nl> * <nl> * ## OPTIONS <nl> * <nl> ", "msg": "Convert theme command and subcommand help summaries (and other method DocBlock summaries) to use third-person singular verbs."}
{"diff_id": 224, "repo": "wp-cli/extension-command", "sha": "3dc84563dc8b2fa6374ab3769df4e9af6aa5a1c7", "time": "20.07.2018 20:01:20", "diff": "mmm a / src/WP_CLI/CommandWithUpgrade.php <nl> ppp b / src/WP_CLI/CommandWithUpgrade.php <nl>@@ -615,8 +615,10 @@ abstract class CommandWithUpgrade extends \\WP_CLI_Command { <nl> // Add `url` for plugin or theme on wordpress.org. <nl> foreach ( $items as $index => $item_object ) { <nl> + if ( $item_object instanceof \\stdClass ) { <nl> $item_object->url = \"https://wordpress.org/{$plural}/{$item_object->slug}/\"; <nl> } <nl> + } <nl> if ( 'table' === $format ) { <nl> $count = \\WP_CLI\\Utils\\get_flag_value( $api->info, 'results', 'unknown' ); <nl> ", "msg": "Limit addition of URL property when item is a class\nSee"}
{"diff_id": 228, "repo": "wp-cli/extension-command", "sha": "3e6eb206e57bd4536b2ea0d25d25e6d2ec50f27b", "time": "25.02.2019 08:30:27", "diff": "mmm a / src/WP_CLI/CommandWithUpgrade.php <nl> ppp b / src/WP_CLI/CommandWithUpgrade.php <nl>@@ -210,7 +210,7 @@ abstract class CommandWithUpgrade extends \\WP_CLI_Command { <nl> } <nl> } <nl> - if ( $result ) { <nl> + if ( ! is_wp_error( $result ) && ! empty( $this->fetcher->get_many( array( $slug ) ) ) ) { <nl> $this->chained_command = true; <nl> if ( \\WP_CLI\\Utils\\get_flag_value( $assoc_args, 'activate-network' ) ) { <nl> \\WP_CLI::log( \"Network-activating '$slug'...\" ); <nl> @@ -658,4 +658,3 @@ abstract class CommandWithUpgrade extends \\WP_CLI_Command { <nl> } <nl> } <nl> - <nl> ", "msg": "Handle extension activation for WP error or on not found"}
{"diff_id": 232, "repo": "wp-cli/extension-command", "sha": "77e7415c13d9a0647b5213d29a954a1fade3f50d", "time": "08.03.2019 00:27:35", "diff": "mmm a / src/Theme_Command.php <nl> ppp b / src/Theme_Command.php <nl>@@ -753,9 +753,12 @@ class Theme_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> * <nl> * ## OPTIONS <nl> * <nl> - * <theme>... <nl> + * [<theme>...] <nl> * : One or more themes to delete. <nl> * <nl> + * [--all] <nl> + * : If set, all themes will be deleted except active theme. <nl> + * <nl> * [--force] <nl> * : To delete active theme use this. <nl> * <nl> @@ -769,6 +772,12 @@ class Theme_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> */ <nl> public function delete( $args, $assoc_args ) { <nl> + $all = Utils\\get_flag_value( $assoc_args, 'all', false ); <nl> + <nl> + if ( ! ( $args = $this->check_optional_args_and_all( $args, $all, 'delete' ) ) ) { <nl> + return; <nl> + } <nl> + <nl> $force = Utils\\get_flag_value( $assoc_args, 'force', false ); <nl> $successes = $errors = 0; <nl> ", "msg": "Add --all option to delete all themes"}
{"diff_id": 233, "repo": "wp-cli/extension-command", "sha": "bb0a80212d7811db727aa6908ae5c10392256d45", "time": "18.03.2019 18:09:38", "diff": "mmm a / src/Theme_Command.php <nl> ppp b / src/Theme_Command.php <nl>@@ -425,6 +425,7 @@ class Theme_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> protected function get_item_list() { <nl> $items = array(); <nl> + $theme_version_info = array(); <nl> if ( is_multisite() ) { <nl> $site_enabled = get_option( 'allowedthemes' ); <nl> @@ -436,10 +437,18 @@ class Theme_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> $network_enabled = array(); <nl> } <nl> + $all_update_info = $this->get_update_info(); <nl> + $checked_themes = $all_update_info->checked; <nl> + <nl> + if ( ! empty( $checked_themes ) ) { <nl> + foreach ( $checked_themes as $slug => $version ) { <nl> + $theme_version_info[$slug] = $this->is_theme_version_valid( $slug, $version ); <nl> + } <nl> + } <nl> + <nl> foreach ( wp_get_themes() as $key => $theme ) { <nl> $file = $theme->get_stylesheet_directory(); <nl> - $all_update_info = $this->get_update_info(); <nl> $update_info = ( isset( $all_update_info->response[$theme->get_stylesheet()]) && null !== $all_update_info->response[$theme->get_stylesheet()] ) ? (array) $all_update_info->response[$theme->get_stylesheet()] : null; <nl> $items[ $file ] = array( <nl> @@ -455,6 +464,11 @@ class Theme_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> 'author' => $theme->get('Author'), <nl> ); <nl> + // Compare version and update information in theme list. <nl> + if ( isset( $theme_version_info[ $key ] ) && false === $theme_version_info[ $key ] ) { <nl> + $items[ $file ]['update'] = 'This version is higher than expected!'; <nl> + } <nl> + <nl> if ( is_multisite() ) { <nl> if ( ! empty( $site_enabled[ $key ] ) && ! empty( $network_enabled[ $key ] ) ) <nl> $items[ $file ]['enabled'] = 'network,site'; <nl> @@ -886,4 +900,30 @@ class Theme_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> return $template_path; <nl> } <nl> + <nl> + /** <nl> + * Check if current version of the theme is higher than the one available at WP.org <nl> + * <nl> + * @param string $slug Theme slug. <nl> + * @param string $version Theme current version. <nl> + * <nl> + * @return bool|string <nl> + */ <nl> + protected function is_theme_version_valid( $slug, $version ) { <nl> + // Get Theme Info. <nl> + $theme_info = themes_api( 'theme_information', array( 'slug' => $slug ) ); <nl> + <nl> + // Return empty string for themes not on WP.org <nl> + if ( is_wp_error( $theme_info ) ) { <nl> + return ''; <nl> + } <nl> + <nl> + // Compare theme version info. <nl> + if ( version_compare( $version, $theme_info->version, '>' ) ) { <nl> + return false; <nl> + } else { <nl> + return true; <nl> + } <nl> + <nl> + } <nl> } <nl> ", "msg": "Display warning in theme list info if theme version is higher than expected"}
{"diff_id": 244, "repo": "wp-cli/extension-command", "sha": "ad5960209f3c1b1afedc30dbca226d3346f8d053", "time": "03.03.2019 17:05:47", "diff": "mmm a / src/WP_CLI/Fetchers/Theme.php <nl> ppp b / src/WP_CLI/Fetchers/Theme.php <nl>@@ -19,12 +19,16 @@ class Theme extends Base { <nl> * @return object|false <nl> */ <nl> public function get( $name ) { <nl> - $theme = wp_get_theme( $name ); <nl> - <nl> - if ( ! $theme->exists() ) { <nl> + // Workaround to equalize folder naming conventions across Win/Mac/Linux <nl> + // Returns false if theme stylesheet doesn't exactly match existing themes. <nl> + $existing_themes = wp_get_themes(); <nl> + $existing_stylesheets = array_keys( $existing_themes ); <nl> + if ( ! in_array( $name, $existing_stylesheets, true ) ) { <nl> return false; <nl> } <nl> + $theme = $existing_themes[ $name ]; <nl> + <nl> return $theme; <nl> } <nl> } <nl> ", "msg": "Workaround to equalize folder naming conventions across Win/Mac/Linux for WPCLI Themes"}
{"diff_id": 260, "repo": "wp-cli/extension-command", "sha": "a883490bddfb15ca7393013e1ae152697f8305f7", "time": "08.07.2022 05:34:39", "diff": "mmm a / src/Plugin_Command.php <nl> ppp b / src/Plugin_Command.php <nl>@@ -380,7 +380,7 @@ class Plugin_Command extends \\WP_CLI\\CommandWithUpgrade { <nl> * : If set, all plugins will be deactivated. <nl> * <nl> * [--exclude=<name>] <nl> - * : Comma separated list of plugin names that should be excluded from deactivation. <nl> + * : Comma separated list of plugin slugs that should be excluded from deactivation. <nl> * <nl> * [--network] <nl> * : If set, the plugin will be deactivated for the entire multisite network. <nl> ", "msg": "Use `slugs` for consistency"}
{"diff_id": 268, "repo": "symfony/translation", "sha": "0c12c0c5c8349f519d64d52624fbc9e9b9455974", "time": "16.06.2017 11:22:14", "diff": "mmm a / Dumper/YamlFileDumper.php <nl> ppp b / Dumper/YamlFileDumper.php <nl>@@ -23,6 +23,13 @@ use Symfony\\Component\\Translation\\Exception\\LogicException; <nl> */ <nl> class YamlFileDumper extends FileDumper <nl> { <nl> + private $extension; <nl> + <nl> + public function __construct(/**string */$extension = 'yml') <nl> + { <nl> + $this->extension = $extension; <nl> + } <nl> + <nl> /** <nl> * {@inheritdoc} <nl> */ <nl> @@ -50,6 +57,6 @@ class YamlFileDumper extends FileDumper <nl> */ <nl> protected function getExtension() <nl> { <nl> - return 'yml'; <nl> + return $this->extension; <nl> } <nl> } <nl> ", "msg": "[FrameworkBundle] Allow .yaml file extension everywhere"}
{"diff_id": 273, "repo": "symfony/translation", "sha": "1ebaca88ffb47dbd9b499dd110fa1e86fcf4557b", "time": "21.08.2017 10:40:46", "diff": "mmm a / Command/XliffLintCommand.php <nl> ppp b / Command/XliffLintCommand.php <nl>@@ -26,6 +26,8 @@ use Symfony\\Component\\Console\\Style\\SymfonyStyle; <nl> */ <nl> class XliffLintCommand extends Command <nl> { <nl> + protected static $defaultName = 'lint:xliff'; <nl> + <nl> private $format; <nl> private $displayCorrectFiles; <nl> private $directoryIteratorProvider; <nl> @@ -45,7 +47,6 @@ class XliffLintCommand extends Command <nl> protected function configure() <nl> { <nl> $this <nl> - ->setName('lint:xliff') <nl> ->setDescription('Lints a XLIFF file and outputs encountered errors') <nl> ->addArgument('filename', null, 'A file or a directory or STDIN') <nl> ->addOption('format', null, InputOption::VALUE_REQUIRED, 'The output format', 'txt') <nl> ", "msg": "[Console] Add protected static $defaultName to set the default name of a Command"}
{"diff_id": 275, "repo": "symfony/translation", "sha": "c213dd173a5afbba28d76f05092ef243714e2e91", "time": "13.09.2017 20:06:14", "diff": "mmm a / Loader/YamlFileLoader.php <nl> ppp b / Loader/YamlFileLoader.php <nl>@@ -39,10 +39,18 @@ class YamlFileLoader extends FileLoader <nl> $this->yamlParser = new YamlParser(); <nl> } <nl> + $prevErrorHandler = set_error_handler(function ($level, $message, $script, $line) use ($resource, &$prevErrorHandler) { <nl> + $message = E_USER_DEPRECATED === $level ? preg_replace('/ on line \\d+/', ' in \"'.$resource.'\"$0', $message) : $message; <nl> + <nl> + return $prevErrorHandler ? $prevErrorHandler($level, $message, $script, $line) : false; <nl> + }); <nl> + <nl> try { <nl> $messages = $this->yamlParser->parse(file_get_contents($resource), Yaml::PARSE_KEYS_AS_STRINGS); <nl> } catch (ParseException $e) { <nl> throw new InvalidResourceException(sprintf('Error parsing YAML, invalid file \"%s\"', $resource), 0, $e); <nl> + } finally { <nl> + restore_error_handler(); <nl> } <nl> return $messages; <nl> ", "msg": "include file and line number in deprecation"}
{"diff_id": 279, "repo": "symfony/translation", "sha": "e05b0a5996ad7a35ba3a19ffad8b72c9daa64dfa", "time": "27.11.2017 15:08:03", "diff": "mmm a / DependencyInjection/TranslatorPass.php <nl> ppp b / DependencyInjection/TranslatorPass.php <nl>@@ -80,8 +80,15 @@ class TranslatorPass implements CompilerPassInterface <nl> ->replaceArgument(3, $loaders) <nl> ; <nl> - if ($container->hasParameter('twig.default_path')) { <nl> + if (!$container->hasParameter('twig.default_path')) { <nl> + return; <nl> + } <nl> + <nl> + if ($container->hasDefinition($this->debugCommandServiceId)) { <nl> $container->getDefinition($this->debugCommandServiceId)->replaceArgument(4, $container->getParameter('twig.default_path')); <nl> + } <nl> + <nl> + if ($container->hasDefinition($this->updateCommandServiceId)) { <nl> $container->getDefinition($this->updateCommandServiceId)->replaceArgument(5, $container->getParameter('twig.default_path')); <nl> } <nl> } <nl> ", "msg": "modify definitions only if the do exist\nIf the `TranslatorPass` is used an application without the Console\ncomponent, the commands will not be registered. Thus, their service\ndefinitions must not be modified."}
{"diff_id": 282, "repo": "symfony/translation", "sha": "81a09071872a6ddf8aeb4f158797759a98fc3c15", "time": "23.03.2018 19:39:12", "diff": "mmm a / Dumper/XliffFileDumper.php <nl> ppp b / Dumper/XliffFileDumper.php <nl>@@ -146,7 +146,11 @@ class XliffFileDumper extends FileDumper <nl> foreach ($messages->all($domain) as $source => $target) { <nl> $translation = $dom->createElement('unit'); <nl> $translation->setAttribute('id', strtr(substr(base64_encode(hash('sha256', $source, true)), 0, 7), '/+', '._')); <nl> - $translation->setAttribute('name', $source); <nl> + $name = $source; <nl> + if (strlen($source) > 80) { <nl> + $name = substr(md5($source), -7); <nl> + } <nl> + $translation->setAttribute('name', $name); <nl> $metadata = $messages->getMetadata($source, $domain); <nl> // Add notes section <nl> ", "msg": "Make sure to trim source if it is too long"}
{"diff_id": 283, "repo": "symfony/translation", "sha": "805e4236aa0c62b8176902beec3623ccd95da34f", "time": "24.04.2018 22:05:10", "diff": "mmm a / Tests/Command/XliffLintCommandTest.php <nl> ppp b / Tests/Command/XliffLintCommandTest.php <nl>@@ -121,7 +121,7 @@ EOF; <nl> </xliff> <nl> XLIFF; <nl> - $filename = sprintf('%s/xliff-lint-test/messages.en.xlf', sys_get_temp_dir()); <nl> + $filename = sprintf('%s/translation-xliff-lint-test/messages.en.xlf', sys_get_temp_dir()); <nl> file_put_contents($filename, $xliffContent); <nl> $this->files[] = $filename; <nl> @@ -150,8 +150,8 @@ XLIFF; <nl> protected function setUp() <nl> { <nl> - @mkdir(sys_get_temp_dir().'/xliff-lint-test'); <nl> $this->files = array(); <nl> + @mkdir(sys_get_temp_dir().'/translation-xliff-lint-test'); <nl> } <nl> protected function tearDown() <nl> @@ -161,6 +161,6 @@ XLIFF; <nl> unlink($file); <nl> } <nl> } <nl> - rmdir(sys_get_temp_dir().'/xliff-lint-test'); <nl> + rmdir(sys_get_temp_dir().'/translation-xliff-lint-test'); <nl> } <nl> } <nl> ", "msg": "[AppVeyor] Fix race condition in tests"}
{"diff_id": 292, "repo": "symfony/translation", "sha": "7717a0909fed3cdc2fae454b4da70f0973a5ea70", "time": "14.02.2019 10:26:11", "diff": "mmm a / None <nl> ppp b / Resources/bin/translation-status.php <nl>+<?php <nl> + <nl> +/* <nl> + * This file is part of the Symfony package. <nl> + * <nl> + * (c) Fabien Potencier <fabien@symfony.com> <nl> + * <nl> + * For the full copyright and license information, please view the LICENSE <nl> + * file that was distributed with this source code. <nl> + */ <nl> + <nl> +$usageInstructions = <<<END <nl> + <nl> + Usage instructions <nl> + ------------------------------------------------------------------------------- <nl> + <nl> + $ cd symfony-code-root-directory/ <nl> + <nl> + # show the translation status of all locales <nl> + $ php translation-status.php <nl> + <nl> + # show the translation status of all locales and all their missing translations <nl> + $ php translation-status.php -v <nl> + <nl> + # show the status of a single locale <nl> + $ php translation-status.php fr <nl> + <nl> + # show the status of a single locale and all its missing translations <nl> + $ php translation-status.php fr -v <nl> + <nl> +END; <nl> + <nl> +$config = [ <nl> + // if TRUE, the full list of missing translations is displayed <nl> + 'verbose_output' => false, <nl> + // NULL = analyze all locales <nl> + 'locale_to_analyze' => null, <nl> + // the reference files all the other translations are compared to <nl> + 'original_files' => [ <nl> + 'src/Symfony/Component/Form/Resources/translations/validators.en.xlf', <nl> + 'src/Symfony/Component/Security/Core/Resources/translations/security.en.xlf', <nl> + 'src/Symfony/Component/Validator/Resources/translations/validators.en.xlf', <nl> + ], <nl> +]; <nl> + <nl> +$argc = $_SERVER['argc']; <nl> +$argv = $_SERVER['argv']; <nl> + <nl> +if ($argc > 3) { <nl> + echo str_replace('translation-status.php', $argv[0], $usageInstructions); <nl> + exit(1); <nl> +} <nl> + <nl> +foreach (array_slice($argv, 1) as $argumentOrOption) { <nl> + if (0 === strpos($argumentOrOption, '-')) { <nl> + $config['verbose_output'] = true; <nl> + } else { <nl> + $config['locale_to_analyze'] = $argumentOrOption; <nl> + } <nl> +} <nl> + <nl> +foreach ($config['original_files'] as $originalFilePath) { <nl> + if (!file_exists($originalFilePath)) { <nl> + echo sprintf('The following file does not exist. Make sure that you execute this command at the root dir of the Symfony code repository.%s %s', PHP_EOL, $originalFilePath); <nl> + exit(1); <nl> + } <nl> +} <nl> + <nl> +$totalMissingTranslations = 0; <nl> + <nl> +foreach ($config['original_files'] as $originalFilePath) { <nl> + $translationFilePaths = findTranslationFiles($originalFilePath, $config['locale_to_analyze']); <nl> + $translationStatus = calculateTranslationStatus($originalFilePath, $translationFilePaths); <nl> + <nl> + $totalMissingTranslations += array_sum(array_map(function ($translation) { <nl> + return \\count($translation['missingKeys']); <nl> + }, array_values($translationStatus))); <nl> + <nl> + printTranslationStatus($originalFilePath, $translationStatus, $config['verbose_output']); <nl> +} <nl> + <nl> +exit($totalMissingTranslations > 0 ? 1 : 0); <nl> + <nl> +function findTranslationFiles($originalFilePath, $localeToAnalyze) <nl> +{ <nl> + $translations = []; <nl> + <nl> + $translationsDir = dirname($originalFilePath); <nl> + $originalFileName = basename($originalFilePath); <nl> + $translationFileNamePattern = str_replace('.en.', '.*.', $originalFileName); <nl> + <nl> + $translationFiles = glob($translationsDir.'/'.$translationFileNamePattern); <nl> + foreach ($translationFiles as $filePath) { <nl> + $locale = extractLocaleFromFilePath($filePath); <nl> + <nl> + if (null !== $localeToAnalyze && $locale !== $localeToAnalyze) { <nl> + continue; <nl> + } <nl> + <nl> + $translations[$locale] = $filePath; <nl> + } <nl> + <nl> + return $translations; <nl> +} <nl> + <nl> +function calculateTranslationStatus($originalFilePath, $translationFilePaths) <nl> +{ <nl> + $translationStatus = []; <nl> + $allTranslationKeys = extractTranslationKeys($originalFilePath); <nl> + <nl> + foreach ($translationFilePaths as $locale => $translationPath) { <nl> + $translatedKeys = extractTranslationKeys($translationPath); <nl> + $missingKeys = array_diff_key($allTranslationKeys, $translatedKeys); <nl> + <nl> + $translationStatus[$locale] = [ <nl> + 'total' => \\count($allTranslationKeys), <nl> + 'translated' => \\count($translatedKeys), <nl> + 'missingKeys' => $missingKeys, <nl> + ]; <nl> + } <nl> + <nl> + return $translationStatus; <nl> +} <nl> + <nl> +function printTranslationStatus($originalFilePath, $translationStatus, $verboseOutput) <nl> +{ <nl> + printTitle($originalFilePath); <nl> + printTable($translationStatus, $verboseOutput); <nl> + echo PHP_EOL.PHP_EOL; <nl> +} <nl> + <nl> +function extractLocaleFromFilePath($filePath) <nl> +{ <nl> + $parts = explode('.', $filePath); <nl> + <nl> + return $parts[count($parts) - 2]; <nl> +} <nl> + <nl> +function extractTranslationKeys($filePath) <nl> +{ <nl> + $translationKeys = []; <nl> + $contents = new \\SimpleXMLElement(file_get_contents($filePath)); <nl> + <nl> + foreach ($contents->file->body->{'trans-unit'} as $translationKey) { <nl> + $translationId = (string) $translationKey['id']; <nl> + $translationKey = (string) $translationKey->source; <nl> + <nl> + $translationKeys[$translationId] = $translationKey; <nl> + } <nl> + <nl> + return $translationKeys; <nl> +} <nl> + <nl> +function printTitle($title) <nl> +{ <nl> + echo $title.PHP_EOL; <nl> + echo str_repeat('=', strlen($title)).PHP_EOL.PHP_EOL; <nl> +} <nl> + <nl> +function printTable($translations, $verboseOutput) <nl> +{ <nl> + $longestLocaleNameLength = max(array_map('strlen', array_keys($translations))); <nl> + <nl> + foreach ($translations as $locale => $translation) { <nl> + $isTranslationCompleted = $translation['translated'] === $translation['total']; <nl> + if ($isTranslationCompleted) { <nl> + textColorGreen(); <nl> + } <nl> + <nl> + echo sprintf('| Locale: %-'.$longestLocaleNameLength.'s | Translated: %d/%d', $locale, $translation['translated'], $translation['total']).PHP_EOL; <nl> + <nl> + textColorNormal(); <nl> + <nl> + if (true === $verboseOutput && \\count($translation['missingKeys']) > 0) { <nl> + echo str_repeat('-', 80).PHP_EOL; <nl> + echo '| Missing Translations:'.PHP_EOL; <nl> + <nl> + foreach ($translation['missingKeys'] as $id => $content) { <nl> + echo sprintf('| (id=%s) %s', $id, $content).PHP_EOL; <nl> + } <nl> + <nl> + echo str_repeat('-', 80).PHP_EOL; <nl> + } <nl> + } <nl> +} <nl> + <nl> +function textColorGreen() <nl> +{ <nl> + echo \"\\033[32m\"; <nl> +} <nl> + <nl> +function textColorNormal() <nl> +{ <nl> + echo \"\\033[0m\"; <nl> +} <nl> ", "msg": "[Translation] Added a script to display the status of translations"}
{"diff_id": 294, "repo": "symfony/translation", "sha": "8095c17323622f44b9947232328c1450acbd2af6", "time": "30.03.2019 13:53:13", "diff": "mmm a / Loader/XliffFileLoader.php <nl> ppp b / Loader/XliffFileLoader.php <nl>@@ -58,7 +58,7 @@ class XliffFileLoader implements LoaderInterface <nl> $xliffVersion = XliffUtils::getVersionNumber($dom); <nl> if ($errors = XliffUtils::validateSchema($dom)) { <nl> - throw new InvalidResourceException(sprintf('Invalid resource provided: \"%s\"; Errors: %s', $xliffVersion, XliffUtils::getErrorsAsString($errors))); <nl> + throw new InvalidResourceException(sprintf('Invalid resource provided: \"%s\"; Errors: %s', $resource, XliffUtils::getErrorsAsString($errors))); <nl> } <nl> if ('1.2' === $xliffVersion) { <nl> ", "msg": "[Translator] Add resource path to exception message for schema validation errors"}
{"diff_id": 302, "repo": "symfony/translation", "sha": "fe02e6154114432791ef7c67fe1be11b4c394a70", "time": "28.05.2019 19:14:45", "diff": "mmm a / Loader/ArrayLoader.php <nl> ppp b / Loader/ArrayLoader.php <nl>@@ -25,7 +25,7 @@ class ArrayLoader implements LoaderInterface <nl> */ <nl> public function load($resource, $locale, $domain = 'messages') <nl> { <nl> - $this->flatten($resource); <nl> + $resource = $this->flatten($resource); <nl> $catalogue = new MessageCatalogue($locale); <nl> $catalogue->add($resource, $domain); <nl> @@ -39,28 +39,20 @@ class ArrayLoader implements LoaderInterface <nl> * 'key' => ['key2' => ['key3' => 'value']] <nl> * Becomes: <nl> * 'key.key2.key3' => 'value' <nl> - * <nl> - * This function takes an array by reference and will modify it <nl> - * <nl> - * @param array &$messages The array that will be flattened <nl> - * @param array $subnode Current subnode being parsed, used internally for recursive calls <nl> - * @param string $path Current path being parsed, used internally for recursive calls <nl> */ <nl> - private function flatten(array &$messages, array $subnode = null, $path = null) <nl> + private function flatten(array $messages): array <nl> { <nl> - if (null === $subnode) { <nl> - $subnode = &$messages; <nl> - } <nl> - foreach ($subnode as $key => $value) { <nl> + $result = []; <nl> + foreach ($messages as $key => $value) { <nl> if (\\is_array($value)) { <nl> - $nodePath = $path ? $path.'.'.$key : $key; <nl> - $this->flatten($messages, $value, $nodePath); <nl> - if (null === $path) { <nl> - unset($messages[$key]); <nl> + foreach ($this->flatten($value) as $k => $v) { <nl> + $result[$key.'.'.$k] = $v; <nl> } <nl> - } elseif (null !== $path) { <nl> - $messages[$path.'.'.$key] = $value; <nl> + } else { <nl> + $result[$key] = $value; <nl> } <nl> } <nl> + <nl> + return $result; <nl> } <nl> } <nl> ", "msg": "[Translation] refactor ArrayLoader::flatten"}
{"diff_id": 303, "repo": "symfony/translation", "sha": "136175eda23f885dc73ff969aa659d959bc06faf", "time": "12.06.2019 17:14:20", "diff": "mmm a / LoggingTranslator.php <nl> ppp b / LoggingTranslator.php <nl>@@ -84,6 +84,10 @@ class LoggingTranslator implements TranslatorInterface, LegacyTranslatorInterfac <nl> { <nl> $prev = $this->translator->getLocale(); <nl> $this->translator->setLocale($locale); <nl> + if ($prev === $locale) { <nl> + return; <nl> + } <nl> + <nl> $this->logger->debug(sprintf('The locale of the translator has changed from \"%s\" to \"%s\".', $prev, $locale)); <nl> } <nl> ", "msg": "Do not log or call the proxy function when the locale is the same"}
{"diff_id": 305, "repo": "symfony/translation", "sha": "2c1d800807cfaf5a2c72102f3a7452cd28a12cc0", "time": "13.07.2019 23:56:42", "diff": "mmm a / Loader/PoFileLoader.php <nl> ppp b / Loader/PoFileLoader.php <nl>namespace Symfony\\Component\\Translation\\Loader; <nl> /** <nl> - * @copyright Copyright (c) 2010, Union of RAD http://union-of-rad.org (http://lithify.me/) <nl> + * @copyright Copyright (c) 2010, Union of RAD https://github.com/UnionOfRAD/lithium <nl> * @copyright Copyright (c) 2012, Clemens Tolboom <nl> */ <nl> class PoFileLoader extends FileLoader <nl> @@ -20,7 +20,7 @@ class PoFileLoader extends FileLoader <nl> /** <nl> * Parses portable object (PO) format. <nl> * <nl> - * From http://www.gnu.org/software/gettext/manual/gettext.html#PO-Files <nl> + * From https://www.gnu.org/software/gettext/manual/gettext.html#PO-Files <nl> * we should be able to parse files having: <nl> * <nl> * white-space <nl> ", "msg": "[Translation] Use HTTPS and fix a url"}
{"diff_id": 313, "repo": "symfony/translation", "sha": "86ae792518d2d7c0b21de1ab3d49465748baa17b", "time": "09.09.2019 08:40:31", "diff": "mmm a / Command/XliffLintCommand.php <nl> ppp b / Command/XliffLintCommand.php <nl>@@ -83,9 +83,9 @@ EOF <nl> $filenames = (array) $input->getArgument('filename'); <nl> $this->format = $input->getOption('format'); <nl> $this->displayCorrectFiles = $output->isVerbose(); <nl> - $hasStdin = '-' === ($filenames[0] ?? ''); <nl> + $hasStdin = ['-'] === $filenames; <nl> - if ($hasStdin || 0 === \\count($filenames)) { <nl> + if ($hasStdin || !$filenames) { <nl> if (!$hasStdin && 0 !== ftell(STDIN)) { // remove 0 !== ftell(STDIN) check in 5.0 <nl> throw new RuntimeException('Please provide a filename or pipe file content to STDIN.'); <nl> } <nl> ", "msg": "Require exact match when reading from stdin with a dash"}
{"diff_id": 317, "repo": "symfony/translation", "sha": "5e9514d3994ed56afca7afb1c8f0fb2973592358", "time": "09.11.2019 10:30:00", "diff": "mmm a / IdentityTranslator.php <nl> ppp b / IdentityTranslator.php <nl>@@ -24,6 +24,7 @@ class IdentityTranslator implements LegacyTranslatorInterface, TranslatorInterfa <nl> { <nl> use TranslatorTrait { <nl> trans as private doTrans; <nl> + setLocale as private doSetLocale; <nl> } <nl> private $selector; <nl> @@ -45,6 +46,14 @@ class IdentityTranslator implements LegacyTranslatorInterface, TranslatorInterfa <nl> return $this->doTrans($id, $parameters, $domain, $locale); <nl> } <nl> + /** <nl> + * {@inheritdoc} <nl> + */ <nl> + public function setLocale($locale) <nl> + { <nl> + $this->doSetLocale($locale); <nl> + } <nl> + <nl> /** <nl> * {@inheritdoc} <nl> * <nl> ", "msg": "[Translator] fix compat with translation-contracts v2"}
{"diff_id": 320, "repo": "symfony/translation", "sha": "582d21bb0a33bb4434ccf7843657865e34d03c15", "time": "27.12.2019 18:26:36", "diff": "mmm a / MessageCatalogue.php <nl> ppp b / MessageCatalogue.php <nl>@@ -130,7 +130,9 @@ class MessageCatalogue implements MessageCatalogueInterface, MetadataAwareInterf <nl> if (!isset($this->messages[$domain])) { <nl> $this->messages[$domain] = $messages; <nl> } else { <nl> - $this->messages[$domain] = array_replace($this->messages[$domain], $messages); <nl> + foreach ($messages as $id => $message) { <nl> + $this->messages[$domain][$id] = $message; <nl> + } <nl> } <nl> } <nl> ", "msg": "[Translator] Performance improvement in MessageCatalogue and catalogue operations."}
{"diff_id": 324, "repo": "symfony/translation", "sha": "74fc47fc130f1ff96f93dff4716da29d4b1fc8fd", "time": "24.03.2020 23:00:18", "diff": "mmm a / Translator.php <nl> ppp b / Translator.php <nl>@@ -24,6 +24,9 @@ use Symfony\\Component\\Translation\\Loader\\LoaderInterface; <nl> use Symfony\\Contracts\\Translation\\LocaleAwareInterface; <nl> use Symfony\\Contracts\\Translation\\TranslatorInterface; <nl> +// Help opcache.preload discover always-needed symbols <nl> +class_exists(MessageCatalogue::class); <nl> + <nl> /** <nl> * @author Fabien Potencier <fabien@symfony.com> <nl> */ <nl> ", "msg": "[DI] add tags `container.preload`/`.no_preload` to declare extra classes to preload/services to not preload"}
{"diff_id": 354, "repo": "symfony/translation", "sha": "da9766d0816228c7b6a31992887f7789f33abd1f", "time": "01.06.2021 21:39:21", "diff": "mmm a / Command/TranslationPushCommand.php <nl> ppp b / Command/TranslationPushCommand.php <nl>@@ -94,13 +94,13 @@ EOF <nl> */ <nl> protected function execute(InputInterface $input, OutputInterface $output): int <nl> { <nl> + $provider = $this->providers->get($input->getArgument('provider')); <nl> + <nl> if (!$this->enabledLocales) { <nl> - throw new InvalidArgumentException('You must define \"framework.translator.enabled_locales\" or \"framework.translator.providers.%s.locales\" config key in order to work with translation providers.'); <nl> + throw new InvalidArgumentException(sprintf('You must define \"framework.translator.enabled_locales\" or \"framework.translator.providers.%s.locales\" config key in order to work with translation providers.', parse_url($provider, \\PHP_URL_SCHEME))); <nl> } <nl> $io = new SymfonyStyle($input, $output); <nl> - <nl> - $provider = $this->providers->get($input->getArgument('provider')); <nl> $domains = $input->getOption('domains'); <nl> $locales = $input->getOption('locales'); <nl> $force = $input->getOption('force'); <nl> ", "msg": "Fixed default value for locales in translation push|pull commands"}
{"diff_id": 355, "repo": "symfony/translation", "sha": "e2b1771fd0c8be86be977cdd85aa99f54b5f191c", "time": "20.07.2021 12:33:05", "diff": "mmm a / Resources/bin/translation-status.php <nl> ppp b / Resources/bin/translation-status.php <nl>@@ -19,13 +19,16 @@ $usageInstructions = <<<END <nl> # show the translation status of all locales <nl> $ php translation-status.php <nl> - # show the translation status of all locales and all their missing translations <nl> + # only show the translation status of incomplete or erroneous locales <nl> + $ php translation-status.php --incomplete <nl> + <nl> + # show the translation status of all locales, all their missing translations and mismatches between trans-unit id and source <nl> $ php translation-status.php -v <nl> # show the status of a single locale <nl> $ php translation-status.php fr <nl> - # show the status of a single locale and all its missing translations <nl> + # show the status of a single locale, missing translations and mismatches between trans-unit id and source <nl> $ php translation-status.php fr -v <nl> END; <nl> @@ -35,6 +38,8 @@ $config = [ <nl> 'verbose_output' => false, <nl> // NULL = analyze all locales <nl> 'locale_to_analyze' => null, <nl> + // append --incomplete to only show incomplete languages <nl> + 'include_completed_languages' => true, <nl> // the reference files all the other translations are compared to <nl> 'original_files' => [ <nl> 'src/Symfony/Component/Form/Resources/translations/validators.en.xlf', <nl> @@ -46,12 +51,17 @@ $config = [ <nl> $argc = $_SERVER['argc']; <nl> $argv = $_SERVER['argv']; <nl> -if ($argc > 3) { <nl> +if ($argc > 4) { <nl> echo str_replace('translation-status.php', $argv[0], $usageInstructions); <nl> exit(1); <nl> } <nl> foreach (array_slice($argv, 1) as $argumentOrOption) { <nl> + if ('--incomplete' === $argumentOrOption) { <nl> + $config['include_completed_languages'] = false; <nl> + continue; <nl> + } <nl> + <nl> if (str_starts_with($argumentOrOption, '-')) { <nl> $config['verbose_output'] = true; <nl> } else { <nl> @@ -67,6 +77,7 @@ foreach ($config['original_files'] as $originalFilePath) { <nl> } <nl> $totalMissingTranslations = 0; <nl> +$totalTranslationMismatches = 0; <nl> foreach ($config['original_files'] as $originalFilePath) { <nl> $translationFilePaths = findTranslationFiles($originalFilePath, $config['locale_to_analyze']); <nl> @@ -75,11 +86,14 @@ foreach ($config['original_files'] as $originalFilePath) { <nl> $totalMissingTranslations += array_sum(array_map(function ($translation) { <nl> return count($translation['missingKeys']); <nl> }, array_values($translationStatus))); <nl> + $totalTranslationMismatches += array_sum(array_map(function ($translation) { <nl> + return count($translation['mismatches']); <nl> + }, array_values($translationStatus))); <nl> - printTranslationStatus($originalFilePath, $translationStatus, $config['verbose_output']); <nl> + printTranslationStatus($originalFilePath, $translationStatus, $config['verbose_output'], $config['include_completed_languages']); <nl> } <nl> -exit($totalMissingTranslations > 0 ? 1 : 0); <nl> +exit($totalTranslationMismatches > 0 ? 1 : 0); <nl> function findTranslationFiles($originalFilePath, $localeToAnalyze) <nl> { <nl> @@ -112,21 +126,29 @@ function calculateTranslationStatus($originalFilePath, $translationFilePaths) <nl> foreach ($translationFilePaths as $locale => $translationPath) { <nl> $translatedKeys = extractTranslationKeys($translationPath); <nl> $missingKeys = array_diff_key($allTranslationKeys, $translatedKeys); <nl> + $mismatches = findTransUnitMismatches($allTranslationKeys, $translatedKeys); <nl> $translationStatus[$locale] = [ <nl> 'total' => count($allTranslationKeys), <nl> 'translated' => count($translatedKeys), <nl> 'missingKeys' => $missingKeys, <nl> + 'mismatches' => $mismatches, <nl> ]; <nl> + $translationStatus[$locale]['is_completed'] = isTranslationCompleted($translationStatus[$locale]); <nl> } <nl> return $translationStatus; <nl> } <nl> -function printTranslationStatus($originalFilePath, $translationStatus, $verboseOutput) <nl> +function isTranslationCompleted(array $translationStatus): bool <nl> +{ <nl> + return $translationStatus['total'] === $translationStatus['translated'] && 0 === count($translationStatus['mismatches']); <nl> +} <nl> + <nl> +function printTranslationStatus($originalFilePath, $translationStatus, $verboseOutput, $includeCompletedLanguages) <nl> { <nl> printTitle($originalFilePath); <nl> - printTable($translationStatus, $verboseOutput); <nl> + printTable($translationStatus, $verboseOutput, $includeCompletedLanguages); <nl> echo \\PHP_EOL.\\PHP_EOL; <nl> } <nl> @@ -152,13 +174,35 @@ function extractTranslationKeys($filePath) <nl> return $translationKeys; <nl> } <nl> +/** <nl> + * Check whether the trans-unit id and source match with the base translation. <nl> + */ <nl> +function findTransUnitMismatches(array $baseTranslationKeys, array $translatedKeys): array <nl> +{ <nl> + $mismatches = []; <nl> + <nl> + foreach ($baseTranslationKeys as $translationId => $translationKey) { <nl> + if (!isset($translatedKeys[$translationId])) { <nl> + continue; <nl> + } <nl> + if ($translatedKeys[$translationId] !== $translationKey) { <nl> + $mismatches[$translationId] = [ <nl> + 'found' => $translatedKeys[$translationId], <nl> + 'expected' => $translationKey, <nl> + ]; <nl> + } <nl> + } <nl> + <nl> + return $mismatches; <nl> +} <nl> + <nl> function printTitle($title) <nl> { <nl> echo $title.\\PHP_EOL; <nl> echo str_repeat('=', strlen($title)).\\PHP_EOL.\\PHP_EOL; <nl> } <nl> -function printTable($translations, $verboseOutput) <nl> +function printTable($translations, $verboseOutput, bool $includeCompletedLanguages) <nl> { <nl> if (0 === count($translations)) { <nl> echo 'No translations found'; <nl> @@ -168,24 +212,47 @@ function printTable($translations, $verboseOutput) <nl> $longestLocaleNameLength = max(array_map('strlen', array_keys($translations))); <nl> foreach ($translations as $locale => $translation) { <nl> + if (!$includeCompletedLanguages && $translation['is_completed']) { <nl> + continue; <nl> + } <nl> + <nl> if ($translation['translated'] > $translation['total']) { <nl> textColorRed(); <nl> - } elseif ($translation['translated'] === $translation['total']) { <nl> + } elseif (count($translation['mismatches']) > 0) { <nl> + textColorRed(); <nl> + } elseif ($translation['is_completed']) { <nl> textColorGreen(); <nl> } <nl> - echo sprintf('| Locale: %-'.$longestLocaleNameLength.'s | Translated: %d/%d', $locale, $translation['translated'], $translation['total']).\\PHP_EOL; <nl> + echo sprintf( <nl> + '| Locale: %-'.$longestLocaleNameLength.'s | Translated: %2d/%2d | Mismatches: %d |', <nl> + $locale, <nl> + $translation['translated'], <nl> + $translation['total'], <nl> + count($translation['mismatches']) <nl> + ).\\PHP_EOL; <nl> textColorNormal(); <nl> + $shouldBeClosed = false; <nl> if (true === $verboseOutput && count($translation['missingKeys']) > 0) { <nl> - echo str_repeat('-', 80).\\PHP_EOL; <nl> echo '| Missing Translations:'.\\PHP_EOL; <nl> foreach ($translation['missingKeys'] as $id => $content) { <nl> echo sprintf('| (id=%s) %s', $id, $content).\\PHP_EOL; <nl> } <nl> + $shouldBeClosed = true; <nl> + } <nl> + if (true === $verboseOutput && count($translation['mismatches']) > 0) { <nl> + echo '| Mismatches between trans-unit id and source:'.\\PHP_EOL; <nl> + foreach ($translation['mismatches'] as $id => $content) { <nl> + echo sprintf('| (id=%s) Expected: %s', $id, $content['expected']).\\PHP_EOL; <nl> + echo sprintf('| Found: %s', $content['found']).\\PHP_EOL; <nl> + } <nl> + $shouldBeClosed = true; <nl> + } <nl> + if ($shouldBeClosed) { <nl> echo str_repeat('-', 80).\\PHP_EOL; <nl> } <nl> } <nl> ", "msg": "Report mismatches between trans-unit id and source text via status script"}
{"diff_id": 366, "repo": "symfony/translation", "sha": "41933e052e1391ce74c8fcce9d3ec2c1b3428019", "time": "03.12.2022 10:03:15", "diff": "mmm a / Extractor/Visitor/AbstractVisitor.php <nl> ppp b / Extractor/Visitor/AbstractVisitor.php <nl>@@ -42,32 +42,31 @@ abstract class AbstractVisitor <nl> protected function getStringArguments(Node\\Expr\\CallLike|Node\\Attribute|Node\\Expr\\New_ $node, int|string $index, bool $indexIsRegex = false): array <nl> { <nl> - $args = $node instanceof Node\\Expr\\CallLike ? $node->getArgs() : $node->args; <nl> - <nl> if (\\is_string($index)) { <nl> return $this->getStringNamedArguments($node, $index, $indexIsRegex); <nl> } <nl> + $args = $node instanceof Node\\Expr\\CallLike ? $node->getRawArgs() : $node->args; <nl> + <nl> if (\\count($args) < $index) { <nl> return []; <nl> } <nl> - /** @var Node\\Arg $arg */ <nl> - $arg = $args[$index]; <nl> - if (!$result = $this->getStringValue($arg->value)) { <nl> - return []; <nl> + if (($arg = $args[$index]) instanceof Node\\Arg) { <nl> + if ($result = $this->getStringValue($arg->value)) { <nl> + return [$result]; <nl> + } <nl> } <nl> - return [$result]; <nl> + return []; <nl> } <nl> protected function hasNodeNamedArguments(Node\\Expr\\CallLike|Node\\Attribute|Node\\Expr\\New_ $node): bool <nl> { <nl> - $args = $node instanceof Node\\Expr\\CallLike ? $node->getArgs() : $node->args; <nl> + $args = $node instanceof Node\\Expr\\CallLike ? $node->getRawArgs() : $node->args; <nl> - /** @var Node\\Arg $arg */ <nl> foreach ($args as $arg) { <nl> - if (null !== $arg->name) { <nl> + if ($arg instanceof Node\\Arg && null !== $arg->name) { <nl> return true; <nl> } <nl> } <nl> ", "msg": "[Translation] Fix extraction when dealing with VariadicPlaceholder parameters"}
{"diff_id": 383, "repo": "tenancy/tenancy", "sha": "260b1b78829fb7f4ba2b56c9afcd154477b7cb5a", "time": "24.02.2019 14:29:57", "diff": "mmm a / src/Database/Mysql/Driver/Mysql.php <nl> ppp b / src/Database/Mysql/Driver/Mysql.php <nl>@@ -20,7 +20,7 @@ use Tenancy\\Identification\\Contracts\\Tenant; <nl> class Mysql implements ProvidesDatabase <nl> { <nl> - public function configure(Tenant $tenant, $checkDirty = false): array <nl> + public function configure(Tenant $tenant): array <nl> { <nl> if ($name = config('db-driver-mysql.use-connection')) { <nl> return config(\"database.connections.$name\"); <nl> @@ -28,7 +28,7 @@ class Mysql implements ProvidesDatabase <nl> $config = config('db-driver-mysql.preset', []); <nl> - if($checkDirty && $tenant->isDirty($tenant->getTenantKeyName())){ <nl> + if($tenant->isDirty($tenant->getTenantKeyName())){ <nl> $config['oldUsername'] = $tenant->getOriginal($tenant->getTenantKeyName()); <nl> } <nl> @@ -61,7 +61,7 @@ class Mysql implements ProvidesDatabase <nl> */ <nl> public function update(Tenant $tenant): array <nl> { <nl> - $config = $this->configure($tenant, true); <nl> + $config = $this->configure($tenant); <nl> if(!isset($config['oldUsername'])){ <nl> return []; <nl> ", "msg": "Remove dependency of checkDirty to compile with contract"}
{"diff_id": 384, "repo": "tenancy/tenancy", "sha": "4d85a01bfcecd7fdfb60017d2f4100b2bf14f437", "time": "26.02.2019 15:53:22", "diff": "mmm a / src/Tenancy/Providers/TenantProvider.php <nl> ppp b / src/Tenancy/Providers/TenantProvider.php <nl>@@ -16,9 +16,9 @@ namespace Tenancy\\Providers; <nl> use Illuminate\\Contracts\\Foundation\\Application; <nl> use Illuminate\\Support\\ServiceProvider; <nl> +use Illuminate\\Contracts\\Support\\DeferrableProvider; <nl> use Tenancy\\Identification\\Contracts\\ResolvesTenants; <nl> use Tenancy\\Identification\\Contracts\\Tenant; <nl> -use Illuminate\\Contracts\\Support\\DeferrableProvider; <nl> class TenantProvider extends ServiceProvider implements DeferrableProvider <nl> { <nl> ", "msg": "Change the order of dependencies\nLooks better, makes more sense"}
{"diff_id": 399, "repo": "tenancy/tenancy", "sha": "f901dfe44f31e7f746a34a3d9e447ad38e4c27eb", "time": "29.03.2019 20:01:07", "diff": "mmm a / src/Affects/Routes/Events/ConfigureRoutes.php <nl> ppp b / src/Affects/Routes/Events/ConfigureRoutes.php <nl>namespace Tenancy\\Affects\\Routes\\Events; <nl> +use Illuminate\\Routing\\RouteCollection; <nl> use Illuminate\\Routing\\Router; <nl> use Tenancy\\Identification\\Events\\Resolved; <nl> use Tenancy\\Identification\\Events\\Switched; <nl> @@ -34,4 +35,30 @@ class ConfigureRoutes <nl> $this->event = $event; <nl> $this->router = $router; <nl> } <nl> + <nl> + /** <nl> + * Flush all tenant routes for this request. <nl> + * <nl> + * @return $this <nl> + */ <nl> + public function flush() <nl> + { <nl> + $this->router->setRoutes(new RouteCollection()); <nl> + <nl> + return $this; <nl> + } <nl> + <nl> + /** <nl> + * Adds routes from a routes.php file to the current request. <nl> + * <nl> + * @param array $attributes <nl> + * @param string $path <nl> + * @return $this <nl> + */ <nl> + public function fromFile(array $attributes, string $path) <nl> + { <nl> + $this->router->group($attributes, $path); <nl> + <nl> + return $this; <nl> + } <nl> } <nl> ", "msg": "simplified use of ConfigureRoutes"}
{"diff_id": 400, "repo": "tenancy/tenancy", "sha": "614b0e7c9eaa917a32c7df33998e516550d72a9e", "time": "03.04.2019 09:25:34", "diff": "mmm a / tests/unit/Affects/Config/ConfiguresConfigTest.php <nl> ppp b / tests/unit/Affects/Config/ConfiguresConfigTest.php <nl>@@ -50,15 +50,32 @@ class ConfiguresConfigTest extends TestCase <nl> */ <nl> public function can_set_config() <nl> { <nl> - $this->assertNull(config('cool.test')); <nl> + $this->assertNull(config('test')); <nl> Event::listen(ConfigureConfig::class, function (ConfigureConfig $event) { <nl> - $event->config->set('cool.test', true); <nl> + $event->config->set('test', true); <nl> }); <nl> $this->tenant = $this->mockTenant(); <nl> Tenancy::setTenant($this->tenant); <nl> - $this->assertTrue(config('cool.test')); <nl> + $this->assertTrue(config('test')); <nl> + } <nl> + <nl> + /** <nl> + * @test <nl> + */ <nl> + public function can_use_direct_call() <nl> + { <nl> + $this->assertNull(config('test')); <nl> + <nl> + Event::listen(ConfigureConfig::class, function (ConfigureConfig $event) { <nl> + $event->set('test', true); <nl> + }); <nl> + <nl> + $this->tenant = $this->mockTenant(); <nl> + Tenancy::setTenant($this->tenant); <nl> + <nl> + $this->assertTrue(config('test')); <nl> } <nl> } <nl> ", "msg": "Cleaner & Additional Test for direct event calls"}
{"diff_id": 409, "repo": "tenancy/tenancy", "sha": "33128bb9a168751c6b72cbfc1dd13a8e908eb208", "time": "26.05.2019 21:11:37", "diff": "mmm a / src/Tenancy/Database/Events/Drivers/Configuring.php <nl> ppp b / src/Tenancy/Database/Events/Drivers/Configuring.php <nl>@@ -52,6 +52,17 @@ class Configuring <nl> return $this; <nl> } <nl> + public function useConfig(string $path) <nl> + { <nl> + if (! file_exists($path)) { <nl> + throw new \\InvalidArgumentException(\"Cannot set up tenant connection configuration, file $path does not exist.\"); <nl> + } <nl> + <nl> + $this->configuration = include $path; <nl> + <nl> + return $this; <nl> + } <nl> + <nl> protected function defaults(Tenant $tenant, array &$configuration): array <nl> { <nl> if ($tenant->isDirty($tenant->getTenantKeyName())) { <nl> ", "msg": "add ability to set up connection configuration using file"}
{"diff_id": 441, "repo": "tenancy/tenancy", "sha": "68c69069174993130128d4722530ceedec27d4a3", "time": "20.08.2019 14:41:09", "diff": "mmm a / tests/unit/Database/Mysql/MysqlDriverTest.php <nl> ppp b / tests/unit/Database/Mysql/MysqlDriverTest.php <nl>@@ -44,10 +44,7 @@ class MysqlDriverTest extends DatabaseDriverTestCase <nl> $event->configuration); <nl> }); <nl> $this->events->listen([Creating::class, Updating::class, Deleting::class], function ($event) { <nl> - $event->useConfig( <nl> - __DIR__.DIRECTORY_SEPARATOR.'database.php', <nl> - array_merge($event->configuration, ['host' => '%']) <nl> - ); <nl> + $event->configuration['host'] = '%'; <nl> }); <nl> } <nl> } <nl> ", "msg": "Lets not use a removed function"}
{"diff_id": 458, "repo": "tenancy/tenancy", "sha": "44d5913d6d9fa513dc3c00b62bd76328583e0b2f", "time": "17.09.2019 10:46:10", "diff": "mmm a / src/Affects/Mail/Events/ConfigureMail.php <nl> ppp b / src/Affects/Mail/Events/ConfigureMail.php <nl>@@ -17,7 +17,6 @@ declare(strict_types=1); <nl> namespace Tenancy\\Affects\\Mail\\Events; <nl> use GuzzleHttp\\Client; <nl> -use GuzzleHttp\\ClientInterface; <nl> use Illuminate\\Contracts\\Mail\\Mailer; <nl> use Illuminate\\Mail\\Transport\\MailgunTransport; <nl> use Swift_Mailer; <nl> @@ -54,6 +53,8 @@ class ConfigureMail <nl> public function setFrom(string $address, string $name = null) <nl> { <nl> $this->mailer->alwaysFrom($address, $name); <nl> + <nl> + return $this; <nl> } <nl> /** <nl> @@ -67,6 +68,8 @@ class ConfigureMail <nl> public function loadMailgunConfig(string $key, string $domain, string $endpoint = null) <nl> { <nl> $this->replaceSwiftMailer(new MailgunTransport(new Client(config('services.mailgun')), $key, $domain, $endpoint)); <nl> + <nl> + return $this; <nl> } <nl> /** <nl> @@ -88,7 +91,7 @@ class ConfigureMail <nl> $transport->setPassword($password); <nl> } <nl> - $this->replaceSwiftMailer($transport); <nl> + return $this->replaceSwiftMailer($transport); <nl> } <nl> /** <nl> @@ -102,5 +105,7 @@ class ConfigureMail <nl> public function replaceSwiftMailer(Swift_Transport $transport) <nl> { <nl> $this->mailer->setSwiftMailer(new Swift_Mailer($transport)); <nl> + <nl> + return $this; <nl> } <nl> } <nl> ", "msg": "Return this on all functions to make it more fluent"}
{"diff_id": 470, "repo": "tenancy/tenancy", "sha": "29fa8e31c0693c32c018f0169a9a26630da911d8", "time": "20.02.2020 21:15:00", "diff": "mmm a / tests/Affects/Views/Feature/ConfiguresViewTest.php <nl> ppp b / tests/Affects/Views/Feature/ConfigureViewsNamespaceTest.php <nl>@@ -22,14 +22,14 @@ use Tenancy\\Affects\\Views\\Provider; <nl> use Tenancy\\Identification\\Contracts\\Tenant; <nl> use Tenancy\\Tests\\Affects\\AffectsFeatureTestCase; <nl> -class ConfiguresViewsTest extends AffectsFeatureTestCase <nl> +class ConfigureViewsNamespaceTest extends AffectsFeatureTestCase <nl> { <nl> protected $additionalProviders = [Provider::class]; <nl> protected function registerAffecting() <nl> { <nl> $this->events->listen(ConfigureViews::class, function (ConfigureViews $event) { <nl> - $event->addNamespace(__DIR__ . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR . 'views'); <nl> + $event->addNamespace($this->getViewsPath()); <nl> }); <nl> } <nl> @@ -37,6 +37,12 @@ class ConfiguresViewsTest extends AffectsFeatureTestCase <nl> { <nl> /** @var Factory $views */ <nl> $views = $this->app->make(Factory::class); <nl> + <nl> return $views->exists('tenant::test'); <nl> } <nl> + <nl> + private function getViewsPath() <nl> + { <nl> + return __DIR__ . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR . 'views'; <nl> + } <nl> } <nl> ", "msg": "Improve and rename ConfigureViewTest"}
{"diff_id": 498, "repo": "sonata-project/sonatamediabundle", "sha": "aa2946b09777e6b02a1726683604241c08acfd77", "time": "20.01.2017 11:07:01", "diff": "mmm a / Thumbnail/ConsumerThumbnail.php <nl> ppp b / Thumbnail/ConsumerThumbnail.php <nl>@@ -39,6 +39,8 @@ class ConsumerThumbnail implements ThumbnailInterface <nl> protected $dispatcher; <nl> /** <nl> + * NEXT_MAJOR: remove optional null for EventDispatcherInterface. <nl> + * <nl> * @param string $id <nl> * @param ThumbnailInterface $thumbnail <nl> * @param BackendInterface $backend <nl> @@ -46,6 +48,17 @@ class ConsumerThumbnail implements ThumbnailInterface <nl> */ <nl> public function __construct($id, ThumbnailInterface $thumbnail, BackendInterface $backend, EventDispatcherInterface $dispatcher = null) <nl> { <nl> + /* <nl> + * NEXT_MAJOR: remove this check <nl> + */ <nl> + if (null === $dispatcher) { <nl> + @trigger_error( <nl> + 'Since version 2.3.3, passing an empty parameter in argument 4 for __construct() in '.__CLASS__.' is <nl> + deprecated and the workaround for it will be removed in 3.0.', <nl> + E_USER_DEPRECATED <nl> + ); <nl> + } <nl> + <nl> $this->id = $id; <nl> $this->thumbnail = $thumbnail; <nl> $this->backend = $backend; <nl> @@ -87,9 +100,10 @@ class ConsumerThumbnail implements ThumbnailInterface <nl> )); <nl> }; <nl> - // BC compatibility for missing EventDispatcher <nl> + /* <nl> + * NEXT_MAJOR: remove this check <nl> + */ <nl> if (null === $this->dispatcher) { <nl> - @trigger_error('Since version 2.3.3, passing an empty parameter in argument 4 for __construct() in '.__CLASS__.' is deprecated and the workaround for it will be removed in 3.0.', E_USER_DEPRECATED); <nl> $publish(); <nl> } else { <nl> $this->dispatcher->addListener('kernel.finish_request', $publish); <nl> ", "msg": "better deprecation handling"}
{"diff_id": 506, "repo": "sonata-project/sonatamediabundle", "sha": "44c881399add12679c0fde40042b996a7a815d81", "time": "27.04.2017 15:53:26", "diff": "mmm a / Twig/Extension/MediaExtension.php <nl> ppp b / Twig/Extension/MediaExtension.php <nl>@@ -56,9 +56,9 @@ class MediaExtension extends \\Twig_Extension implements \\Twig_Extension_InitRunt <nl> public function getTokenParsers() <nl> { <nl> return array( <nl> - new MediaTokenParser(get_class()), <nl> - new ThumbnailTokenParser(get_class()), <nl> - new PathTokenParser(get_class()), <nl> + new MediaTokenParser(get_called_class()), <nl> + new ThumbnailTokenParser(get_called_class()), <nl> + new PathTokenParser(get_called_class()), <nl> ); <nl> } <nl> ", "msg": "Allow MediaExtension to be extended\nChange get_class() to get_called_class() to support extending the MediaExtension"}
{"diff_id": 512, "repo": "sonata-project/sonatamediabundle", "sha": "e73ea2c7f43f36435047791727369774c6bde723", "time": "18.12.2017 08:39:25", "diff": "mmm a / tests/Command/FixMediaContextCommandTest.php <nl> ppp b / tests/Command/FixMediaContextCommandTest.php <nl>@@ -52,12 +52,12 @@ class FixMediaContextCommandTest extends TestCase <nl> /** <nl> * @var \\PHPUnit_Framework_MockObject_MockObject|ContextManagerInterface <nl> */ <nl> - private $contextManger; <nl> + private $contextManager; <nl> /** <nl> * @var \\PHPUnit_Framework_MockObject_MockObject|CategoryManagerInterface <nl> */ <nl> - private $categoryManger; <nl> + private $categoryManager; <nl> /** <nl> * {@inheritdoc} <nl> @@ -76,20 +76,20 @@ class FixMediaContextCommandTest extends TestCase <nl> $this->pool = $pool = $this->createMock(Pool::class); <nl> - $this->contextManger = $contextManger = $this->createMock(ContextManagerInterface::class); <nl> + $this->contextManager = $contextManager = $this->createMock(ContextManagerInterface::class); <nl> - $this->categoryManger = $categoryManger = $this->createMock(CategoryManagerInterface::class); <nl> + $this->categoryManager = $categoryManager = $this->createMock(CategoryManagerInterface::class); <nl> $this->container->expects($this->any()) <nl> ->method('get') <nl> - ->will($this->returnCallback(function ($id) use ($pool, $contextManger, $categoryManger) { <nl> + ->will($this->returnCallback(function ($id) use ($pool, $contextManager, $categoryManager) { <nl> switch ($id) { <nl> case 'sonata.media.pool': <nl> return $pool; <nl> case 'sonata.classification.manager.context': <nl> - return $contextManger; <nl> + return $contextManager; <nl> case 'sonata.media.manager.category': <nl> - return $categoryManger; <nl> + return $categoryManager; <nl> } <nl> })); <nl> } <nl> @@ -119,11 +119,11 @@ class FixMediaContextCommandTest extends TestCase <nl> $contextModel = $this->createMock(ContextInterface::class); <nl> - $this->contextManger->expects($this->once())->method('findOneBy')->with($this->equalTo(['id' => 'foo']))->will($this->returnValue($contextModel)); <nl> + $this->contextManager->expects($this->once())->method('findOneBy')->with($this->equalTo(['id' => 'foo']))->will($this->returnValue($contextModel)); <nl> $category = $this->createMock(CategoryInterface::class); <nl> - $this->categoryManger->expects($this->once())->method('getRootCategory')->with($this->equalTo($contextModel))->will($this->returnValue($category)); <nl> + $this->categoryManager->expects($this->once())->method('getRootCategory')->with($this->equalTo($contextModel))->will($this->returnValue($category)); <nl> $output = $this->tester->execute(['command' => $this->command->getName()]); <nl> @@ -147,13 +147,13 @@ class FixMediaContextCommandTest extends TestCase <nl> $contextModel = $this->createMock(ContextInterface::class); <nl> - $this->contextManger->expects($this->once())->method('findOneBy')->with($this->equalTo(['id' => 'foo']))->will($this->returnValue($contextModel)); <nl> + $this->contextManager->expects($this->once())->method('findOneBy')->with($this->equalTo(['id' => 'foo']))->will($this->returnValue($contextModel)); <nl> $category = $this->createMock(CategoryInterface::class); <nl> - $this->categoryManger->expects($this->once())->method('getRootCategory')->with($this->equalTo($contextModel))->will($this->returnValue(null)); <nl> - $this->categoryManger->expects($this->once())->method('create')->will($this->returnValue($category)); <nl> - $this->categoryManger->expects($this->once())->method('save')->with($this->equalTo($category)); <nl> + $this->categoryManager->expects($this->once())->method('getRootCategory')->with($this->equalTo($contextModel))->will($this->returnValue(null)); <nl> + $this->categoryManager->expects($this->once())->method('create')->will($this->returnValue($category)); <nl> + $this->categoryManager->expects($this->once())->method('save')->with($this->equalTo($category)); <nl> $output = $this->tester->execute(['command' => $this->command->getName()]); <nl> @@ -177,15 +177,15 @@ class FixMediaContextCommandTest extends TestCase <nl> $contextModel = $this->createMock(ContextInterface::class); <nl> - $this->contextManger->expects($this->once())->method('findOneBy')->with($this->equalTo(['id' => 'foo']))->will($this->returnValue(null)); <nl> - $this->contextManger->expects($this->once())->method('create')->will($this->returnValue($contextModel)); <nl> - $this->contextManger->expects($this->once())->method('save')->with($this->equalTo($contextModel)); <nl> + $this->contextManager->expects($this->once())->method('findOneBy')->with($this->equalTo(['id' => 'foo']))->will($this->returnValue(null)); <nl> + $this->contextManager->expects($this->once())->method('create')->will($this->returnValue($contextModel)); <nl> + $this->contextManager->expects($this->once())->method('save')->with($this->equalTo($contextModel)); <nl> $category = $this->createMock(CategoryInterface::class); <nl> - $this->categoryManger->expects($this->once())->method('getRootCategory')->with($this->equalTo($contextModel))->will($this->returnValue(null)); <nl> - $this->categoryManger->expects($this->once())->method('create')->will($this->returnValue($category)); <nl> - $this->categoryManger->expects($this->once())->method('save')->with($this->equalTo($category)); <nl> + $this->categoryManager->expects($this->once())->method('getRootCategory')->with($this->equalTo($contextModel))->will($this->returnValue(null)); <nl> + $this->categoryManager->expects($this->once())->method('create')->will($this->returnValue($category)); <nl> + $this->categoryManager->expects($this->once())->method('save')->with($this->equalTo($category)); <nl> $output = $this->tester->execute(['command' => $this->command->getName()]); <nl> ", "msg": "Spell manager properly\nMaybe that was just a french developer being hungry? \"manger\" means \"to\neat\". Or maybe he was not hungry but angry, and needed anger management?"}
{"diff_id": 541, "repo": "sonata-project/sonatamediabundle", "sha": "780472e11f19147eccb3d75876bcd97797f5e80a", "time": "16.10.2019 18:45:38", "diff": "mmm a / src/Model/MediaInterface.php <nl> ppp b / src/Model/MediaInterface.php <nl>@@ -261,7 +261,7 @@ interface MediaInterface <nl> /** <nl> * Set cdn_flush_identifier. <nl> * <nl> - * @param bool $cdnFlushIdentifier <nl> + * @param string $cdnFlushIdentifier <nl> */ <nl> public function setCdnFlushIdentifier($cdnFlushIdentifier); <nl> ", "msg": "Document actual type in docblock\nThis will make SA tools happier."}
{"diff_id": 545, "repo": "sonata-project/sonatamediabundle", "sha": "3f32be52fda9c42609a4526f60115c1599d5e641", "time": "23.02.2020 01:23:48", "diff": "mmm a / src/Controller/Api/MediaController.php <nl> ppp b / src/Controller/Api/MediaController.php <nl>@@ -357,7 +357,7 @@ class MediaController <nl> */ <nl> protected function getMedium($id = null) <nl> { <nl> - $media = $this->mediaManager->findOneBy(['id' => $id]); <nl> + $media = $this->mediaManager->find($id); <nl> if (null === $media) { <nl> throw new NotFoundHttpException(sprintf('Media (%d) was not found', $id)); <nl> ", "msg": "Used find method to get entity by ID"}
{"diff_id": 581, "repo": "symfony/http-client", "sha": "724633a1c74b0dc32f175c524abe2e454150cefe", "time": "28.03.2019 10:30:05", "diff": "mmm a / Chunk/ErrorChunk.php <nl> ppp b / Chunk/ErrorChunk.php <nl>@@ -28,7 +28,6 @@ class ErrorChunk implements ChunkInterface <nl> public function __construct(int $offset, \\Throwable $error = null) <nl> { <nl> - $didThrow = false; <nl> $this->offset = $offset; <nl> $this->error = $error; <nl> $this->errorMessage = null !== $error ? $error->getMessage() : 'Reading from the response stream reached the inactivity timeout.'; <nl> ", "msg": "[HttpClient] Remove unused local variable"}
{"diff_id": 584, "repo": "symfony/http-client", "sha": "10ac626b782f3a8ad9f8b157824da82ebe09f31d", "time": "24.03.2019 20:39:17", "diff": "mmm a / Response/MockResponse.php <nl> ppp b / Response/MockResponse.php <nl>@@ -240,7 +240,7 @@ class MockResponse implements ResponseInterface <nl> $info = $mock->getInfo() ?: []; <nl> $response->info['http_code'] = ($info['http_code'] ?? 0) ?: $mock->getStatusCode(false) ?: 200; <nl> $response->addResponseHeaders($info['response_headers'] ?? [], $response->info, $response->headers); <nl> - $dlSize = (int) ($response->headers['content-length'][0] ?? 0); <nl> + $dlSize = isset($response->headers['content-encoding']) ? 0 : (int) ($response->headers['content-length'][0] ?? 0); <nl> $response->info = [ <nl> 'start_time' => $response->info['start_time'], <nl> @@ -282,7 +282,7 @@ class MockResponse implements ResponseInterface <nl> // \"notify\" completion <nl> $onProgress($offset, $dlSize, $response->info); <nl> - if (isset($response->headers['content-length']) && $offset !== $dlSize) { <nl> + if ($dlSize && $offset !== $dlSize) { <nl> throw new TransportException(sprintf('Transfer closed with %s bytes remaining to read.', $dlSize - $offset)); <nl> } <nl> } <nl> ", "msg": "[FrameworkBundle] change the way http clients are configured by leveraging ScopingHttpClient"}
{"diff_id": 594, "repo": "symfony/http-client", "sha": "8a2bb86d36662795694d2f6aeaf51baeee8bacb1", "time": "30.05.2019 18:27:37", "diff": "mmm a / CachingHttpClient.php <nl> ppp b / CachingHttpClient.php <nl>namespace Symfony\\Component\\HttpClient; <nl> -use Psr\\Log\\LoggerInterface; <nl> use Symfony\\Component\\HttpClient\\Response\\MockResponse; <nl> use Symfony\\Component\\HttpClient\\Response\\ResponseStream; <nl> use Symfony\\Component\\HttpFoundation\\Request; <nl> @@ -39,7 +38,7 @@ class CachingHttpClient implements HttpClientInterface <nl> private $cache; <nl> private $defaultOptions = self::OPTIONS_DEFAULTS; <nl> - public function __construct(HttpClientInterface $client, StoreInterface $store, array $defaultOptions = [], LoggerInterface $logger = null) <nl> + public function __construct(HttpClientInterface $client, StoreInterface $store, array $defaultOptions = []) <nl> { <nl> if (!class_exists(HttpClientKernel::class)) { <nl> throw new \\LogicException(sprintf('Using \"%s\" requires that the HttpKernel component version 4.3 or higher is installed, try running \"composer require symfony/http-kernel:^4.3\".', __CLASS__)); <nl> ", "msg": "[HttpClient] remove unused argument"}
{"diff_id": 595, "repo": "symfony/http-client", "sha": "557201265bb4f87ccdd56a13f5aae5ee3c9e56b0", "time": "04.06.2019 08:38:41", "diff": "mmm a / Response/CurlResponse.php <nl> ppp b / Response/CurlResponse.php <nl>@@ -167,6 +167,7 @@ final class CurlResponse implements ResponseInterface <nl> if (!\\in_array(curl_getinfo($this->handle, CURLINFO_PRIVATE), ['headers', 'content'], true)) { <nl> rewind($this->debugBuffer); <nl> $info['debug'] = stream_get_contents($this->debugBuffer); <nl> + curl_setopt($this->handle, CURLOPT_VERBOSE, false); <nl> fclose($this->debugBuffer); <nl> $this->debugBuffer = null; <nl> $this->finalInfo = $info; <nl> ", "msg": "[HttpClient] fix unregistering the debug buffer when using curl"}
{"diff_id": 615, "repo": "symfony/http-client", "sha": "44b1099c3d868e2d67d5bbee53e015301dbb9ce8", "time": "04.10.2019 17:43:55", "diff": "mmm a / NativeHttpClient.php <nl> ppp b / NativeHttpClient.php <nl>@@ -203,7 +203,7 @@ final class NativeHttpClient implements HttpClientInterface, LoggerAwareInterfac <nl> ]; <nl> $proxy = self::getProxy($options['proxy'], $url); <nl> - $noProxy = $_SERVER['no_proxy'] ?? $_SERVER['NO_PROXY'] ?? ''; <nl> + $noProxy = $options['no_proxy'] ?? $_SERVER['no_proxy'] ?? $_SERVER['NO_PROXY'] ?? ''; <nl> $noProxy = $noProxy ? preg_split('/[\\s,]+/', $noProxy) : []; <nl> $resolveRedirect = self::createRedirectResolver($options, $host, $proxy, $noProxy, $info, $onProgress); <nl> ", "msg": "[HttpClient] Fixed NO_PROXY option ignored in NativeHttpClient::request() method"}
{"diff_id": 619, "repo": "symfony/http-client", "sha": "9894b4846e15fb6bdbfc38e522b5991171ea19f3", "time": "29.10.2019 19:32:45", "diff": "mmm a / Response/ResponseTrait.php <nl> ppp b / Response/ResponseTrait.php <nl>@@ -104,7 +104,6 @@ trait ResponseTrait <nl> if (null === $this->content) { <nl> $content = null; <nl> - $chunk = null; <nl> foreach (self::stream([$this]) as $chunk) { <nl> if (!$chunk->isLast()) { <nl> ", "msg": "[4.3] Remove unused local variables"}
{"diff_id": 635, "repo": "symfony/http-client", "sha": "2edd40250649944775aad5d6b4cc8e164c1e9d72", "time": "26.02.2020 23:30:10", "diff": "mmm a / Internal/HttplugWaitLoop.php <nl> ppp b / Internal/HttplugWaitLoop.php <nl>@@ -72,7 +72,7 @@ final class HttplugWaitLoop <nl> goto check_duration; <nl> } <nl> - if ([$request, $promise] = $this->promisePool[$response] ?? null) { <nl> + if ([, $promise] = $this->promisePool[$response] ?? null) { <nl> unset($this->promisePool[$response]); <nl> $promise->resolve($this->createPsr7Response($response, true)); <nl> } <nl> ", "msg": "[5.0] Remove some unused variables"}
{"diff_id": 685, "repo": "symfony/http-client", "sha": "a2733b46981e57892774af4dec89e9e21d016b71", "time": "17.09.2021 11:02:15", "diff": "mmm a / Response/NativeResponse.php <nl> ppp b / Response/NativeResponse.php <nl>@@ -36,8 +36,6 @@ final class NativeResponse implements ResponseInterface, StreamableInterface <nl> private $remaining; <nl> private $buffer; <nl> private $multi; <nl> - private $debugBuffer; <nl> - private $shouldBuffer; <nl> private $pauseExpiry = 0; <nl> /** <nl> ", "msg": "[HttpClient] Remove unused and redundant properties"}
{"diff_id": 692, "repo": "symfony/http-client", "sha": "0154236003a40aa3c337ef495067696543d23efc", "time": "17.11.2021 11:48:20", "diff": "mmm a / CachingHttpClient.php <nl> ppp b / CachingHttpClient.php <nl>@@ -42,7 +42,7 @@ class CachingHttpClient implements HttpClientInterface, ResetInterface <nl> public function __construct(HttpClientInterface $client, StoreInterface $store, array $defaultOptions = []) <nl> { <nl> if (!class_exists(HttpClientKernel::class)) { <nl> - throw new \\LogicException(sprintf('Using \"%s\" requires that the HttpKernel component version 4.3 or higher is installed, try running \"composer require symfony/http-kernel:^4.3\".', __CLASS__)); <nl> + throw new \\LogicException(sprintf('Using \"%s\" requires that the HttpKernel component version 4.3 or higher is installed, try running \"composer require symfony/http-kernel:^5.4\".', __CLASS__)); <nl> } <nl> $this->client = $client; <nl> ", "msg": "Improve recommendation message for \"composer req\""}
{"diff_id": 701, "repo": "symfony/http-client", "sha": "f1b0537960801479970ddfce147d8bd38b7c66df", "time": "12.01.2022 21:49:45", "diff": "mmm a / Response/HttplugPromise.php <nl> ppp b / Response/HttplugPromise.php <nl>namespace Symfony\\Component\\HttpClient\\Response; <nl> -use function GuzzleHttp\\Promise\\promise_for; <nl> +use GuzzleHttp\\Promise\\Create; <nl> use GuzzleHttp\\Promise\\PromiseInterface as GuzzlePromiseInterface; <nl> use Http\\Promise\\Promise as HttplugPromiseInterface; <nl> use Psr\\Http\\Message\\ResponseInterface as Psr7ResponseInterface; <nl> @@ -74,7 +74,7 @@ final class HttplugPromise implements HttplugPromiseInterface <nl> } <nl> return static function ($value) use ($callback) { <nl> - return promise_for($callback($value)); <nl> + return Create::promiseFor($callback($value)); <nl> }; <nl> } <nl> } <nl> ", "msg": "[HttpClient] Remove deprecated usage of GuzzleHttp\\Promise\\promise_for"}
{"diff_id": 717, "repo": "symfony/http-client", "sha": "65cb8e8197d43e0e59c16bde937eb7ebea7f8af2", "time": "16.10.2022 19:35:13", "diff": "mmm a / Tests/RetryableHttpClientTest.php <nl> ppp b / Tests/RetryableHttpClientTest.php <nl>@@ -225,4 +225,22 @@ class RetryableHttpClientTest extends TestCase <nl> $this->assertNotNull($delay); <nl> $this->assertSame((int) ($retryAfter * 1000), $delay); <nl> } <nl> + <nl> + public function testRetryOnErrorAssertContent() <nl> + { <nl> + $client = new RetryableHttpClient( <nl> + new MockHttpClient([ <nl> + new MockResponse('', ['http_code' => 500]), <nl> + new MockResponse('Test out content', ['http_code' => 200]), <nl> + ]), <nl> + new GenericRetryStrategy([500], 0), <nl> + 1 <nl> + ); <nl> + <nl> + $response = $client->request('GET', 'http://example.com/foo-bar'); <nl> + <nl> + self::assertSame(200, $response->getStatusCode()); <nl> + self::assertSame('Test out content', $response->getContent()); <nl> + self::assertSame('Test out content', $response->getContent(), 'Content should be buffered'); <nl> + } <nl> } <nl> ", "msg": "[HttpClient] Add test case for seeking into the content of RetryableHttpClient responses"}
{"diff_id": 721, "repo": "sporchia/alttp_vt_randomizer", "sha": "009c030086256f763770989e095cbd6e9cbe7338", "time": "02.01.2017 09:51:42", "diff": "mmm a / tests/NoMajorGlitchesTest.php <nl> ppp b / tests/NoMajorGlitchesTest.php <nl>@@ -29,6 +29,12 @@ class NoMajorGlitchesTest extends TestCase { <nl> return $items; <nl> } <nl> + // Light World <nl> + public function testLinksHouseCannotHaveGloves() { <nl> + $this->assertFalse($this->world->getLocation(\"[cave-040] Link's House\")->fill(Item::get('PowerGlove'), $this->allItems())); <nl> + $this->assertFalse($this->world->getLocation(\"[cave-040] Link's House\")->fill(Item::get('TitansMitt'), $this->allItems())); <nl> + } <nl> + <nl> // Death Mountain <nl> public function testDarkWorldEastDeathMountainCanNeverHaveTitansMitt() { <nl> $no_mitt = $this->allItemsExcept(['TitansMitt']); <nl> ", "msg": "adding test\ntrying to trigger travis-ci"}
{"diff_id": 743, "repo": "sporchia/alttp_vt_randomizer", "sha": "090e0df37aca3771a10e1663f6eb00b9d03b7a64", "time": "04.06.2017 18:21:04", "diff": "mmm a / resources/views/randomizer.blade.php <nl> ppp b / resources/views/randomizer.blade.php <nl>@@ -585,8 +585,8 @@ var ROM = ROM || (function(blob, loaded_callback) { <nl> u_array[0xDD308 + i] = spr[0x7000 + i]; <nl> } <nl> resolve(this); <nl> - }); <nl> - }; <nl> + }.bind(this)); <nl> + }.bind(this); <nl> this.parsePatch = function(patch, progressCallback) { <nl> return new Promise(function(resolve, reject) { <nl> ", "msg": "bulk seed generation\nfixes"}
{"diff_id": 749, "repo": "sporchia/alttp_vt_randomizer", "sha": "5630942a4b09fc6eab9bacb99c9bb3c8f2e91a81", "time": "28.06.2017 14:39:14", "diff": "mmm a / app/Randomizer.php <nl> ppp b / app/Randomizer.php <nl>@@ -679,7 +679,7 @@ class Randomizer { <nl> \"saltations\", \"saltbushes\", \"saltcellar\", \"saltshaker\", \"salubrious\", \"sandgrouse\", \"sandlotter\", <nl> \"sandstorms\", \"sandwiched\", \"sauerkraut\", \"schipperke\", \"schismatic\", \"schizocarp\", \"schmalzier\", <nl> \"schmeering\", \"schmoosing\", \"shibboleth\", \"shovelnose\", \"sahananana\", \"sarararara\", \"salamander\", <nl> - \"sharshalah\", \"shahabadoo\", <nl> + \"sharshalah\", \"shahabadoo\", \"sassafrass\" <nl> ])); <nl> $rom->setKakarikoTownCredits(\"$name's homecoming\"); <nl> ", "msg": "Add a Saha name\nKliff mentioned \"Sassafrass\" and I noticed that it's not in the code as an option. This will add it."}
{"diff_id": 774, "repo": "sporchia/alttp_vt_randomizer", "sha": "266ea23107c302ea50b9df580e4abf0d6d5caed3", "time": "04.11.2017 20:36:46", "diff": "mmm a / resources/views/custom/_switches.blade.php <nl> ppp b / resources/views/custom/_switches.blade.php <nl>@section('switches') <nl> +<div class=\"panel panel-success\"> <nl> + <div class=\"panel-heading\"> <nl> + <h3 class=\"panel-title\">Settings</h3> <nl> + </div> <nl> + <div class=\"panel-body\"> <nl> <div class=\"col-md-6 pb-5\"> <nl> <input id=\"cust-prize-crossworld\" type=\"checkbox\" name=\"data[alttp.custom.prize.crossWorld]\" <nl> class=\"custom-switch\" value=\"true\" checked data-toggle=\"toggle\" data-on=\"Yes\" data-off=\"No\" data-size=\"small\"> <nl> <input id=\"custom-rupoor-deduct\" type=\"number\" class=\"form-control custom-value\" placeholder=\"rupees\" name=\"data[alttp.custom.item.value.Rupoor]\" /> <nl> </div> <nl> </div> <nl> + </div> <nl> +</div> <nl> <script> <nl> $(function() { <nl> // Custom switch dependencies <nl> ", "msg": "move settings into a panel to be more like all the other sections"}
{"diff_id": 779, "repo": "sporchia/alttp_vt_randomizer", "sha": "006840ce93322a7f17bdd37e7882d7d71c3275d3", "time": "15.11.2017 13:01:45", "diff": "mmm a / resources/views/about.blade.php <nl> ppp b / resources/views/about.blade.php <nl></div> <nl> <h1>Where do I download this?</h1> <nl> <div class=\"well\"> <nl> - <p>The VT Randomizer is a web based ROM patcher. Simply upload your ROM of the base game and the website does the all the work, <nl> + <p>The VT Randomizer is a web based ROM patcher. Simply provide your ROM of the base game and the website does the all the work, <nl> giving you back a fully shuffled and guaranteed beatable ROM. With the web based ROM patcher, you can always be sure you <nl> have the latest features as soon as they're released.</p> <nl> </div> <nl> ", "msg": "remove upload reference, provide is better"}
{"diff_id": 782, "repo": "sporchia/alttp_vt_randomizer", "sha": "ebd80b50ad495f304cf049417d8056f985064ff0", "time": "23.12.2017 20:03:07", "diff": "mmm a / app/Rom.php <nl> ppp b / app/Rom.php <nl>@@ -1033,13 +1033,7 @@ class Rom { <nl> * @return $this <nl> */ <nl> public function setUncleTextString(string $string) : self { <nl> - $offset = 0x180500; <nl> - <nl> - $converter = new Dialog; <nl> - foreach ($converter->convertDialog($string) as $byte) { <nl> - $this->write($offset++, pack('C', $byte)); <nl> - } <nl> - <nl> + $this->writeDialog($string, 0x180500); <nl> return $this; <nl> } <nl> @@ -1051,13 +1045,7 @@ class Rom { <nl> * @return $this <nl> */ <nl> public function setGanon1TextString(string $string) : self { <nl> - $offset = 0x180600; <nl> - <nl> - $converter = new Dialog; <nl> - foreach ($converter->convertDialog($string) as $byte) { <nl> - $this->write($offset++, pack('C', $byte)); <nl> - } <nl> - <nl> + $this->writeDialog($string, 0x180600); <nl> return $this; <nl> } <nl> @@ -1069,13 +1057,7 @@ class Rom { <nl> * @return $this <nl> */ <nl> public function setGanon2TextString(string $string) : self { <nl> - $offset = 0x180700; <nl> - <nl> - $converter = new Dialog; <nl> - foreach ($converter->convertDialog($string) as $byte) { <nl> - $this->write($offset++, pack('C', $byte)); <nl> - } <nl> - <nl> + $this->writeDialog($string, 0x180700); <nl> return $this; <nl> } <nl> @@ -1087,13 +1069,7 @@ class Rom { <nl> * @return $this <nl> */ <nl> public function setGanon1InvincibleTextString(string $string) : self { <nl> - $offset = 0x181100; <nl> - <nl> - $converter = new Dialog; <nl> - foreach ($converter->convertDialog($string) as $byte) { <nl> - $this->write($offset++, pack('C', $byte)); <nl> - } <nl> - <nl> + $this->writeDialog($string, 0x181100); <nl> return $this; <nl> } <nl> @@ -1105,13 +1081,7 @@ class Rom { <nl> * @return $this <nl> */ <nl> public function setGanon2InvincibleTextString(string $string) : self { <nl> - $offset = 0x181200; <nl> - <nl> - $converter = new Dialog; <nl> - foreach ($converter->convertDialog($string) as $byte) { <nl> - $this->write($offset++, pack('C', $byte)); <nl> - } <nl> - <nl> + $this->writeDialog($string, 0x181200); <nl> return $this; <nl> } <nl> @@ -1124,13 +1094,7 @@ class Rom { <nl> * @return $this <nl> */ <nl> public function setTriforceTextString(string $string) : self { <nl> - $offset = 0x180400; <nl> - <nl> - $converter = new Dialog; <nl> - foreach ($converter->convertDialog($string) as $byte) { <nl> - $this->write($offset++, pack('C', $byte)); <nl> - } <nl> - <nl> + $this->writeDialog($string, 0x180400); <nl> return $this; <nl> } <nl> @@ -1142,13 +1106,7 @@ class Rom { <nl> * @return $this <nl> */ <nl> public function setBlindTextString(string $string) : self { <nl> - $offset = 0x180800; <nl> - <nl> - $converter = new Dialog; <nl> - foreach ($converter->convertDialog($string) as $byte) { <nl> - $this->write($offset++, pack('C', $byte)); <nl> - } <nl> - <nl> + $this->writeDialog($string, 0x180800); <nl> return $this; <nl> } <nl> @@ -1160,13 +1118,7 @@ class Rom { <nl> * @return $this <nl> */ <nl> public function setTavernManTextString(string $string) : self { <nl> - $offset = 0x180C00; <nl> - <nl> - $converter = new Dialog; <nl> - foreach ($converter->convertDialog($string) as $byte) { <nl> - $this->write($offset++, pack('C', $byte)); <nl> - } <nl> - <nl> + $this->writeDialog($string, 0x180C00); <nl> return $this; <nl> } <nl> @@ -1178,13 +1130,7 @@ class Rom { <nl> * @return $this <nl> */ <nl> public function setSahasrahla1TextString(string $string) : self { <nl> - $offset = 0x180A00; <nl> - <nl> - $converter = new Dialog; <nl> - foreach ($converter->convertDialog($string) as $byte) { <nl> - $this->write($offset++, pack('C', $byte)); <nl> - } <nl> - <nl> + $this->writeDialog($string, 0x180A00); <nl> return $this; <nl> } <nl> @@ -1196,13 +1142,7 @@ class Rom { <nl> * @return $this <nl> */ <nl> public function setSahasrahla2TextString(string $string) : self { <nl> - $offset = 0x180B00; <nl> - <nl> - $converter = new Dialog; <nl> - foreach ($converter->convertDialog($string) as $byte) { <nl> - $this->write($offset++, pack('C', $byte)); <nl> - } <nl> - <nl> + $this->writeDialog($string, 0x180B00); <nl> return $this; <nl> } <nl> @@ -1214,13 +1154,7 @@ class Rom { <nl> * @return $this <nl> */ <nl> public function setBombShop1TextString(string $string) : self { <nl> - $offset = 0x180E00; <nl> - <nl> - $converter = new Dialog; <nl> - foreach ($converter->convertDialog($string) as $byte) { <nl> - $this->write($offset++, pack('C', $byte)); <nl> - } <nl> - <nl> + $this->writeDialog($string, 0x180E00); <nl> return $this; <nl> } <nl> @@ -1232,13 +1166,7 @@ class Rom { <nl> * @return $this <nl> */ <nl> public function setBombShop2TextString(string $string) : self { <nl> - $offset = 0x180D00; <nl> - <nl> - $converter = new Dialog; <nl> - foreach ($converter->convertDialog($string) as $byte) { <nl> - $this->write($offset++, pack('C', $byte)); <nl> - } <nl> - <nl> + $this->writeDialog($string, 0x180D00); <nl> return $this; <nl> } <nl> @@ -1250,13 +1178,7 @@ class Rom { <nl> * @return $this <nl> */ <nl> public function setPyramidFairyTextString(string $string) : self { <nl> - $offset = 0x180900; <nl> - <nl> - $converter = new Dialog; <nl> - foreach ($converter->convertDialog($string) as $byte) { <nl> - $this->write($offset++, pack('C', $byte)); <nl> - } <nl> - <nl> + $this->writeDialog($string, 0x180900); <nl> return $this; <nl> } <nl> @@ -1268,13 +1190,7 @@ class Rom { <nl> * @return $this <nl> */ <nl> public function setPedestalTextbox(string $string) : self { <nl> - $offset = 0x180300; <nl> - <nl> - $converter = new Dialog; <nl> - foreach ($converter->convertDialog($string) as $byte) { <nl> - $this->write($offset++, pack('C', $byte)); <nl> - } <nl> - <nl> + $this->writeDialog($string, 0x180300); <nl> return $this; <nl> } <nl> @@ -1286,13 +1202,7 @@ class Rom { <nl> * @return $this <nl> */ <nl> public function setBombosTextbox(string $string) : self { <nl> - $offset = 0x181000; <nl> - <nl> - $converter = new Dialog; <nl> - foreach ($converter->convertDialog($string) as $byte) { <nl> - $this->write($offset++, pack('C', $byte)); <nl> - } <nl> - <nl> + $this->writeDialog($string, 0x181000); <nl> return $this; <nl> } <nl> @@ -1304,13 +1214,7 @@ class Rom { <nl> * @return $this <nl> */ <nl> public function setEtherTextbox(string $string) : self { <nl> - $offset = 0x180F00; <nl> - <nl> - $converter = new Dialog; <nl> - foreach ($converter->convertDialog($string) as $byte) { <nl> - $this->write($offset++, pack('C', $byte)); <nl> - } <nl> - <nl> + $this->writeDialog($string, 0x180F00); <nl> return $this; <nl> } <nl> @@ -2675,4 +2579,22 @@ class Rom { <nl> } <nl> unlink($this->tmp_file); <nl> } <nl> + <nl> + /** <nl> + * Set the text for a dialog <nl> + * <nl> + * @param string $string Text for the dialog <nl> + * @param int $offset The offset of the text box <nl> + * <nl> + * @return $this <nl> + */ <nl> + private function writeDialog(string $string, int $offset) : self { <nl> + $converter = new Dialog; <nl> + <nl> + foreach ($converter->convertDialog($string) as $byte) { <nl> + $this->write($offset++, pack('C', $byte)); <nl> + } <nl> + <nl> + return $this; <nl> + } <nl> } <nl> ", "msg": "Extract a function write a dialog to starting at an offset"}
{"diff_id": 784, "repo": "sporchia/alttp_vt_randomizer", "sha": "844abd751f27a8874d7352ae304bed4da4b1974e", "time": "29.12.2017 11:34:14", "diff": "mmm a / app/Randomizer.php <nl> ppp b / app/Randomizer.php <nl>@@ -619,6 +619,10 @@ class Randomizer { <nl> return $this->seed->hash; <nl> } <nl> + public function getSeedRecord() { <nl> + return $this->seed; <nl> + } <nl> + <nl> /** <nl> * Update patch of seed record to DB <nl> * <nl> @@ -1425,8 +1429,17 @@ class Randomizer { <nl> $rom->write(0x37A78, pack('C*', ...array_slice($shuffled, 0, 56))); <nl> // Sprite prize pack <nl> + $idat = array_values(unpack('C*', base64_decode( <nl> + \"g5aEgICAgIACAAKAoIOXgICUkQcAgACAkpaAoAAAAIAEgIIGBgAAgICAgICAgICAgICAgICAgICAgIAAAICAkICRkZGXkZWVk5c\" . <nl> + \"UkZKBgoKAhYCAgAQEgJGAgICAgICAgACAgIKKgICAgJKRgIKBgYCBgICAgICAgICAgJeAgICAwoAVFRcGAIAAwBNAAAIGEBQAAE\" . <nl> + \"AAAAAAE0YRgIAAAAAQAAAAFhYWgYeCAICAAAAAAICAAAAAAAAAAAAAAAAAAAAAgAAAABcAEgAAAAAAEBcAQAEAAAAAAAAAAAAAA\" . <nl> + \"AAAAABAAAAAAAAAAACAAAAAAAAA\" <nl> + ))); <nl> $offset = 0x6B632; <nl> $bytes = $rom->read($offset, 243); <nl> + foreach ($bytes as $i => $v) { <nl> + $bytes[$i] = ($v == 0) ? $idat[$i] : $v; <nl> + } <nl> for ($i = 0; $i < 243; $i++) { <nl> // skip sprites that were not in prize packs before <nl> if (!isset($bytes[$i]) || ($bytes[$i] & 0xF) == 0) { <nl> ", "msg": "resolve randomizer.php conflict"}
{"diff_id": 805, "repo": "sporchia/alttp_vt_randomizer", "sha": "d95932c8632ba5087fae70d5972ddbd0daf7ec86", "time": "18.02.2018 01:58:45", "diff": "mmm a / app/Location/Npc/Zora.php <nl> ppp b / app/Location/Npc/Zora.php <nl>@@ -129,7 +129,7 @@ class Zora extends Npc { <nl> case Item::get('Heart'): <nl> return \"affection for sale\"; <nl> case Item::get('Arrow'): <nl> - return \"sewing kit for sale\"; <nl> + return \"sewing needle for sale\"; <nl> case Item::get('TenArrows'): <nl> return \"sewing kit for sale\"; <nl> case Item::get('SmallMagic'): <nl> ", "msg": "Single arrow \"sewing needle for sale\"\nIt's singular."}
{"diff_id": 815, "repo": "sporchia/alttp_vt_randomizer", "sha": "de71656fc3fc8b7e3c14d6f833d9fbaa98b56268", "time": "27.02.2018 23:51:49", "diff": "mmm a / app/Randomizer.php <nl> ppp b / app/Randomizer.php <nl>@@ -232,6 +232,10 @@ class Randomizer { <nl> array_push($advancement_items, array_pop($nice_items_swords)); <nl> } <nl> + if ($this->config('region.takeAnys', false)) { <nl> + array_pop($nice_items_swords); <nl> + } <nl> + <nl> $nice_items = array_merge($nice_items, $nice_items_swords); <nl> } <nl> // put 1 bottle back <nl> ", "msg": "remove a sword if we are placing one with old man"}
{"diff_id": 841, "repo": "sporchia/alttp_vt_randomizer", "sha": "6ff61724b4c0806773ff915c1aedf9310407a38f", "time": "20.03.2018 01:21:28", "diff": "mmm a / resources/views/customizer.blade.php <nl> ppp b / resources/views/customizer.blade.php <nl>@@ -481,21 +481,32 @@ $(function() { <nl> }); <nl> }); <nl> + function onSettingsParseError() { <nl> + $('.alert .message').html('Unable to parse settings file. Sorry :('); <nl> + $('.alert').show(); <nl> + } <nl> + <nl> // Dirty restore to match dirty save to match dirty cleanup <nl> $('input[name=customizer-restore]').on('change', function() { <nl> var file = this.files[0]; <nl> - if (file.type !== \"application/json\") { <nl> - return; <nl> + if (file.type !== \"application/json\" && file.type !== \"application/octet-stream\") { <nl> + return onSettingsParseError(); <nl> } <nl> var fileReader = new FileReader(); <nl> fileReader.onload = function(e) { <nl> + try { <nl> var settings = JSON.parse(fileReader.result); <nl> + } catch (e) { <nl> + return onSettingsParseError(); <nl> + } <nl> var promises = []; <nl> for (var i = 0; i < save_restore_settings.length; ++i) { <nl> + if (!settings[save_restore_settings[i]]) continue; <nl> promises.push(localforage.setItem(save_restore_settings[i], settings[save_restore_settings[i]] || null)); <nl> } <nl> + if (!promises.length) return onSettingsParseError(); <nl> Promise.all(promises).then(function(values) { <nl> window.location = window.location; <nl> }); <nl> ", "msg": "much better settings restore handling."}
{"diff_id": 860, "repo": "sporchia/alttp_vt_randomizer", "sha": "1f65b6e15c1244168a071895e763ecd75e4beb8e", "time": "18.10.2018 00:10:01", "diff": "mmm a / app/Enemizer.php <nl> ppp b / app/Enemizer.php <nl>@@ -86,7 +86,7 @@ class Enemizer { <nl> $system = php_uname('s') == 'Darwin' ? 'osx' : 'linux'; <nl> $options = [ <nl> - \"RandomizeEnemies\" => $this->settings['enemy'] ?? true, <nl> + \"RandomizeEnemies\" => $this->settings['enemy'] ?? false, <nl> \"RandomizeEnemiesType\" => 3, <nl> \"RandomizeBushEnemyChance\" => true, <nl> \"RandomizeEnemyHealthRange\" => (bool) ($this->settings['enemy_health'] ?? false), <nl> @@ -153,7 +153,7 @@ class Enemizer { <nl> \"BeesLevel\" => 3, <nl> \"RandomizeTileTrapPattern\" => true, <nl> \"RandomizeTileTrapFloorTile\" => false, <nl> - \"AllowKillableThief\" => $this->settings['enemy'] ?? true, <nl> + \"AllowKillableThief\" => $this->settings['enemy'] ?? false, <nl> \"RandomizeSpriteOnHit\" => false, <nl> \"DebugMode\" => false, <nl> \"DebugForceEnemy\" => true, <nl> ", "msg": "default to enemy randomization off, needed for standard"}
{"diff_id": 869, "repo": "sporchia/alttp_vt_randomizer", "sha": "64c8ad02415c166c363cf6b71d7d151e5b2d6e13", "time": "24.09.2019 23:31:17", "diff": "mmm a / app/Region/Standard/ThievesTown.php <nl> ppp b / app/Region/Standard/ThievesTown.php <nl>@@ -81,11 +81,6 @@ class ThievesTown extends Region <nl> return $items->has('Hammer') && $items->has('KeyD4') && $items->has('BigKeyD4'); <nl> })->setAlwaysAllow(function ($item, $items) { <nl> - logger()->error(json_encode([ <nl> - $this->world->config('accessibility'), <nl> - $item->getName(), <nl> - $this->world->config('accessibility') !== 'locations' && $item == Item::get('KeyD4', $this->world) && $items->has('Hammer'), <nl> - ])); <nl> return $this->world->config('accessibility') !== 'locations' && $item == Item::get('KeyD4', $this->world) && $items->has('Hammer'); <nl> }); <nl> ", "msg": "remove errant debug log"}
{"diff_id": 894, "repo": "sporchia/alttp_vt_randomizer", "sha": "d0d4200a5701769a30184cf71c6994fab666b88e", "time": "05.04.2020 08:03:01", "diff": "mmm a / app/Boss.php <nl> ppp b / app/Boss.php <nl>@@ -85,7 +85,8 @@ class Boss <nl> }), <nl> new static(\"Helmasaur King\", \"Helmasaur\", function ($locations, $items) use ($world) { <nl> return ($items->canBombThings() || $items->has('Hammer')) <nl> - && ($items->hasSword(2) || $items->canShootArrows($world)); <nl> + && ($items->hasSword(2) || $items->canShootArrows($world) <nl> + || ($world->config('itemPlacement') !== 'basic' && $items->hasSword())); <nl> }), <nl> new static(\"Arrghus\", \"Arrghus\", function ($locations, $items) use ($world) { <nl> return ($world->config('itemPlacement') !== 'basic' || $world->config('mode.weapons') === 'swordless' || $items->hasSword(2)) <nl> ", "msg": "Allow killing Helma with fighter's sword, for advanced item placement."}
{"diff_id": 897, "repo": "sporchia/alttp_vt_randomizer", "sha": "aa15dab8fd9518e3ee0d32657c7f1480be9bf66d", "time": "27.06.2020 08:49:44", "diff": "mmm a / routes/console.php <nl> ppp b / routes/console.php <nl>@@ -92,6 +92,8 @@ Artisan::command('alttp:dailies {days=7}', function ($days) { <nl> } <nl> } <nl> + $rom->setTournamentType('standard'); <nl> + <nl> $patch = $rom->getWriteLog(); <nl> $spoiler = $world->getSpoiler([ <nl> 'name' => 'Daily Challenge: ' . $date->toFormattedDateString(), <nl> ", "msg": "set tournament flag on dailies - fixes"}
{"diff_id": 915, "repo": "sporchia/alttp_vt_randomizer", "sha": "7fbcfe5a4220c5294a10db1a1abb9605e6b7f315", "time": "23.05.2021 21:31:03", "diff": "mmm a / app/Console/Commands/Randomize.php <nl> ppp b / app/Console/Commands/Randomize.php <nl>@@ -26,6 +26,7 @@ class Randomize extends Command <nl> . ' {--unrandomized : do not apply randomization to the rom}' <nl> . ' {--spoiler : generate a spoiler file}' <nl> . ' {--heartbeep=half : set heart beep speed}' <nl> + . ' {--heartcolor=red : set heart color}' <nl> . ' {--skip-md5 : do not validate md5 of base rom}' <nl> . ' {--tournament : enable tournament mode}' <nl> . ' {--bulk=1 : generate multiple roms}' <nl> @@ -124,6 +125,10 @@ class Randomize extends Command <nl> return 3; <nl> } <nl> + if (is_string($this->option('heartcolor'))) { <nl> + $rom->setHeartColors($this->option('heartcolor')); <nl> + } <nl> + <nl> if (is_string($this->option('heartbeep'))) { <nl> $rom->setHeartBeepSpeed($this->option('heartbeep')); <nl> } <nl> ", "msg": "Implemented CLI support for setting heart color."}
{"diff_id": 926, "repo": "sporchia/alttp_vt_randomizer", "sha": "a0e7a280d13625aa6d4b80b78d44051a5018824a", "time": "13.08.2021 18:36:50", "diff": "mmm a / config/item.php <nl> ppp b / config/item.php <nl>return [ <nl> 'advancement' => [ <nl> 'L1Sword' => 0, <nl> + //'L1SwordAndShield' => 0, // This still downgrades your sword - don't allow it as a random item unless that's fixed <nl> 'MasterSword' => 0, <nl> 'ProgressiveSword' => 4, <nl> 'BossHeartContainer' => 10, <nl> @@ -15,6 +16,7 @@ return [ <nl> 'BottleWithFairy' => 0, <nl> 'Bombos' => 1, <nl> 'BookOfMudora' => 1, <nl> + 'Bow' => 0, <nl> 'BowAndArrows' => 0, <nl> 'CaneOfSomaria' => 1, <nl> 'Cape' => 1, <nl> @@ -40,6 +42,7 @@ return [ <nl> 'SilverArrowUpgrade' => 0, <nl> 'ProgressiveGlove' => 2, <nl> 'ProgressiveBow' => 2, <nl> + 'Triforce' => 0, <nl> 'TriforcePiece' => 0, <nl> 'PowerStar' => 0, <nl> 'BugCatchingNet' => 1, <nl> ", "msg": "Add Bow and Triforce to advancement items, so they can be randomly placed."}
{"diff_id": 928, "repo": "sporchia/alttp_vt_randomizer", "sha": "1b1024b25f9cf6ea7561db668682813a99964e4c", "time": "24.08.2021 19:14:09", "diff": "mmm a / app/Jobs/SendPatchToDisk.php <nl> ppp b / app/Jobs/SendPatchToDisk.php <nl>@@ -73,7 +73,7 @@ class SendPatchToDisk implements ShouldQueue <nl> $json = json_encode([ <nl> 'logic' => $this->seed->logic, <nl> - 'patch' => json_decode($this->seed->patch), <nl> + 'patch' => patch_merge_minify(json_decode($this->seed->patch)), <nl> 'spoiler' => $return_spoiler, <nl> 'hash' => $this->seed->hash, <nl> 'size' => $spoiler['meta']['size'] ?? 2, <nl> ", "msg": "merge and minify patch saved to s3/disk"}
{"diff_id": 939, "repo": "wp-cli/handbook", "sha": "5ccfe6b349219b0a6543000515b32b9b814ba1bc", "time": "29.12.2017 08:54:57", "diff": "mmm a / bin/command.php <nl> ppp b / bin/command.php <nl>@@ -565,7 +565,7 @@ EOT; <nl> $ret['description'] = str_replace( '\\/', '/', trim( $ret['description'], PHP_EOL ) ); <nl> $bits = explode( PHP_EOL, $ret['description'] ); <nl> $short_desc = array( array_shift( $bits ) ); <nl> - if ( !empty( $bits[0] ) ) { <nl> + while ( isset( $bits[0] ) && ! empty( $bits[0] ) ) { <nl> $short_desc[] = array_shift( $bits ); <nl> } <nl> $ret['short_description'] = trim( implode( PHP_EOL, $short_desc ), PHP_EOL ); <nl> ", "msg": "Update short description parsing to for unlimited lines"}
{"diff_id": 954, "repo": "symfony/security-core", "sha": "35ae8afb7a252306759663003090b6c4b777c470", "time": "05.07.2017 22:19:23", "diff": "mmm a / Authorization/ExpressionLanguage.php <nl> ppp b / Authorization/ExpressionLanguage.php <nl>namespace Symfony\\Component\\Security\\Core\\Authorization; <nl> use Symfony\\Component\\ExpressionLanguage\\ExpressionLanguage as BaseExpressionLanguage; <nl> -use Symfony\\Component\\ExpressionLanguage\\ParserCache\\ParserCacheInterface; <nl> /** <nl> * Adds some function to the default ExpressionLanguage. <nl> @@ -23,7 +22,10 @@ use Symfony\\Component\\ExpressionLanguage\\ParserCache\\ParserCacheInterface; <nl> */ <nl> class ExpressionLanguage extends BaseExpressionLanguage <nl> { <nl> - public function __construct(ParserCacheInterface $cache = null, array $providers = array()) <nl> + /** <nl> + * {@inheritdoc} <nl> + */ <nl> + public function __construct($cache = null, array $providers = array()) <nl> { <nl> // prepend the default provider to let users override it easily <nl> array_unshift($providers, new ExpressionLanguageProvider()); <nl> ", "msg": "[DI][Security] Prevent unwanted deprecation notices when using Expression Languages"}
{"diff_id": 974, "repo": "symfony/security-core", "sha": "a44d4cef38ce2c9b8e43d94e4847ebcb5f0e65ef", "time": "22.01.2019 15:51:10", "diff": "mmm a / Security.php <nl> ppp b / Security.php <nl>@@ -17,8 +17,10 @@ use Symfony\\Component\\Security\\Core\\User\\UserInterface; <nl> /** <nl> * Helper class for commonly-needed security tasks. <nl> + * <nl> + * @final <nl> */ <nl> -final class Security <nl> +class Security <nl> { <nl> const ACCESS_DENIED_ERROR = '_security.403_error'; <nl> const AUTHENTICATION_ERROR = '_security.last_error'; <nl> ", "msg": "use final annotation to allow mocking the class"}
{"diff_id": 976, "repo": "symfony/security-core", "sha": "d4d72ea26792370db1079fe9ecec707694482f1e", "time": "19.03.2019 22:04:09", "diff": "mmm a / Authorization/Voter/ExpressionVoter.php <nl> ppp b / Authorization/Voter/ExpressionVoter.php <nl>@@ -44,7 +44,7 @@ class ExpressionVoter implements VoterInterface <nl> } elseif (null === $authChecker) { <nl> @trigger_error(sprintf('Argument 3 passed to \"%s()\" should be an instance of AuthorizationCheckerInterface, not passing it is deprecated since Symfony 4.2.', __METHOD__), E_USER_DEPRECATED); <nl> } elseif (!$authChecker instanceof AuthorizationCheckerInterface) { <nl> - throw new \\InvalidArgumentException(sprintf('Argument 3 passed to %s() must be an instance of %s or null, %s given.', __METHOD__, AuthorizationCheckerInterface::class, \\is_object($authChecker) ? \\get_class($authChecker) : \\gettype($authChecker))); <nl> + throw new \\TypeError(sprintf('Argument 3 passed to %s() must be an instance of %s or null, %s given.', __METHOD__, AuthorizationCheckerInterface::class, \\is_object($authChecker) ? \\get_class($authChecker) : \\gettype($authChecker))); <nl> } <nl> $this->expressionLanguage = $expressionLanguage; <nl> ", "msg": "throw TypeErrors to prepare for type hints in 5.0"}
{"diff_id": 992, "repo": "symfony/security-core", "sha": "7e8b84edff56f1def893e2d50eaea989244339b5", "time": "09.11.2019 23:07:09", "diff": "mmm a / Encoder/EncoderFactory.php <nl> ppp b / Encoder/EncoderFactory.php <nl>@@ -78,9 +78,7 @@ class EncoderFactory implements EncoderFactoryInterface <nl> throw new \\InvalidArgumentException(sprintf('\"arguments\" must be set in %s.', json_encode($config))); <nl> } <nl> - $reflection = new \\ReflectionClass($config['class']); <nl> - <nl> - $encoder = $reflection->newInstanceArgs($config['arguments']); <nl> + $encoder = new $config['class'](...$config['arguments']); <nl> if ($isExtra || !\\in_array($config['class'], [NativePasswordEncoder::class, SodiumPasswordEncoder::class], true)) { <nl> return $encoder; <nl> ", "msg": "[Security] Avoid unnecessary usage of Reflection"}
{"diff_id": 1010, "repo": "symfony/security-core", "sha": "9fc86cc24cc64da0796409bbdadea188eb2c5aaa", "time": "31.07.2020 19:07:03", "diff": "mmm a / Security.php <nl> ppp b / Security.php <nl>@@ -13,6 +13,7 @@ namespace Symfony\\Component\\Security\\Core; <nl> use Psr\\Container\\ContainerInterface; <nl> use Symfony\\Component\\Security\\Core\\Authentication\\Token\\TokenInterface; <nl> +use Symfony\\Component\\Security\\Core\\Authorization\\AuthorizationCheckerInterface; <nl> use Symfony\\Component\\Security\\Core\\User\\UserInterface; <nl> /** <nl> @@ -20,7 +21,7 @@ use Symfony\\Component\\Security\\Core\\User\\UserInterface; <nl> * <nl> * @final <nl> */ <nl> -class Security <nl> +class Security implements AuthorizationCheckerInterface <nl> { <nl> const ACCESS_DENIED_ERROR = '_security.403_error'; <nl> const AUTHENTICATION_ERROR = '_security.last_error'; <nl> ", "msg": "[Security] class Security implements AuthorizationCheckerInterface\nThe class has the method of AuthorizationCheckerInterface already."}
{"diff_id": 1028, "repo": "symfony/security-core", "sha": "b540b1169f9b8bdfb3d2715453f24f56258c8499", "time": "08.05.2021 11:47:35", "diff": "mmm a / Exception/TooManyLoginAttemptsAuthenticationException.php <nl> ppp b / Exception/TooManyLoginAttemptsAuthenticationException.php <nl>@@ -33,6 +33,7 @@ class TooManyLoginAttemptsAuthenticationException extends AuthenticationExceptio <nl> { <nl> return [ <nl> '%minutes%' => $this->threshold, <nl> + '%count%' => (int) $this->threshold, <nl> ]; <nl> } <nl> ", "msg": "Provide count argument for TooManyLoginAttemptsAuthenticationException to be able to translate in plural way"}
{"diff_id": 1061, "repo": "symfony/security-core", "sha": "33fc9461aefbddddf59fff4e377ad15be0505081", "time": "09.11.2022 14:47:29", "diff": "mmm a / Tests/Validator/Constraints/UserPasswordValidatorTest.php <nl> ppp b / Tests/Validator/Constraints/UserPasswordValidatorTest.php <nl>@@ -45,7 +45,7 @@ abstract class UserPasswordValidatorTest extends ConstraintValidatorTestCase <nl> */ <nl> protected $hasherFactory; <nl> - protected function createValidator(): ConstraintValidatorInterface <nl> + protected function createValidator(): UserPasswordValidator <nl> { <nl> return new UserPasswordValidator($this->tokenStorage, $this->hasherFactory); <nl> } <nl> ", "msg": "[Validator] Improve return types in tests"}
{"diff_id": 1081, "repo": "cytopia/devilbox", "sha": "776ec5d517af4e201e752835c96d32e98af9197a", "time": "05.11.2017 19:00:34", "diff": "mmm a / .devilbox/www/include/lib/container/Memcd.php <nl> ppp b / .devilbox/www/include/lib/container/Memcd.php <nl>@@ -111,6 +111,9 @@ class Memcd extends BaseClass implements BaseInterface <nl> } <nl> $this->_memcached->getDelayed($keys); <nl> $store = $this->_memcached->fetchAll(); <nl> + if (!is_array($store)) { <nl> + $store = array(); <nl> + } <nl> } <nl> } <nl> return $store; <nl> ", "msg": "Handle false values retrieved from Memcached"}
{"diff_id": 1082, "repo": "cytopia/devilbox", "sha": "f1ed392b941df0d668387eeb01f350cd24acc36f", "time": "05.12.2017 20:04:33", "diff": "mmm a / .devilbox/www/htdocs/mail.php <nl> ppp b / .devilbox/www/htdocs/mail.php <nl>@@ -30,7 +30,7 @@ require $LIB_DIR . DIRECTORY_SEPARATOR . 'Sort.php'; <nl> // Sort/Order settings <nl> $defaultSort = array('sort' => 'date', 'order' => 'DESC'); <nl> -$allowedSorts = array('date', 'subject', 'x-original-to'); <nl> +$allowedSorts = array('date', 'subject', 'x-original-to', 'from'); <nl> $allowedOrders = array('ASC', 'DESC'); <nl> $GET_sortKeys = array('sort' => 'sort', 'order' => 'order'); <nl> @@ -41,6 +41,7 @@ $order = $MySort->getOrder(); <nl> // Evaluate Sorters/Orderers <nl> $orderDate = '<a href=\"/mail.php?sort=date&order=ASC\"><i class=\"fa fa-sort\" aria-hidden=\"true\"></i></a>'; <nl> +$orderFrom = '<a href=\"/mail.php?sort=from&order=ASC\"><i class=\"fa fa-sort\" aria-hidden=\"true\"></i></a>'; <nl> $orderTo = '<a href=\"/mail.php?sort=x-original-to&order=ASC\"><i class=\"fa fa-sort\" aria-hidden=\"true\"></i></a>'; <nl> $orderSubj = '<a href=\"/mail.php?sort=subject&order=ASC\"><i class=\"fa fa-sort\" aria-hidden=\"true\"></i></a>'; <nl> @@ -62,6 +63,12 @@ if ($sort == 'date') { <nl> } else { <nl> $orderTo = '<a href=\"/mail.php?sort=x-original-to&order=ASC\"><i class=\"fa fa-sort\" aria-hidden=\"true\"></i></a> <i class=\"fa fa-sort-alpha-desc\" aria-hidden=\"true\"></i>'; <nl> } <nl> +} else if ($sort == 'from') { <nl> + if ($order == 'ASC') { <nl> + $orderFrom = '<a href=\"/mail.php?sort=from&order=DESC\"><i class=\"fa fa-sort\" aria-hidden=\"true\"></i></a> <i class=\"fa fa-sort-alpha-asc\" aria-hidden=\"true\"></i>'; <nl> + } else { <nl> + $orderFrom = '<a href=\"/mail.php?sort=from&order=ASC\"><i class=\"fa fa-sort\" aria-hidden=\"true\"></i></a> <i class=\"fa fa-sort-alpha-desc\" aria-hidden=\"true\"></i>'; <nl> + } <nl> } <nl> @@ -142,6 +149,7 @@ $messages = $MyMbox->get($sortOrderArr); <nl> <tr> <nl> <th>#</th> <nl> <th>Date <?php echo $orderDate;?></th> <nl> + <th>From <?php echo $orderFrom;?></th> <nl> <th>To <?php echo $orderTo;?></th> <nl> <th>Subject <?php echo $orderSubj;?></th> <nl> </tr> <nl> @@ -158,14 +166,18 @@ $messages = $MyMbox->get($sortOrderArr); <nl> <?php echo date('H:i', strtotime($structure->headers['date']));?><br/> <nl> <small><?php echo date('Y-m-d', strtotime($structure->headers['date']));?></small> <nl> </td> <nl> + <td><?php echo htmlentities($structure->headers['from']);?></td> <nl> <td><?php echo $structure->headers['x-original-to'];?></td> <nl> <td><?php echo $structure->headers['subject'];?></td> <nl> </tr> <nl> <tr></tr> <nl> <tr id=\"mail-<?php echo $data['num'];?>\" style=\"display:none\"> <nl> <td></td> <nl> - <td colspan=\"3\"> <nl> - <pre><?php echo $message;?></pre> <nl> + <td colspan=\"4\"> <nl> + <?php echo $structure->body ?> <nl> + <hr> <nl> + <p><a class=\"btn btn-primary\" data-toggle=\"collapse\" href=\"#email-<?php echo $data['num'];?>\" aria-expanded=\"false\" aria-controls=\"email-<?php echo $data['num'];?>\">Raw source</a></p> <nl> + <div class=\"collapse\" id=\"email-<?php echo $data['num'];?>\"><pre><?php echo $message;?></pre></div> <nl> </td> <nl> </tr> <nl> <?php endforeach; ?> <nl> ", "msg": "mail improvments\nhtml email by default\nRaw source button\nextra from column"}
{"diff_id": 1149, "repo": "sylius/refundplugin", "sha": "be192e0a7326ffc9891a4262416a3d790e1fca64", "time": "25.02.2019 12:33:39", "diff": "mmm a / src/Entity/Refund.php <nl> ppp b / src/Entity/Refund.php <nl>@@ -21,7 +21,7 @@ class Refund implements RefundInterface <nl> /** @var int */ <nl> private $refundedUnitId; <nl> - /** @var RefundType */ <nl> + /** @var string */ <nl> private $type; <nl> public function __construct(string $orderNumber, int $amount, int $refundedUnitId, RefundType $type) <nl> @@ -29,7 +29,7 @@ class Refund implements RefundInterface <nl> $this->orderNumber = $orderNumber; <nl> $this->amount = $amount; <nl> $this->refundedUnitId = $refundedUnitId; <nl> - $this->type = $type; <nl> + $this->type = $type->__toString(); <nl> } <nl> public function getId(): ?int <nl> @@ -54,6 +54,6 @@ class Refund implements RefundInterface <nl> public function getType(): RefundType <nl> { <nl> - return $this->type; <nl> + return new RefundType($this->type); <nl> } <nl> } <nl> ", "msg": "[HotFix] Return proper type in Refund type"}
{"diff_id": 1153, "repo": "sylius/refundplugin", "sha": "ab7667afe6d88ab0770198915ec99519e2baceaf", "time": "07.04.2020 11:40:22", "diff": "mmm a / migrations/Version20190517064223.php <nl> ppp b / migrations/Version20190517064223.php <nl>@@ -17,7 +17,7 @@ final class Version20190517064223 extends AbstractMigration <nl> // this up() migration is auto-generated, please modify it to your needs <nl> $this->abortIf($this->connection->getDatabasePlatform()->getName() !== 'mysql', 'Migration can only be executed safely on \\'mysql\\'.'); <nl> - $this->addSql('ALTER TABLE sylius_refund_refund CHANGE type type VARCHAR(256) COMMENT \"sylius_refund_refund_type\" NOT NULL COMMENT \\'(DC2Type:sylius_refund_refund_type)\\''); <nl> + $this->addSql('ALTER TABLE sylius_refund_refund CHANGE type type VARCHAR(256) NOT NULL COMMENT \\'(DC2Type:sylius_refund_refund_type)\\''); <nl> } <nl> public function down(Schema $schema): void <nl> ", "msg": "Migrations: fix compatibility with MySQL 8"}
{"diff_id": 1165, "repo": "sylius/refundplugin", "sha": "545d71948380c051542deb6e3430892d21911741", "time": "09.06.2021 09:42:34", "diff": "mmm a / tests/Behat/Services/Factory/FailedRefundPaymentFactory.php <nl> ppp b / tests/Behat/Services/Factory/FailedRefundPaymentFactory.php <nl>@@ -4,6 +4,7 @@ declare(strict_types=1); <nl> namespace Tests\\Sylius\\RefundPlugin\\Behat\\Services\\Factory; <nl> +use Sylius\\Component\\Core\\Model\\OrderInterface; <nl> use Sylius\\RefundPlugin\\Entity\\RefundPaymentInterface; <nl> use Sylius\\RefundPlugin\\Factory\\RefundPaymentFactoryInterface; <nl> @@ -20,7 +21,7 @@ final class FailedRefundPaymentFactory implements RefundPaymentFactoryInterface <nl> } <nl> public function createWithData( <nl> - string $orderNumber, <nl> + OrderInterface $order, <nl> int $amount, <nl> string $currencyCode, <nl> string $state, <nl> @@ -32,7 +33,7 @@ final class FailedRefundPaymentFactory implements RefundPaymentFactoryInterface <nl> throw new \\Exception('Refund payment creation failed'); <nl> } <nl> - return $this->baseRefundPaymentFactory->createWithData($orderNumber, $amount, $currencyCode, $state, $paymentMethodId); <nl> + return $this->baseRefundPaymentFactory->createWithData($order, $amount, $currencyCode, $state, $paymentMethodId); <nl> } <nl> public function failRefundPaymentCreation(): void <nl> ", "msg": "[Behat] Fix FailedRefundPaymentFactory after changing the order relation"}
{"diff_id": 1191, "repo": "spatie/laravel-event-sourcing", "sha": "1bcd246305ee9de0281ac62222a1df89e2304780", "time": "26.06.2018 16:37:24", "diff": "mmm a / src/Console/Make/MakeProjectorCommand.php <nl> ppp b / src/Console/Make/MakeProjectorCommand.php <nl>@@ -17,7 +17,7 @@ class MakeProjectorCommand extends GeneratorCommand <nl> { <nl> parent::handle(); <nl> - if (! $this->option('sync')) { <nl> + if (! $this->option('qeueud')) { <nl> return; <nl> } <nl> ", "msg": "Check 'queued' option instead of 'sync'\nThe 'sync' option doesn't exist."}
{"diff_id": 1215, "repo": "spatie/laravel-event-sourcing", "sha": "6af090e482588dc9fc41b67cc0c1a653755e4c5a", "time": "31.10.2019 17:53:28", "diff": "mmm a / src/AggregateRoot.php <nl> ppp b / src/AggregateRoot.php <nl>@@ -13,6 +13,10 @@ abstract class AggregateRoot <nl> /** @var array */ <nl> private $recordedEvents = []; <nl> + /** <nl> + * @param string $uuid <nl> + * @return static <nl> + */ <nl> public static function retrieve(string $uuid): AggregateRoot <nl> { <nl> $aggregateRoot = (new static()); <nl> @@ -22,6 +26,10 @@ abstract class AggregateRoot <nl> return $aggregateRoot->reconstituteFromEvents(); <nl> } <nl> + /** <nl> + * @param ShouldBeStored $domainEvent <nl> + * @return static <nl> + */ <nl> public function recordThat(ShouldBeStored $domainEvent): AggregateRoot <nl> { <nl> $this->recordedEvents[] = $domainEvent; <nl> @@ -31,6 +39,9 @@ abstract class AggregateRoot <nl> return $this; <nl> } <nl> + /** <nl> + * @return static <nl> + */ <nl> public function persist(): AggregateRoot <nl> { <nl> $storedEvents = call_user_func( <nl> ", "msg": "Provide docblocks to AggregateRoot class\nThis fixes the \"method not found\" errors in IDEs and static analysis\ntools like phpstan."}
{"diff_id": 1227, "repo": "spatie/laravel-event-sourcing", "sha": "ca1839a1679cbe03f393ef357971061a0eddda45", "time": "27.06.2020 17:14:38", "diff": "mmm a / src/AggregateRoot.php <nl> ppp b / src/AggregateRoot.php <nl>@@ -29,7 +29,7 @@ abstract class AggregateRoot <nl> */ <nl> public static function retrieve(string $uuid): self <nl> { <nl> - $aggregateRoot = resolve(static::class); <nl> + $aggregateRoot = app(static::class); <nl> $aggregateRoot->uuid = $uuid; <nl> ", "msg": "lumen support\n'resolve()' helper does not exist in Lumen."}
{"diff_id": 1228, "repo": "spatie/laravel-event-sourcing", "sha": "d6005a50077502badfff6276b484799f9b65f435", "time": "09.07.2020 22:32:00", "diff": "mmm a / config/event-sourcing.php <nl> ppp b / config/event-sourcing.php <nl>@@ -51,14 +51,14 @@ return [ <nl> /* <nl> * This class is responsible for storing events. To add extra behaviour you <nl> * can change this to a class of your own. The only restriction is that <nl> - * it should implement \\Spatie\\EventSourcing\\StoredEventRepository. <nl> + * it should implement \\Spatie\\EventSourcing\\EloquentStoredEventRepository. <nl> */ <nl> 'stored_event_repository' => \\Spatie\\EventSourcing\\EloquentStoredEventRepository::class, <nl> /* <nl> * This class is responsible for storing snapshots. To add extra behaviour you <nl> * can change this to a class of your own. The only restriction is that <nl> - * it should implement \\Spatie\\EventSourcing\\StoredEventRepository. <nl> + * it should implement \\Spatie\\EventSourcing\\EloquentSnapshotRepository. <nl> */ <nl> 'snapshot_repository' => \\Spatie\\EventSourcing\\Snapshots\\EloquentSnapshotRepository::class, <nl> @@ -79,7 +79,7 @@ return [ <nl> /* <nl> * This class is responsible for serializing events. By default an event will be serialized <nl> * and stored as json. You can customize the class name. A valid serializer <nl> - * should implement Spatie\\EventSourcing\\EventSerializers\\Serializer. <nl> + * should implement Spatie\\EventSourcing\\EventSerializers\\EventSerializer. <nl> */ <nl> 'event_serializer' => \\Spatie\\EventSourcing\\EventSerializers\\JsonEventSerializer::class, <nl> ", "msg": "config corrections - Repository class names, EventSerializer Interface name in the comment\n1. Correct EloquentStoredEventRepository name in comment\n2. Correct EloquentSnapshotRepository name in comment\n3. Correct EventSerializer name in comment\n4. Correct grammer of \"class names\""}
{"diff_id": 1230, "repo": "spatie/laravel-event-sourcing", "sha": "151e1ed35a30c6c67fde7d577fdc2654c5d3fa85", "time": "22.07.2020 13:05:36", "diff": "mmm a / src/AggregateRoots/AggregateRoot.php <nl> ppp b / src/AggregateRoots/AggregateRoot.php <nl>@@ -29,7 +29,12 @@ abstract class AggregateRoot <nl> protected static bool $allowConcurrency = false; <nl> - public static function retrieve(string $uuid): self <nl> + /** <nl> + * @param string $uuid <nl> + * <nl> + * @return static <nl> + */ <nl> + public static function retrieve(string $uuid) <nl> { <nl> $aggregateRoot = app(static::class); <nl> @@ -43,7 +48,12 @@ abstract class AggregateRoot <nl> return $this->uuid; <nl> } <nl> - public function recordThat(ShouldBeStored $domainEvent): self <nl> + /** <nl> + * @param \\Spatie\\EventSourcing\\StoredEvents\\ShouldBeStored $domainEvent <nl> + * <nl> + * @return static <nl> + */ <nl> + public function recordThat(ShouldBeStored $domainEvent) <nl> { <nl> $domainEvent->setAggregateRootUuid($this->uuid); <nl> @@ -54,7 +64,10 @@ abstract class AggregateRoot <nl> return $this; <nl> } <nl> - public function persist(): self <nl> + /** <nl> + * @return static <nl> + */ <nl> + public function persist() <nl> { <nl> $storedEvents = $this->persistWithoutApplyingToEventHandlers(); <nl> ", "msg": "Add static return types in aggregate root for proper static analysis"}
{"diff_id": 1253, "repo": "spatie/laravel-event-sourcing", "sha": "33efbfce3bf42b771c64710e82d7fad6627ce005", "time": "02.03.2022 12:17:49", "diff": "mmm a / src/StoredEvents/Models/EloquentStoredEventQueryBuilder.php <nl> ppp b / src/StoredEvents/Models/EloquentStoredEventQueryBuilder.php <nl>@@ -36,4 +36,18 @@ class EloquentStoredEventQueryBuilder extends Builder <nl> return $this; <nl> } <nl> + <nl> + public function whereProperty(string $property, mixed $value): self <nl> + { <nl> + $this->whereJsonContains(column: \"event_properties->{$property}\", value: $value); <nl> + <nl> + return $this; <nl> + } <nl> + <nl> + public function wherePropertyIsNot(string $property, mixed $value): self <nl> + { <nl> + $this->whereJsonDoesntContain(column: \"event_properties->{$property}\", value: $value); <nl> + <nl> + return $this; <nl> + } <nl> } <nl> ", "msg": "Adds query helpers for event properties."}
{"diff_id": 1263, "repo": "spatie/laravel-event-sourcing", "sha": "1397dc8a16850734effbd357e7f3cafa03bfcfca", "time": "12.09.2022 15:37:44", "diff": "mmm a / tests/EventSerializers/EventSerializerTest.php <nl> ppp b / tests/EventSerializers/EventSerializerTest.php <nl>@@ -66,15 +66,9 @@ class EventSerializerTest extends TestCase <nl> $array = json_decode($json, true); <nl> - $this->assertEquals([ <nl> - 'account' => [ <nl> - 'class' => get_class($account), <nl> - 'id' => 1, <nl> - 'relations' => [], <nl> - 'connection' => $this->dbDriver(), <nl> - ], <nl> - 'amount' => 1234, <nl> - ], $array); <nl> + $this->assertEquals(get_class($account), $array['account']['class'] ?? null); <nl> + $this->assertEquals(1, $array['account']['id'] ?? null); <nl> + $this->assertEquals(1234, $array['amount'] ?? null); <nl> } <nl> /** @test */ <nl> ", "msg": "Update assertsion in EventSerializerTest\nThis makes it more robust across multiple Laravel versions"}
{"diff_id": 1293, "repo": "thephpleague/oauth2-server", "sha": "6bdd108145d16af2f0493d29c45eef988088bd87", "time": "16.06.2017 16:51:16", "diff": "mmm a / src/Exception/OAuthServerException.php <nl> ppp b / src/Exception/OAuthServerException.php <nl>@@ -105,7 +105,10 @@ class OAuthServerException extends \\Exception <nl> public static function invalidScope($scope, $redirectUri = null) <nl> { <nl> $errorMessage = 'The requested scope is invalid, unknown, or malformed'; <nl> - $hint = sprintf('Check the `%s` scope', $scope); <nl> + $hint = sprintf( <nl> + 'Check the `%s` scope', <nl> + htmlspecialchars($scope, ENT_QUOTES, 'UTF-8', false) <nl> + ); <nl> return new static($errorMessage, 5, 'invalid_scope', 400, $hint, $redirectUri); <nl> } <nl> ", "msg": "Escape scope parameter to reduce pontential XSS vector"}
{"diff_id": 1300, "repo": "thephpleague/oauth2-server", "sha": "72349ef22f94b940a406c0e506fda3beb6f0289b", "time": "01.07.2017 18:10:33", "diff": "mmm a / src/AuthorizationServer.php <nl> ppp b / src/AuthorizationServer.php <nl>@@ -26,8 +26,6 @@ class AuthorizationServer implements EmitterAwareInterface <nl> { <nl> use EmitterAwareTrait; <nl> - const ENCRYPTION_KEY_ERROR = 'You must set the encryption key going forward to improve the security of this library - see this page for more information https://oauth2.thephpleague.com/v5-security-improvements/'; <nl> - <nl> /** <nl> * @var GrantTypeInterface[] <nl> */ <nl> @@ -108,16 +106,6 @@ class AuthorizationServer implements EmitterAwareInterface <nl> $this->responseType = $responseType; <nl> } <nl> - /** <nl> - * Set the encryption key <nl> - * <nl> - * @param string $key <nl> - */ <nl> - public function setEncryptionKey($key) <nl> - { <nl> - $this->encryptionKey = $key; <nl> - } <nl> - <nl> /** <nl> * Enable a grant type on the server. <nl> * <nl> @@ -136,12 +124,6 @@ class AuthorizationServer implements EmitterAwareInterface <nl> $grantType->setPrivateKey($this->privateKey); <nl> $grantType->setPublicKey($this->publicKey); <nl> $grantType->setEmitter($this->getEmitter()); <nl> - <nl> - if ($this->encryptionKey === null) { <nl> - // @codeCoverageIgnoreStart <nl> - error_log(self::ENCRYPTION_KEY_ERROR); <nl> - // @codeCoverageIgnoreEnd <nl> - } <nl> $grantType->setEncryptionKey($this->encryptionKey); <nl> $this->enabledGrantTypes[$grantType->getIdentifier()] = $grantType; <nl> @@ -159,12 +141,6 @@ class AuthorizationServer implements EmitterAwareInterface <nl> */ <nl> public function validateAuthorizationRequest(ServerRequestInterface $request) <nl> { <nl> - if ($this->encryptionKey === null) { <nl> - // @codeCoverageIgnoreStart <nl> - error_log(self::ENCRYPTION_KEY_ERROR); <nl> - // @codeCoverageIgnoreEnd <nl> - } <nl> - <nl> foreach ($this->enabledGrantTypes as $grantType) { <nl> if ($grantType->canRespondToAuthorizationRequest($request)) { <nl> return $grantType->validateAuthorizationRequest($request); <nl> ", "msg": "Encryption key is now always required so remove redundent code"}
{"diff_id": 1300, "repo": "thephpleague/oauth2-server", "sha": "72349ef22f94b940a406c0e506fda3beb6f0289b", "time": "01.07.2017 18:10:33", "diff": "mmm a / src/AuthorizationServer.php <nl> ppp b / src/AuthorizationServer.php <nl>@@ -26,8 +26,6 @@ class AuthorizationServer implements EmitterAwareInterface <nl> { <nl> use EmitterAwareTrait; <nl> - const ENCRYPTION_KEY_ERROR = 'You must set the encryption key going forward to improve the security of this library - see this page for more information https://oauth2.thephpleague.com/v5-security-improvements/'; <nl> - <nl> /** <nl> * @var GrantTypeInterface[] <nl> */ <nl> @@ -108,16 +106,6 @@ class AuthorizationServer implements EmitterAwareInterface <nl> $this->responseType = $responseType; <nl> } <nl> - /** <nl> - * Set the encryption key <nl> - * <nl> - * @param string $key <nl> - */ <nl> - public function setEncryptionKey($key) <nl> - { <nl> - $this->encryptionKey = $key; <nl> - } <nl> - <nl> /** <nl> * Enable a grant type on the server. <nl> * <nl> @@ -136,12 +124,6 @@ class AuthorizationServer implements EmitterAwareInterface <nl> $grantType->setPrivateKey($this->privateKey); <nl> $grantType->setPublicKey($this->publicKey); <nl> $grantType->setEmitter($this->getEmitter()); <nl> - <nl> - if ($this->encryptionKey === null) { <nl> - // @codeCoverageIgnoreStart <nl> - error_log(self::ENCRYPTION_KEY_ERROR); <nl> - // @codeCoverageIgnoreEnd <nl> - } <nl> $grantType->setEncryptionKey($this->encryptionKey); <nl> $this->enabledGrantTypes[$grantType->getIdentifier()] = $grantType; <nl> @@ -159,12 +141,6 @@ class AuthorizationServer implements EmitterAwareInterface <nl> */ <nl> public function validateAuthorizationRequest(ServerRequestInterface $request) <nl> { <nl> - if ($this->encryptionKey === null) { <nl> - // @codeCoverageIgnoreStart <nl> - error_log(self::ENCRYPTION_KEY_ERROR); <nl> - // @codeCoverageIgnoreEnd <nl> - } <nl> - <nl> foreach ($this->enabledGrantTypes as $grantType) { <nl> if ($grantType->canRespondToAuthorizationRequest($request)) { <nl> return $grantType->validateAuthorizationRequest($request); <nl> ", "msg": "Encryption key is now always required so remove redundent code"}
{"diff_id": 1304, "repo": "thephpleague/oauth2-server", "sha": "80fc8e654b6ab6ba66000ddd7b95f8d7203c2443", "time": "19.07.2017 07:57:47", "diff": "mmm a / src/CryptKey.php <nl> ppp b / src/CryptKey.php <nl>@@ -50,12 +50,13 @@ class CryptKey <nl> // Attempt to correct the permissions <nl> if (chmod($keyPath, 0600) === false) { <nl> // @codeCoverageIgnoreStart <nl> - throw new \\LogicException( <nl> + trigger_error( <nl> sprintf( <nl> 'Key file \"%s\" permissions are not correct, should be 600 instead of %s, unable to automatically resolve the issue', <nl> $keyPath, <nl> $keyPathPerms <nl> - ) <nl> + ), <nl> + E_USER_NOTICE <nl> ); <nl> // @codeCoverageIgnoreEnd <nl> } <nl> ", "msg": "Trigger E_USER_NOTICE instead of throwing an exception if key cannot be chmod to 600"}
{"diff_id": 1306, "repo": "thephpleague/oauth2-server", "sha": "c70451abd50aee741e668590f5c6fed641f8f534", "time": "18.10.2017 22:08:11", "diff": "mmm a / src/Exception/OAuthServerException.php <nl> ppp b / src/Exception/OAuthServerException.php <nl>@@ -195,6 +195,21 @@ class OAuthServerException extends \\Exception <nl> ); <nl> } <nl> + /** <nl> + * Missing scope error <nl> + * <nl> + * @param null|string $redirectUri A HTTP URI to redirect the user back to <nl> + * <nl> + * @return static <nl> + */ <nl> + public static function missingScope($redirectUri = null) <nl> + { <nl> + $errorMessage = 'No scope was specified for this request'; <nl> + $hint = 'Set a default scope on the server if no scopes are passed in the request'; <nl> + <nl> + return new static($errorMessage, 11, 'missing_scope', 400, $hint, $redirectUri); <nl> + } <nl> + <nl> /** <nl> * @return string <nl> */ <nl> ", "msg": "Add an exception for a missing scope"}
{"diff_id": 1307, "repo": "thephpleague/oauth2-server", "sha": "5a28fb8af4503407de10c5b32f90c2a46ed87145", "time": "18.10.2017 22:09:53", "diff": "mmm a / src/AuthorizationServer.php <nl> ppp b / src/AuthorizationServer.php <nl>@@ -70,6 +70,11 @@ class AuthorizationServer implements EmitterAwareInterface <nl> */ <nl> private $encryptionKey; <nl> + /** <nl> + * @var string <nl> + */ <nl> + private $defaultScope; <nl> + <nl> /** <nl> * New server instance. <nl> * <nl> @@ -78,6 +83,7 @@ class AuthorizationServer implements EmitterAwareInterface <nl> * @param ScopeRepositoryInterface $scopeRepository <nl> * @param CryptKey|string $privateKey <nl> * @param string $encryptionKey <nl> + * @param null|string $defaultScope <nl> * @param null|ResponseTypeInterface $responseType <nl> */ <nl> public function __construct( <nl> @@ -86,6 +92,7 @@ class AuthorizationServer implements EmitterAwareInterface <nl> ScopeRepositoryInterface $scopeRepository, <nl> $privateKey, <nl> $encryptionKey, <nl> + $defaultScope = null, <nl> ResponseTypeInterface $responseType = null <nl> ) { <nl> $this->clientRepository = $clientRepository; <nl> @@ -97,6 +104,8 @@ class AuthorizationServer implements EmitterAwareInterface <nl> } <nl> $this->privateKey = $privateKey; <nl> + $this->defaultScope = $defaultScope; <nl> + <nl> $this->encryptionKey = $encryptionKey; <nl> $this->responseType = $responseType; <nl> } <nl> @@ -116,6 +125,7 @@ class AuthorizationServer implements EmitterAwareInterface <nl> $grantType->setAccessTokenRepository($this->accessTokenRepository); <nl> $grantType->setClientRepository($this->clientRepository); <nl> $grantType->setScopeRepository($this->scopeRepository); <nl> + $grantType->setDefaultScope($this->defaultScope); <nl> $grantType->setPrivateKey($this->privateKey); <nl> $grantType->setEmitter($this->getEmitter()); <nl> $grantType->setEncryptionKey($this->encryptionKey); <nl> ", "msg": "Set a default scope for the authorization server"}
{"diff_id": 1308, "repo": "thephpleague/oauth2-server", "sha": "825017f27ecd20f101bcf864769222e24a92f886", "time": "25.10.2017 18:30:17", "diff": "mmm a / src/Grant/ImplicitGrant.php <nl> ppp b / src/Grant/ImplicitGrant.php <nl>@@ -26,12 +26,19 @@ class ImplicitGrant extends AbstractAuthorizeGrant <nl> */ <nl> private $accessTokenTTL; <nl> + /** <nl> + * @var string <nl> + */ <nl> + private $queryDelimiter; <nl> + <nl> /** <nl> * @param \\DateInterval $accessTokenTTL <nl> + * @param string $queryDelimiter <nl> */ <nl> - public function __construct(\\DateInterval $accessTokenTTL) <nl> + public function __construct(\\DateInterval $accessTokenTTL, $queryDelimiter = '#') <nl> { <nl> $this->accessTokenTTL = $accessTokenTTL; <nl> + $this->queryDelimiter = $queryDelimiter; <nl> } <nl> /** <nl> @@ -204,7 +211,7 @@ class ImplicitGrant extends AbstractAuthorizeGrant <nl> 'expires_in' => $accessToken->getExpiryDateTime()->getTimestamp() - (new \\DateTime())->getTimestamp(), <nl> 'state' => $authorizationRequest->getState(), <nl> ], <nl> - '#' <nl> + $this->queryDelimiter <nl> ) <nl> ); <nl> ", "msg": "Ability to specify query delimiter, such as `?` instead of the hard-coded `#`"}
{"diff_id": 1334, "repo": "thephpleague/oauth2-server", "sha": "5b79b40df9c9a057602c17f6dace2bc88d201b85", "time": "29.12.2017 12:25:39", "diff": "mmm a / examples/public/api.php <nl> ppp b / examples/public/api.php <nl>@@ -49,16 +49,18 @@ $app->get( <nl> ], <nl> ]; <nl> + $totalUsers = count($users); <nl> + <nl> // If the access token doesn't have the `basic` scope hide users' names <nl> if (in_array('basic', $request->getAttribute('oauth_scopes')) === false) { <nl> - for ($i = 0; $i < count($users); $i++) { <nl> + for ($i = 0; $i < $totalUsers; $i++) { <nl> unset($users[$i]['name']); <nl> } <nl> } <nl> // If the access token doesn't have the `email` scope hide users' email addresses <nl> if (in_array('email', $request->getAttribute('oauth_scopes')) === false) { <nl> - for ($i = 0; $i < count($users); $i++) { <nl> + for ($i = 0; $i < $totalUsers; $i++) { <nl> unset($users[$i]['email']); <nl> } <nl> } <nl> ", "msg": "Fixed count placement to make code more efficient as per scrutinizer feedback"}
{"diff_id": 1335, "repo": "thephpleague/oauth2-server", "sha": "ff29721ca94bfb9cd0f0b8ab2c3a05eb831e52b6", "time": "29.12.2017 12:29:47", "diff": "mmm a / examples/public/implicit.php <nl> ppp b / examples/public/implicit.php <nl>@@ -41,7 +41,6 @@ $app = new App([ <nl> $privateKeyPath, <nl> 'lxZFUEsBCJ2Yb14IF2ygAHI5N4+ZAUXXaSeeJm6+twsUmIen' <nl> ); <nl> - $server->setEncryptionKey('lxZFUEsBCJ2Yb14IF2ygAHI5N4+ZAUXXaSeeJm6+twsUmIen'); <nl> // Enable the implicit grant on the server with a token TTL of 1 hour <nl> $server->enableGrantType(new ImplicitGrant(new \\DateInterval('PT1H'))); <nl> ", "msg": "Removing call to setEncryptionKey as no such function on the authorization server"}
{"diff_id": 1336, "repo": "thephpleague/oauth2-server", "sha": "01d21b25332846a93e959d2e7194d37bbea03b58", "time": "29.12.2017 12:32:12", "diff": "mmm a / tests/Grant/AuthCodeGrantTest.php <nl> ppp b / tests/Grant/AuthCodeGrantTest.php <nl>@@ -48,7 +48,7 @@ class AuthCodeGrantTest extends TestCase <nl> { <nl> $this->cryptStub = new CryptTraitStub; <nl> $this->codeVerifier = rtrim(strtr(base64_encode(random_bytes(32)), '+/', '-_'), '='); <nl> - $this->codeChallenge = rtrim(strtr(base64_encode(hash('sha256',$this->codeVerifier, true)), '+/', '-_'), '='); <nl> + $this->codeChallenge = hash('sha256', strtr(rtrim(base64_encode($this->codeVerifier), '='), '+/', '-_')); <nl> } <nl> public function testGetIdentifier() <nl> ", "msg": "Update statement to generate codeChallenge in AuthCodeGrantTest"}
{"diff_id": 1338, "repo": "thephpleague/oauth2-server", "sha": "cf9acb32b8c9a6537a90e79bd8dfc0f00a70d2da", "time": "13.01.2018 15:29:42", "diff": "mmm a / src/CryptKey.php <nl> ppp b / src/CryptKey.php <nl>@@ -48,7 +48,7 @@ class CryptKey <nl> if ($keyPermissionsCheck === true) { <nl> // Verify the permissions of the key <nl> $keyPathPerms = decoct(fileperms($keyPath) & 0777); <nl> - if (in_array($keyPathPerms, ['600', '660'], true) === false) { <nl> + if (in_array($keyPathPerms, ['400', '440', '600', '660'], true) === false) { <nl> trigger_error(sprintf( <nl> 'Key file \"%s\" permissions are not correct, should be 600 or 660 instead of %s', <nl> $keyPath, <nl> ", "msg": "Allow some more secure options without tsk-tsk."}
{"diff_id": 1347, "repo": "thephpleague/oauth2-server", "sha": "8a619e5c1e76be858360c5e09fa9fb90a5b26f3f", "time": "21.04.2018 18:07:38", "diff": "mmm a / src/Exception/OAuthServerException.php <nl> ppp b / src/Exception/OAuthServerException.php <nl>@@ -92,7 +92,7 @@ class OAuthServerException extends \\Exception <nl> public static function unsupportedGrantType() <nl> { <nl> $errorMessage = 'The authorization grant type is not supported by the authorization server.'; <nl> - $hint = 'Check the `grant_type` parameter'; <nl> + $hint = 'Check that all required parameters have been provided'; <nl> return new static($errorMessage, 2, 'unsupported_grant_type', 400, $hint); <nl> } <nl> ", "msg": "Change hint so it applies to both the auth and access token requests"}
{"diff_id": 1357, "repo": "thephpleague/oauth2-server", "sha": "e4a7fea834bd3b0af06bd18e9eba0dbf41ac1c97", "time": "25.05.2018 10:00:21", "diff": "mmm a / tests/ExceptionTest.php <nl> ppp b / tests/Exception/OAuthServerExceptionTest.php <nl><?php <nl> -namespace LeagueTests\\Utils; <nl> +namespace LeagueTests\\Exception; <nl> use League\\OAuth2\\Server\\Exception\\OAuthServerException; <nl> +use PHPUnit\\Framework\\TestCase; <nl> -class ExceptionTest extends \\PHPUnit_Framework_TestCase <nl> +class OAuthServerExceptionTest extends TestCase <nl> { <nl> public function testHasRedirect() <nl> { <nl> - $exceptionWithoutRedirect = OAuthServerException::accessDenied('Some hint'); <nl> - $this->assertFalse($exceptionWithoutRedirect->hasRedirect()); <nl> - <nl> $exceptionWithRedirect = OAuthServerException::accessDenied('some hint', 'https://example.com/error'); <nl> + <nl> $this->assertTrue($exceptionWithRedirect->hasRedirect()); <nl> } <nl> + <nl> + public function testDoesNotHaveRedirect() <nl> + { <nl> + $exceptionWithoutRedirect = OAuthServerException::accessDenied('Some hint'); <nl> + <nl> + $this->assertFalse($exceptionWithoutRedirect->hasRedirect()); <nl> + } <nl> } <nl> ", "msg": "Move OAuthServerExceptionTest to appropriate folder"}
{"diff_id": 1365, "repo": "thephpleague/oauth2-server", "sha": "46c2f99b06d3b804fa119da309016f05faff1bb2", "time": "01.09.2018 13:17:36", "diff": "mmm a / src/Grant/AuthCodeGrant.php <nl> ppp b / src/Grant/AuthCodeGrant.php <nl>@@ -52,7 +52,7 @@ class AuthCodeGrant extends AbstractAuthorizeGrant <nl> /** <nl> * Disable the requirement for a code challenge for public clients. <nl> */ <nl> - public function disableCodeChallengeForPublicClients() <nl> + public function disableRequireCodeChallengeForPublicClients() <nl> { <nl> $this->requireCodeChallengeForPublicClients = false; <nl> } <nl> ", "msg": "Change function name to be more explicit"}
{"diff_id": 1377, "repo": "thephpleague/oauth2-server", "sha": "b624124d5af0f25714f582a73581016035f7b7c1", "time": "13.10.2018 15:25:49", "diff": "mmm a / src/Grant/AuthCodeGrant.php <nl> ppp b / src/Grant/AuthCodeGrant.php <nl>@@ -163,7 +163,7 @@ class AuthCodeGrant extends AbstractAuthorizeGrant <nl> /** <nl> * Validate the authorization code. <nl> * <nl> - * @param object $authCodePayload <nl> + * @param \\stdClass $authCodePayload <nl> * @param ClientEntityInterface $client <nl> * @param ServerRequestInterface $request <nl> */ <nl> @@ -198,7 +198,7 @@ class AuthCodeGrant extends AbstractAuthorizeGrant <nl> /** <nl> * Get scopes from the auth code payload. <nl> * <nl> - * @param object $authCodePayload <nl> + * @param \\stdClass $authCodePayload <nl> * <nl> * @return array <nl> */ <nl> ", "msg": "Chaneg param types to satisfy PHPStan"}
{"diff_id": 1409, "repo": "thephpleague/oauth2-server", "sha": "644014803e925628df6dee4581159a24da431f3d", "time": "25.10.2019 23:24:50", "diff": "mmm a / src/CryptKey.php <nl> ppp b / src/CryptKey.php <nl>@@ -80,12 +80,6 @@ class CryptKey <nl> return 'file://' . $keyPath; <nl> } <nl> - if (!touch($keyPath)) { <nl> - // @codeCoverageIgnoreStart <nl> - throw new RuntimeException(sprintf('\"%s\" key file could not be created', $keyPath)); <nl> - // @codeCoverageIgnoreEnd <nl> - } <nl> - <nl> if (file_put_contents($keyPath, $key) === false) { <nl> // @codeCoverageIgnoreStart <nl> throw new RuntimeException(sprintf('Unable to write key file to temporary directory \"%s\"', $tmpDir)); <nl> ", "msg": "Remove touch function as not required"}
{"diff_id": 1436, "repo": "thephpleague/oauth2-server", "sha": "c808d13049b12bdf954049e45d388dfc8462f7ed", "time": "01.06.2021 09:24:35", "diff": "mmm a / src/AuthorizationServer.php <nl> ppp b / src/AuthorizationServer.php <nl>@@ -82,7 +82,7 @@ class AuthorizationServer implements EmitterAwareInterface <nl> /** <nl> * @var bool <nl> */ <nl> - private $revokeRefreshTokens; <nl> + private $revokeRefreshTokens = true; <nl> /** <nl> * New server instance. <nl> @@ -93,7 +93,6 @@ class AuthorizationServer implements EmitterAwareInterface <nl> * @param CryptKey|string $privateKey <nl> * @param string|Key $encryptionKey <nl> * @param null|ResponseTypeInterface $responseType <nl> - * @param bool $revokeRefreshTokens <nl> */ <nl> public function __construct( <nl> ClientRepositoryInterface $clientRepository, <nl> @@ -101,8 +100,7 @@ class AuthorizationServer implements EmitterAwareInterface <nl> ScopeRepositoryInterface $scopeRepository, <nl> $privateKey, <nl> $encryptionKey, <nl> - ResponseTypeInterface $responseType = null, <nl> - bool $revokeRefreshTokens = true <nl> + ResponseTypeInterface $responseType = null <nl> ) { <nl> $this->clientRepository = $clientRepository; <nl> $this->accessTokenRepository = $accessTokenRepository; <nl> @@ -122,7 +120,6 @@ class AuthorizationServer implements EmitterAwareInterface <nl> } <nl> $this->responseType = $responseType; <nl> - $this->revokeRefreshTokens = $revokeRefreshTokens; <nl> } <nl> /** <nl> @@ -242,4 +239,14 @@ class AuthorizationServer implements EmitterAwareInterface <nl> { <nl> $this->defaultScope = $defaultScope; <nl> } <nl> + <nl> + /** <nl> + * Sets wether to revoke refresh tokens or not (for all grant types). <nl> + * <nl> + * @param bool $revokeRefreshTokens <nl> + */ <nl> + public function setRevokeRefreshTokens(bool $revokeRefreshTokens): void <nl> + { <nl> + $this->revokeRefreshTokens = $revokeRefreshTokens; <nl> + } <nl> } <nl> ", "msg": "Set revokeRefreshTokens prop to true by default, added method to change, cleaned up constructor."}
{"diff_id": 1454, "repo": "linuxserver/heimdall-apps", "sha": "e018954bfdb600837c82e90db9ae29fc1346c920", "time": "05.01.2019 11:37:30", "diff": "mmm a / qBittorrent/qBittorrent.php <nl> ppp b / qBittorrent/qBittorrent.php <nl>@@ -8,19 +8,39 @@ class qBittorrent extends \\App\\SupportedApps implements \\App\\EnhancedApps { <nl> //protected $method = 'POST'; // Uncomment if requests to the API should be set by POST <nl> function __construct() { <nl> - //$this->jar = new \\GuzzleHttp\\Cookie\\CookieJar; // Uncomment if cookies need to be set <nl> + $this->jar = new \\GuzzleHttp\\Cookie\\CookieJar; // Uncomment if cookies need to be set <nl> } <nl> public function test() <nl> { <nl> + $test = $this->login(); <nl> + if($test->getStatusCode() === 200) { <nl> + echo $test->getStatusCode(); <nl> + } <nl> $test = parent::appTest($this->url('version/api')); <nl> echo $test->status; <nl> } <nl> + public function login() <nl> + { <nl> + $username = $this->config->username; <nl> + $password = $this->config->password; <nl> + $attrs = [ <nl> + 'body' => 'username='.$username.'&password='.$password, <nl> + 'cookies' => $this->jar, <nl> + 'headers' => ['content-type' => 'application/x-www-form-urlencoded'] <nl> + ]; <nl> + return parent::execute($this->url('login'), $attrs, false, 'POST'); <nl> + } <nl> + <nl> public function livestats() <nl> { <nl> $status = 'inactive'; <nl> - $res = parent::execute($this->url('query/torrents')); <nl> + $this->login(); <nl> + $attrs = [ <nl> + 'cookies' => $this->jar <nl> + ]; <nl> + $res = parent::execute($this->url('query/torrents'), $attrs); <nl> $details = json_decode($res->getBody()); <nl> $data = []; <nl> ", "msg": "adding login to qBittorrent.php\nAdding login method and its calls for enhanced stats"}
{"diff_id": 1458, "repo": "linuxserver/heimdall-apps", "sha": "84cb6cfad8e80b46912a11cddb784283a43e1518", "time": "24.06.2019 20:25:41", "diff": "mmm a / Jackett/Jackett.php <nl> ppp b / Jackett/Jackett.php <nl><?php namespace App\\SupportedApps\\Jackett; <nl> -class Jackett extends \\App\\SupportedApps { <nl> - <nl> +class Jackett extends \\App\\SupportedApps implements \\App\\SearchInterface { <nl> + public $type = 'external'; // Whether to go to the external site or display results locally <nl> + public function getResults($query, $provider) <nl> + { <nl> + $url = rtrim($provider->url, '/'); <nl> + $q = urlencode($query); <nl> + return redirect($url.'#search='.$q); <nl> + } <nl> } <nl> ", "msg": "Improve Jackett as a Search Interface"}
{"diff_id": 1473, "repo": "linuxserver/heimdall-apps", "sha": "9935cd51ffd838e7bd8fd6690287da08e562e01f", "time": "21.06.2020 18:51:14", "diff": "mmm a / qBittorrent/qBittorrent.php <nl> ppp b / qBittorrent/qBittorrent.php <nl>@@ -28,8 +28,8 @@ class qBittorrent extends \\App\\SupportedApps implements \\App\\EnhancedApps { <nl> public function login() <nl> { <nl> - $username = $this->config->username; <nl> - $password = $this->config->password; <nl> + $username = urlencode($this->config->username); <nl> + $password = urlencode($this->config->password); <nl> $attrs = [ <nl> 'body' => 'username='.$username.'&password='.$password, <nl> 'cookies' => $this->jar, <nl> ", "msg": "urlencode qBittorrent login details\nThis fixes logins failing when using login credentials containing\nspecial special characters (such as a \" or /)."}
{"diff_id": 1490, "repo": "linuxserver/heimdall-apps", "sha": "ab9b800ac374d5533ddebdb6395ebb126fe02942", "time": "14.04.2021 09:38:25", "diff": "mmm a / Plex/Plex.php <nl> ppp b / Plex/Plex.php <nl>@@ -45,8 +45,11 @@ class Plex extends \\App\\SupportedApps implements \\App\\EnhancedApps { <nl> public function url($endpoint) <nl> { <nl> $url = parse_url(parent::normaliseurl($this->config->url)); <nl> + $scheme = $url['scheme']; <nl> $domain = $url['host']; <nl> - $api_url = \"http://\".$domain.\":32400\".$endpoint.\"?X-Plex-Token=\".$this->config->token; <nl> + $port = isset($url['port']) ? $url['port'] : '32400'; <nl> + $api_url = $scheme.\"://\".$domain.\":\".$port.$endpoint.\"?X-Plex-Token=\".$this->config->token; <nl> return $api_url; <nl> + <nl> } <nl> } <nl> ", "msg": "Allow scheme and port to be specified for Plex"}
{"diff_id": 1493, "repo": "linuxserver/heimdall-apps", "sha": "096edd4e2b0068c2e30a2d2885abbc5133362296", "time": "18.05.2021 01:12:07", "diff": "mmm a / Jellyfin/Jellyfin.php <nl> ppp b / Jellyfin/Jellyfin.php <nl>@@ -9,14 +9,14 @@ class Jellyfin extends \\App\\SupportedApps implements \\App\\EnhancedApps { <nl> public function test() <nl> { <nl> - $test = parent::appTest($this->url('System/Info'), $this->getAttrs()); <nl> + $test = parent::appTest($this->url('System/Info/Public'), $this->getAttrs()); <nl> echo $test->status; <nl> } <nl> public function livestats() <nl> { <nl> $status = 'inactive'; <nl> - $res = parent::execute($this->url('/emby/Items/Counts'), $this->getAttrs()); <nl> + $res = parent::execute($this->url('Items/Counts'), $this->getAttrs()); <nl> $result = json_decode($res->getBody()); <nl> $details = ['visiblestats'=>[]]; <nl> foreach($this->config->availablestats as $stat) { <nl> ", "msg": "Jellyfin API Update\nAlso includes trailing slash fix from"}
{"diff_id": 1501, "repo": "linuxserver/heimdall-apps", "sha": "1c4fd3a1642e49ac199d0e9ebbfe28268bc11019", "time": "30.11.2021 22:29:44", "diff": "mmm a / Sonarr/Sonarr.php <nl> ppp b / Sonarr/Sonarr.php <nl>@@ -36,7 +36,7 @@ class Sonarr extends \\App\\SupportedApps implements \\App\\EnhancedApps { <nl> if($missing || $queue) { <nl> $data['missing'] = $missing->totalRecords ?? 0; <nl> - $data['queue'] = count($queue) ?? 0; <nl> + $data['queue'] = $queue->totalRecords ?? 0; <nl> } <nl> return parent::getLiveStats($status, $data); <nl> @@ -45,7 +45,7 @@ class Sonarr extends \\App\\SupportedApps implements \\App\\EnhancedApps { <nl> public function url($endpoint) <nl> { <nl> - $api_url = parent::normaliseurl($this->config->url).'api/'.$endpoint.'?apikey='.$this->config->apikey; <nl> + $api_url = parent::normaliseurl($this->config->url).'api/v3/'.$endpoint.'?apikey='.$this->config->apikey; <nl> return $api_url; <nl> } <nl> } <nl> \\ No newline at end of file <nl> ", "msg": "Dropped legacy API endpoint and added support for v3 API"}
{"diff_id": 1502, "repo": "linuxserver/heimdall-apps", "sha": "45140e46e5a6b8171b44526593cac4f41547a55e", "time": "05.01.2022 08:34:45", "diff": "mmm a / Sonarr/Sonarr.php <nl> ppp b / Sonarr/Sonarr.php <nl>@@ -45,7 +45,7 @@ class Sonarr extends \\App\\SupportedApps implements \\App\\EnhancedApps { <nl> public function url($endpoint) <nl> { <nl> - $api_url = parent::normaliseurl($this->config->url).'api/v3/'.$endpoint.'?apikey='.$this->config->apikey; <nl> + $api_url = parent::normaliseurl($this->config->url).'api/v3/'.$endpoint.'?sortKey=series.title&apikey='.$this->config->apikey; <nl> return $api_url; <nl> } <nl> } <nl> \\ No newline at end of file <nl> ", "msg": "Adding sortKey parameter to URL call\nThis allows the API to return a results again instead of an error."}
{"diff_id": 1515, "repo": "linuxserver/heimdall-apps", "sha": "e63080e2680fe7eb3d35e5c51b10279df44ef332", "time": "17.10.2022 21:57:16", "diff": "mmm a / Transmission/Transmission.php <nl> ppp b / Transmission/Transmission.php <nl>@@ -48,17 +48,22 @@ class Transmission extends \\App\\SupportedApps implements \\App\\EnhancedApps <nl> $data = []; <nl> $torrents = $details->arguments->torrents; <nl> - $torrentCount = count($torrents); <nl> - $rateDownload = $rateUpload = $completedTorrents = 0; <nl> + $seeding_torrents = 0; <nl> + $leeching_torrents = 0; <nl> + $rateDownload = $rateUpload = 0; <nl> + <nl> foreach ($torrents as $thisTorrent) { <nl> $rateDownload += $thisTorrent->rateDownload; <nl> $rateUpload += $thisTorrent->rateUpload; <nl> - if ($thisTorrent->percentDone == 1) { <nl> - $completedTorrents += 1; <nl> + if ($thisTorrent->status == 6) { <nl> + $seeding_torrents += 1; <nl> + } <nl> + if($thisTorrent->status == 4) { <nl> + $leeching_torrents += 1; <nl> } <nl> } <nl> - $leech = $torrentCount - $completedTorrents; <nl> - if ($leech > 0) { <nl> + <nl> + if ($leeching_torrents > 0) { <nl> $status = \"active\"; <nl> } <nl> @@ -74,8 +79,8 @@ class Transmission extends \\App\\SupportedApps implements \\App\\EnhancedApps <nl> \" <span>\", <nl> \"/s</span>\" <nl> ); <nl> - $data[\"seed_count\"] = $completedTorrents ?? 0; <nl> - $data[\"leech_count\"] = $leech ?? 0; <nl> + $data[\"seed_count\"] = $seeding_torrents; <nl> + $data[\"leech_count\"] = $leeching_torrents; <nl> return parent::getLiveStats($status, $data); <nl> } <nl> ", "msg": "fix: display correct seeding ant leeching torrent count"}
{"diff_id": 1540, "repo": "imbo/imbo", "sha": "387f456a474d8873dd5e5eeed27b52c3fd93efec", "time": "26.01.2017 14:34:39", "diff": "mmm a / None <nl> ppp b / src/EventListener/AccessToken/SHA256.php <nl>+<?php <nl> +/** <nl> + * This file is part of the Imbo package <nl> + * <nl> + * (c) Christer Edvartsen <cogo@starzinger.net> <nl> + * <nl> + * For the full copyright and license information, please view the LICENSE file that was <nl> + * distributed with this source code. <nl> + */ <nl> + <nl> +namespace Imbo\\EventListener\\AccessToken; <nl> + <nl> +/** <nl> + * Implementation of the default SHA256 access token generator <nl> + * <nl> + * @author Mats Lindh <mats@lindh.no> <nl> + * @package AccessToken <nl> + */ <nl> +class SHA256 extends AccessTokenGenerator { <nl> + public function generateSignature($data, $privateKey) { <nl> + return hash_hmac('sha256', $data, $privateKey); <nl> + } <nl> +} <nl> \\ No newline at end of file <nl> ", "msg": "Implement default access token algorithm as an access token generator"}
{"diff_id": 1542, "repo": "imbo/imbo", "sha": "25cc695012bf46ee055240563d310db62bdab1ec", "time": "27.01.2017 11:42:45", "diff": "mmm a / src/EventListener/AccessToken/SHA256.php <nl> ppp b / src/EventListener/AccessToken/SHA256.php <nl>namespace Imbo\\EventListener\\AccessToken; <nl> /** <nl> - * Implementation of the default SHA256 access token generator <nl> + * Implementation of the default SHA256 access token generator (HMAC-ed with the private key) <nl> * <nl> * @author Mats Lindh <mats@lindh.no> <nl> * @package AccessToken <nl> */ <nl> class SHA256 extends AccessTokenGenerator { <nl> - public function generateSignature($data, $privateKey) { <nl> + /** <nl> + * {@inheritdoc} <nl> + */ <nl> + public function generateSignature($argumentKey, $data, $privateKey) { <nl> return hash_hmac('sha256', $data, $privateKey); <nl> } <nl> } <nl> \\ No newline at end of file <nl> ", "msg": "Update SHA256 generator with argumentKey parameter"}
{"diff_id": 1543, "repo": "imbo/imbo", "sha": "c3e5a58f409f619afe3059b3fced136b5e78ca8e", "time": "27.01.2017 11:43:27", "diff": "mmm a / src/EventListener/AccessToken/AccessTokenInterface.php <nl> ppp b / src/EventListener/AccessToken/AccessTokenInterface.php <nl>namespace Imbo\\EventListener\\AccessToken; <nl> /** <nl> - * Abstract class for Access Token Generation <nl> + * Interface for Access Token Generation <nl> * <nl> * @author Mats Lindh <mats@lindh.no> <nl> * @package AccessToken <nl> */ <nl> interface AccessTokenInterface { <nl> - public function generateSignature($data, $privateKey); <nl> - public function getArgumentKey(); <nl> + /** <nl> + * @param $argumentKey string The URL argument used for key comparison <nl> + * @param $data string The data to be signed <nl> + * @param $privateKey string The private key used to sign the data <nl> + * @return string The generated signature from the parameters given <nl> + */ <nl> + public function generateSignature($argumentKey, $data, $privateKey); <nl> + <nl> + /** <nl> + * @return array<string> The defined argument keys handled by this generator <nl> + */ <nl> + public function getArgumentKeys(); <nl> } <nl> ", "msg": "Add argument key name and pluralize get method in AccessToken interface"}
{"diff_id": 1551, "repo": "imbo/imbo", "sha": "5dd13c73753d67674942119a71766e3971796b49", "time": "05.03.2017 16:27:26", "diff": "mmm a / src/EventListener/AccessToken/MultipleAccessTokenGenerators.php <nl> ppp b / src/EventListener/AccessToken/MultipleAccessTokenGenerators.php <nl>@@ -3,6 +3,7 @@ namespace Imbo\\EventListener\\AccessToken; <nl> use Imbo\\EventListener\\AccessToken\\AccessTokenGenerator, <nl> Imbo\\EventListener\\AccessToken\\SHA256; <nl> +use Imbo\\Exception\\RuntimeException; <nl> class MultipleAccessTokenGenerators extends AccessTokenGenerator { <nl> /** <nl> @@ -21,8 +22,14 @@ class MultipleAccessTokenGenerators extends AccessTokenGenerator { <nl> * @param array $params Parameters to the MultipleAccessTokenGenerators. <nl> */ <nl> public function __construct(array $params = []) { <nl> - if (!isset($params['generators'])) { <nl> + if (!isset($params['generators']) || !is_array($params['generators'])) { <nl> $params['generators'] = []; <nl> + } else { <nl> + foreach ($params['generators'] as $generator) { <nl> + if (!$generator instanceof AccessTokenInterface) { <nl> + throw new RuntimeException('AccessTokenGenerators must implement AccessTokenInterface'); <nl> + } <nl> + } <nl> } <nl> parent::__construct($params); <nl> ", "msg": "Throw exception of generator doesn't implement AccessTokenInterface"}
{"diff_id": 1556, "repo": "imbo/imbo", "sha": "bb4794eace48833cfb8f307e9402cd1f6a67d162", "time": "08.09.2017 16:03:33", "diff": "mmm a / src/Image/LoaderManager.php <nl> ppp b / src/Image/LoaderManager.php <nl>@@ -23,7 +23,7 @@ use Imbo\\Exception\\InvalidArgumentException; <nl> * if the image is determined to be invalid or damaged. <nl> * <nl> * @author Mats Lindh <mats@lindh.no> <nl> - * @package Exceptions <nl> + * @package Image <nl> */ <nl> class LoaderManager { <nl> protected $loaders = []; <nl> ", "msg": "Use correct package for LoaderManager"}
{"diff_id": 1558, "repo": "imbo/imbo", "sha": "a3f7947f3f7187a7c5eed5663b24bdf0d64707bd", "time": "08.09.2017 16:04:48", "diff": "mmm a / src/Image/ImagePreparation.php <nl> ppp b / src/Image/ImagePreparation.php <nl>@@ -91,10 +91,12 @@ class ImagePreparation implements ListenerInterface { <nl> throw $e; <nl> } <nl> + $outputConverterManager = $event->getOutputConverterManager(); <nl> + <nl> // Store relevant information in the image instance and attach it to the request <nl> $image = new Image(); <nl> $image->setMimeType($mime) <nl> - ->setExtension(Image::getFileExtension($mime)) <nl> + ->setExtension($outputConverterManager->getExtensionFromMimetype($mime)) <nl> ->setBlob($imageBlob) <nl> ->setWidth($size['width']) <nl> ->setHeight($size['height']) <nl> ", "msg": "Use outputconverter to resolve extension from mimetype"}
{"diff_id": 1563, "repo": "imbo/imbo", "sha": "11e14545493585149b63db24c1a84bf71c8f8c9f", "time": "08.09.2017 16:52:42", "diff": "mmm a / src/Image/OutputConverter/Basic.php <nl> ppp b / src/Image/OutputConverter/Basic.php <nl>@@ -26,7 +26,7 @@ class Basic implements OutputConverterInterface { <nl> ], <nl> [ <nl> 'mime' => 'image/jpeg', <nl> - 'extension' => ['jpeg', 'jpg'], <nl> + 'extension' => ['jpg', 'jpeg'], <nl> 'callback' => [$this, 'convert'], <nl> ], <nl> [ <nl> ", "msg": "Change 'jpg' to be the default extension type for 'image/jpeg'"}
{"diff_id": 1569, "repo": "imbo/imbo", "sha": "627620e63306d9c6e67f41dcb8b31db3fb241316", "time": "09.09.2017 22:59:59", "diff": "mmm a / config/config.default.php <nl> ppp b / config/config.default.php <nl>@@ -344,6 +344,9 @@ $defaultConfig = [ <nl> // Imagick-specific event listener for the built in image transformations <nl> 'imagick' => 'Imbo\\EventListener\\Imagick', <nl> + <nl> + // Pluggable output conversion <nl> + 'outputConverter' => 'Imbo\\EventListener\\OutputConverterManagerImagick', <nl> ], <nl> /** <nl> ", "msg": "Add the output converter as an eventlistener to receive imagick instance"}
{"diff_id": 1570, "repo": "imbo/imbo", "sha": "62e62208c4bd4b570057df37eb511060c3562f5c", "time": "09.09.2017 23:00:12", "diff": "mmm a / None <nl> ppp b / src/EventListener/OutputConverterManagerImagick.php <nl>+<?php <nl> +/** <nl> + * This file is part of the Imbo package <nl> + * <nl> + * (c) Christer Edvartsen <cogo@starzinger.net> <nl> + * <nl> + * For the full copyright and license information, please view the LICENSE file that was <nl> + * distributed with this source code. <nl> + */ <nl> + <nl> +namespace Imbo\\EventListener; <nl> + <nl> +use Imbo\\EventManager\\EventInterface, <nl> + Imbo\\EventListener\\ListenerInterface; <nl> + <nl> +/** <nl> + * Add the current Imagick instance to the active OutputConverterManager <nl> + * <nl> + * @author Christer Edvartsen <cogo@starzinger.net> <nl> + * @author Espen Hovlandsdal <espen@hovlandsdal.com> <nl> + * @package Event\\Listeners <nl> + */ <nl> +class OutputConverterManagerImagick implements ListenerInterface, ImagickAware { <nl> + protected $imagick; <nl> + <nl> + /** <nl> + * {@inheritdoc} <nl> + */ <nl> + public static function getSubscribedEvents() { <nl> + return [ <nl> + 'image.loaded' => ['populateImagickInstance'], <nl> + ]; <nl> + } <nl> + <nl> + /** <nl> + * {@inheritdoc} <nl> + */ <nl> + public function setImagick(\\Imagick $imagick) { <nl> + $this->imagick = $imagick; <nl> + } <nl> + <nl> + public function populateImagickInstance(EventInterface $event) { <nl> + $event->getOutputConverterManager()->setImagick($this->imagick); <nl> + } <nl> +} <nl> \\ No newline at end of file <nl> ", "msg": "Add ImagickAware eventlistener for output converter"}
{"diff_id": 1572, "repo": "imbo/imbo", "sha": "f1e95eae09fe5f839f249730ab9f035079f50242", "time": "09.09.2017 23:01:32", "diff": "mmm a / src/Image/OutputConverterManager.php <nl> ppp b / src/Image/OutputConverterManager.php <nl>@@ -30,6 +30,7 @@ class OutputConverterManager { <nl> protected $convertersByExtension = []; <nl> protected $extensionToMimetype = []; <nl> protected $mimetypeToExtension = []; <nl> + protected $imagick; <nl> public function addConverters(array $converters) { <nl> foreach ($converters as $converter) { <nl> @@ -88,12 +89,12 @@ class OutputConverterManager { <nl> } <nl> } <nl> - public function convert($imagick, $image, $extension, $mime = null) { <nl> + public function convert($image, $extension, $mime = null) { <nl> if ($this->supportsExtension($extension)) { <nl> foreach ($this->convertersByExtension[$extension] as $converter) { <nl> - $result = $converter($imagick, $image, $extension, $mime); <nl> + $result = $converter($this->imagick, $image, $extension, $mime); <nl> - if ($result) { <nl> + if ($result !== false) { <nl> $image->setMimeType($this->getMimetypeFromExtension($extension)); <nl> return true; <nl> } <nl> @@ -102,9 +103,9 @@ class OutputConverterManager { <nl> if ($mime && isset($this->convertersByMimetype[$mime])) { <nl> foreach ($this->convertersByMimetype[$mime] as $converter) { <nl> - $result = $converter($imagick, $image, $extension, $mime); <nl> + $result = $converter($this->imagick, $image, $extension, $mime); <nl> - if ($result) { <nl> + if ($result !== false) { <nl> $image->setMimeType($mime); <nl> return true; <nl> } <nl> @@ -133,4 +134,8 @@ class OutputConverterManager { <nl> public function supportsExtension($extension) { <nl> return !empty($this->convertersByExtension[$extension]); <nl> } <nl> + <nl> + public function setImagick(\\Imagick $imagick) { <nl> + $this->imagick = $imagick; <nl> + } <nl> } <nl> ", "msg": "Imagick instance as object property and exact false check to continue"}
{"diff_id": 1576, "repo": "imbo/imbo", "sha": "05720819faaa569831ae4aa43f368a81dcc0eea2", "time": "11.09.2017 10:47:40", "diff": "mmm a / src/Image/ImagePreparation.php <nl> ppp b / src/Image/ImagePreparation.php <nl>@@ -91,12 +91,10 @@ class ImagePreparation implements ListenerInterface { <nl> throw $e; <nl> } <nl> - $outputConverterManager = $event->getOutputConverterManager(); <nl> - <nl> // Store relevant information in the image instance and attach it to the request <nl> $image = new Image(); <nl> $image->setMimeType($mime) <nl> - ->setExtension($outputConverterManager->getExtensionFromMimetype($mime)) <nl> + ->setExtension($event->getLoaderManager()->getExtensionFromMimetype($mime)) <nl> ->setBlob($imageBlob) <nl> ->setWidth($size['width']) <nl> ->setHeight($size['height']) <nl> ", "msg": "Resolve extension from loaders instead of output converters"}
{"diff_id": 1577, "repo": "imbo/imbo", "sha": "cd29932af9acb5184ccb240c47745589e6c39d22", "time": "11.09.2017 11:35:43", "diff": "mmm a / src/Image/TransformationManager.php <nl> ppp b / src/Image/TransformationManager.php <nl>@@ -45,6 +45,11 @@ class TransformationManager implements ListenerInterface { <nl> */ <nl> protected $initializers = []; <nl> + /** <nl> + * Track if the manager has attempted to apply transformations. <nl> + */ <nl> + protected $transformationsApplied = false; <nl> + <nl> /** <nl> * {@inheritdoc} <nl> */ <nl> @@ -173,6 +178,8 @@ class TransformationManager implements ListenerInterface { <nl> ); <nl> } <nl> } <nl> + <nl> + $this->transformationsApplied = true; <nl> } <nl> /** <nl> @@ -351,4 +358,13 @@ class TransformationManager implements ListenerInterface { <nl> ->setEvent($event) <nl> ->transform($params); <nl> } <nl> + <nl> + /** <nl> + * Check whether the manager has attempted to apply transformations (i.e. transformations are present in the pipeline). <nl> + * <nl> + * @return boolean Whether transformations has been triggered <nl> + */ <nl> + public function hasAppliedTransformations() { <nl> + return $this->transformationsApplied; <nl> + } <nl> } <nl> ", "msg": "Allow TransformationManager to track whether the pipeline has run"}
{"diff_id": 1583, "repo": "imbo/imbo", "sha": "50902404301d439e7cecf51c5578f90cdc5bb24e", "time": "11.09.2017 12:54:39", "diff": "mmm a / src/Image/OutputConverterManager.php <nl> ppp b / src/Image/OutputConverterManager.php <nl>@@ -135,6 +135,14 @@ class OutputConverterManager { <nl> return isset($this->mimetypeToExtension[$mimetype]) ? $this->mimetypeToExtension[$mimetype] : null; <nl> } <nl> + public function getMimetypeToExtensionMap() { <nl> + return $this->mimetypeToExtension; <nl> + } <nl> + <nl> + public function getExtensionToMimetypeMap() { <nl> + return $this->extensionToMimetype; <nl> + } <nl> + <nl> public function supportsExtension($extension) { <nl> return !empty($this->convertersByExtension[$extension]); <nl> } <nl> ", "msg": "Add getter methods for extension/mimetype maps"}
{"diff_id": 1584, "repo": "imbo/imbo", "sha": "903fcda8721f747ea20aceba9a35643812dd2b22", "time": "11.09.2017 12:59:14", "diff": "mmm a / src/Http/Response/ResponseFormatter.php <nl> ppp b / src/Http/Response/ResponseFormatter.php <nl>@@ -45,9 +45,8 @@ class ResponseFormatter implements ListenerInterface { <nl> */ <nl> private $extensionsToMimeType = [ <nl> 'json' => 'application/json', <nl> - 'gif' => 'image/gif', <nl> - 'jpg' => 'image/jpeg', <nl> - 'png' => 'image/png', <nl> + <nl> + // Image extensions are added on invocation <nl> ]; <nl> /** <nl> @@ -58,9 +57,8 @@ class ResponseFormatter implements ListenerInterface { <nl> */ <nl> private $supportedTypes = [ <nl> 'application/json' => 'json', <nl> - 'image/gif' => 'gif', <nl> - 'image/png' => 'png', <nl> - 'image/jpeg' => 'jpg', <nl> + <nl> + // Image mimetypes are added on invocation <nl> ]; <nl> /** <nl> @@ -86,9 +84,7 @@ class ResponseFormatter implements ListenerInterface { <nl> */ <nl> private $modelTypes = [ <nl> 'image' => [ <nl> - 'image/jpeg', <nl> - 'image/png', <nl> - 'image/gif', <nl> + // Supported image formats are populated from the output converter <nl> ], <nl> ]; <nl> @@ -155,23 +151,31 @@ class ResponseFormatter implements ListenerInterface { <nl> $config = $event->getConfig(); <nl> $contentNegotiateImages = $config['contentNegotiateImages']; <nl> $model = $response->getModel(); <nl> + $outputConverterManager = $event->getOutputConverterManager(); <nl> + $supportedTypes = array_merge($this->supportedTypes, $outputConverterManager->getMimetypeToExtensionMap()); <nl> + $extensionsToMimeType = array_merge($this->extensionsToMimeType, $outputConverterManager->getExtensionToMimetypeMap()); <nl> + <nl> + // Populate the supported image types for this event <nl> + $this->modelTypes['image'] = $outputConverterManager->getSupportedMimetypes(); <nl> if (!$extension && !$contentNegotiateImages && $model instanceof Model\\Image) { <nl> // Configuration is telling us not to use content negotiation for images, <nl> // instead we want to use the original format of the image <nl> - $mime = $model->getMimeType(); <nl> - $formatter = $this->supportedTypes[$mime]; <nl> + $formatter = $model->getExtension(); <nl> } else if ($extension && !($model instanceof Model\\Error && ($routeName === 'image' || $routeName === 'globalshorturl'))) { <nl> // The user agent wants a specific type. Skip content negotiation completely, but not <nl> // if the request is against the image resource (or the global short url resource), and <nl> // ended up as an error, because then Imbo would try to render the error as an image. <nl> $mime = $this->defaultMimeType; <nl> - if (isset($this->extensionsToMimeType[$extension])) { <nl> - $mime = $this->extensionsToMimeType[$extension]; <nl> + if (isset($extensionsToMimeType[$extension])) { <nl> + $mime = $extensionsToMimeType[$extension]; <nl> + } else if ($model instanceof Model\\Image) { <nl> + // If the request is for an image, but we don't support the extension - give a 404 like the old router did. <nl> + throw new Exception\\RuntimeException('Not Found', 404); <nl> } <nl> - $formatter = $this->supportedTypes[$mime]; <nl> + $formatter = $supportedTypes[$mime]; <nl> } else { <nl> // Set Vary to Accept since we are doing content negotiation based on Accept <nl> $response->setVary('Accept', false); <nl> @@ -208,7 +212,16 @@ class ResponseFormatter implements ListenerInterface { <nl> $types = array_filter($types, function($type) use ($original) { <nl> return $type !== $original; <nl> }); <nl> + <nl> + // if the current pipeline hasn't performed any transformations, we can output the original format, even if it's not supported as a output converter. <nl> + // otherwise, if we support the original format, we use it <nl> + if ( <nl> + !$event->getTransformationManager()->hasAppliedTransformations() || <nl> + $outputConverterManager->supportsExtension($model->getExtension()) <nl> + ) { <nl> array_unshift($types, $original); <nl> + $supportedTypes[$original] = $model->getExtension(); <nl> + } <nl> } <nl> } <nl> @@ -216,7 +229,7 @@ class ResponseFormatter implements ListenerInterface { <nl> if (($q = $this->contentNegotiation->isAcceptable($mime, $acceptableTypes)) && ($q > $maxQ)) { <nl> $maxQ = $q; <nl> $match = true; <nl> - $formatter = $this->supportedTypes[$mime]; <nl> + $formatter = $supportedTypes[$mime]; <nl> } <nl> } <nl> @@ -227,7 +240,7 @@ class ResponseFormatter implements ListenerInterface { <nl> } else if (!$match) { <nl> // There was no match but we don't want to be an ass about it. Send a response <nl> // anyway (allowed according to RFC2616, section 10.4.7) <nl> - $formatter = $this->supportedTypes[$this->defaultMimeType]; <nl> + $formatter = $supportedTypes[$this->defaultMimeType]; <nl> } <nl> } <nl> ", "msg": "Rewrite response formatter to use dynamic mimetypes and extensions"}
{"diff_id": 1589, "repo": "imbo/imbo", "sha": "b6e751e5647c18c7e28dce06adcc452cfc594b39", "time": "11.09.2017 15:52:46", "diff": "mmm a / src/EventListener/Imagick.php <nl> ppp b / src/EventListener/Imagick.php <nl>@@ -97,7 +97,7 @@ class Imagick implements ListenerInterface, ImagickAware { <nl> } <nl> // Inject the image blob <nl> - $this->imagick->readImageBlob($image->getBlob()); <nl> + $event->getLoaderManager()->load($image->getMimeType(), $image->getBlob()); <nl> // If we have specified a size hint, check if we have a different input size <nl> // than the original and set the ratio as an argument for any other listeners <nl> ", "msg": "Use LoaderManager for Imagick eventlistener as well"}
{"diff_id": 1592, "repo": "imbo/imbo", "sha": "c69c9dc97978c8d031e472ea9d0da9900bed7895", "time": "11.09.2017 15:54:37", "diff": "mmm a / src/Image/Loader/Basic.php <nl> ppp b / src/Image/Loader/Basic.php <nl>@@ -34,8 +34,7 @@ class Basic implements LoaderInterface { <nl> ]; <nl> } <nl> - public function load($blob) { <nl> - $imagick = new \\Imagick(); <nl> + public function load($imagick, $blob) { <nl> $imagick->readImageBlob($blob); <nl> return $imagick; <nl> } <nl> ", "msg": "Use injected Imagick instance for loading"}
{"diff_id": 1609, "repo": "imbo/imbo", "sha": "f7eb58c969e4d2d14dc743e6c81c5ac22ef51cd4", "time": "18.09.2017 21:48:39", "diff": "mmm a / tests/phpunit/unit/Image/InputLoaderManagerTest.php <nl> ppp b / tests/phpunit/unit/Image/InputLoaderManagerTest.php <nl>namespace ImboUnitTest\\Image; <nl> -use Imbo\\Image\\InputLoader\\Basic; <nl> -use Imbo\\Image\\InputLoader\\Text; <nl> -use Imbo\\Image\\InputLoader\\InputLoaderInterface; <nl> -use Imbo\\Image\\InputLoaderManager; <nl> -use PHPUnit_Framework_TestCase; <nl> -use stdClass; <nl> +use Imbo\\Image\\InputLoader\\Basic, <nl> + Imbo\\Image\\InputLoader\\InputLoaderInterface, <nl> + Imbo\\Image\\InputLoaderManager, <nl> + PHPUnit_Framework_TestCase, <nl> + stdClass; <nl> /** <nl> * @coversDefaultClass Imbo\\Image\\InputLoaderManager <nl> @@ -56,7 +55,6 @@ class InputLoaderManagerTest extends PHPUnit_Framework_TestCase { <nl> public function testCanAddLoadersAsStrings() { <nl> $this->assertSame($this->manager, $this->manager->addLoaders([ <nl> new Basic(), <nl> - Text::class <nl> ])); <nl> } <nl> @@ -67,13 +65,11 @@ class InputLoaderManagerTest extends PHPUnit_Framework_TestCase { <nl> public function testCanGetExtensionFromMimeType() { <nl> $this->manager->addLoaders([ <nl> new Basic(), <nl> - new Text(), <nl> ]); <nl> $this->assertSame('jpg', $this->manager->getExtensionFromMimeType('image/jpeg')); <nl> $this->assertSame('png', $this->manager->getExtensionFromMimeType('image/png')); <nl> $this->assertSame('gif', $this->manager->getExtensionFromMimeType('image/gif')); <nl> $this->assertSame('tif', $this->manager->getExtensionFromMimeType('image/tiff')); <nl> - $this->assertSame('txt', $this->manager->getExtensionFromMimeType('text/plain')); <nl> } <nl> /** <nl> @@ -104,8 +100,8 @@ class InputLoaderManagerTest extends PHPUnit_Framework_TestCase { <nl> ->will($this->returnValue(null)); <nl> $this->manager->setImagick($imagick) <nl> - ->registerLoader($loader1) <nl> - ->registerLoader($loader2); <nl> + ->registerLoader($loader2) <nl> + ->registerLoader($loader1); <nl> $this->assertSame( <nl> $imagick, <nl> ", "msg": "Remove Text, style imports and fix loader sequence"}
{"diff_id": 1623, "repo": "imbo/imbo", "sha": "25fe311e3b57cfb7d40cdf45fc3bc802e9cd2352", "time": "05.10.2017 10:03:11", "diff": "mmm a / None <nl> ppp b / src/Image/Transformation/Icc.php <nl>+<?php <nl> +/** <nl> + * This file is part of the Imbo package <nl> + * <nl> + * (c) Christer Edvartsen <cogo@starzinger.net> <nl> + * <nl> + * For the full copyright and license information, please view the LICENSE file that was <nl> + * distributed with this source code. <nl> + */ <nl> + <nl> +namespace Imbo\\Image\\Transformation; <nl> + <nl> +use Imbo\\Exception\\ConfigurationException; <nl> +use Imbo\\Exception\\InvalidArgumentException; <nl> + <nl> +class Icc extends Transformation { <nl> + /** <nl> + * @var array <nl> + */ <nl> + protected $profiles; <nl> + <nl> + public function __construct($profiles) { <nl> + if (!is_array($profiles)) { <nl> + throw new ConfigurationException(get_class() . ' requires an array with name => profile file (.icc) mappings when created.', 500); <nl> + } <nl> + <nl> + $this->profiles = $profiles; <nl> + } <nl> + <nl> + /** <nl> + * {@inheritdoc} <nl> + */ <nl> + public function transform(array $params) { <nl> + if (empty($params['name']) && empty($this->profiles['default'])) { <nl> + throw new InvalidArgumentException('No name given for ICC profile to use and no profile assigned to the \"default\" name.', 400); <nl> + } else if (!empty($params['name']) && empty($this->profiles[$params['name']])) { <nl> + throw new InvalidArgumentException('The given ICC profile alias (\"' . $params['name'] . '\") is unknown to the server.', 400); <nl> + } <nl> + <nl> + $file = empty($params['name']) ? $this->profiles['default'] : $this->profiles[$params['name']]; <nl> + <nl> + if (!file_exists($file)) { <nl> + throw new ConfigurationException('Could not load ICC profile referenced by \"' . $params['name'] . '\": ' . $file, 500); <nl> + } <nl> + <nl> + $iccProfile = file_get_contents($file); <nl> + $this->imagick->profileImage('icc', $iccProfile); <nl> + $this->image->hasBeenTransformed(true); <nl> + } <nl> +} <nl> \\ No newline at end of file <nl> ", "msg": "Add transformation for applying ICC profiles"}
{"diff_id": 1625, "repo": "imbo/imbo", "sha": "8b043ad9aa7550c070dc8a8d1ea3d8acddfb0119", "time": "05.10.2017 11:06:34", "diff": "mmm a / src/Image/Transformation/Icc.php <nl> ppp b / src/Image/Transformation/Icc.php <nl>namespace Imbo\\Image\\Transformation; <nl> use Imbo\\Exception\\ConfigurationException, <nl> - Imbo\\Exception\\InvalidArgumentException; <nl> + Imbo\\Exception\\InvalidArgumentException, <nl> + Imbo\\Exception\\TransformationException, <nl> + \\ImagickException; <nl> /** <nl> * Transformation for applying ICC profiles to an image. <nl> @@ -46,11 +48,17 @@ class Icc extends Transformation { <nl> $file = empty($params['name']) ? $this->profiles['default'] : $this->profiles[$params['name']]; <nl> if (!file_exists($file)) { <nl> - throw new ConfigurationException('Could not load ICC profile referenced by \"' . $params['name'] . '\": ' . $file, 500); <nl> + throw new ConfigurationException('Could not load ICC profile referenced by \"' . (!empty($params['name']) ? $params['name'] : 'default') . '\": ' . $file, 500); <nl> } <nl> $iccProfile = file_get_contents($file); <nl> + <nl> + try { <nl> $this->imagick->profileImage('icc', $iccProfile); <nl> + } catch (ImagickException $e) { <nl> + throw new TransformationException($e->getMessage(), 400, $e); <nl> + } <nl> + <nl> $this->image->hasBeenTransformed(true); <nl> } <nl> } <nl> \\ No newline at end of file <nl> ", "msg": "Catch possible ImagickException and handle default profile name in exception"}
{"diff_id": 1643, "repo": "imbo/imbo", "sha": "934a1a3fb5325b6fa168e070d830f67a690e1f49", "time": "05.07.2020 16:42:39", "diff": "mmm a / src/EventListener/ImageVariations.php <nl> ppp b / src/EventListener/ImageVariations.php <nl>@@ -276,9 +276,11 @@ class ImageVariations implements ListenerInterface { <nl> try { <nl> $this->storage->deleteImageVariations($user, $imageIdentifier, $width); <nl> + // @codeCoverageIgnoreStart <nl> } catch (StorageException $e) { <nl> trigger_error('Could not remove the stored variation', E_USER_WARNING); <nl> } <nl> + // @codeCoverageIgnoreEnd <nl> } <nl> } <nl> } <nl> ", "msg": "Ignore statement that is never reached by PHPUnit"}
{"diff_id": 1645, "repo": "imbo/imbo", "sha": "d8532a5c067c903991bda95fbd9f44b5bf53a9f1", "time": "07.07.2020 10:34:59", "diff": "mmm a / features/bootstrap/DatabaseTest/DoctrineMySQL.php <nl> ppp b / features/bootstrap/DatabaseTest/DoctrineMySQL.php <nl>@@ -54,7 +54,8 @@ class DoctrineMySQL implements AdapterTest { <nl> 'user' => $config['database.username'], <nl> 'password' => $config['database.password'], <nl> 'host' => $config['database.hostname'], <nl> - 'driver' => 'pdo_mysql' <nl> + 'port' => $config['database.port'], <nl> + 'driver' => 'pdo_mysql', <nl> ]); <nl> } <nl> } <nl> ", "msg": "Need to inject port number when creating the adapter"}
{"diff_id": 1647, "repo": "imbo/imbo", "sha": "a474111ca4e9e9ab66c07ffb3dc3287fdedf355a", "time": "25.07.2020 13:55:00", "diff": "mmm a / src/Database/DatabaseInterface.php <nl> ppp b / src/Database/DatabaseInterface.php <nl>@@ -99,7 +99,7 @@ interface DatabaseInterface { <nl> * <nl> * @param string $user The user which the image belongs to <nl> * @param string $imageIdentifier The image identifier <nl> - * @return array <nl> + * @return array{size: int, width: int, height: int, mime: string, extension: string, added: int, updated: int} <nl> */ <nl> function getImageProperties(string $user, string $imageIdentifier) : array; <nl> @@ -112,7 +112,7 @@ interface DatabaseInterface { <nl> * method will return either the current timestamp, or the max timestamp of any of the given <nl> * users. <nl> * <nl> - * @param array $users The users <nl> + * @param string[] $users The users <nl> * @param string $imageIdentifier The image identifier <nl> * @throws DatabaseException <nl> * @return DateTime Returns an instance of DateTime <nl> @@ -203,7 +203,7 @@ interface DatabaseInterface { <nl> * @param string $user The user attached to the URL <nl> * @param string $imageIdentifier The image identifier attached to the URL <nl> * @param string $extension Optionl image extension <nl> - * @param array $query Optional query parameters <nl> + * @param array<string, string> $query Optional query parameters <nl> * @return bool <nl> */ <nl> function insertShortUrl(string $shortUrlId, string $user, string $imageIdentifier, string $extension = null, array $query = []) : bool; <nl> @@ -214,7 +214,7 @@ interface DatabaseInterface { <nl> * @param string $user The user attached to the URL <nl> * @param string $imageIdentifier The image identifier attached to the URL <nl> * @param string $extension Optionl image extension <nl> - * @param array $query Optional query parameters <nl> + * @param array<string, string> $query Optional query parameters <nl> * @return ?string <nl> */ <nl> function getShortUrlId(string $user, string $imageIdentifier, string $extension = null, array $query = []) : ?string; <nl> @@ -223,7 +223,7 @@ interface DatabaseInterface { <nl> * Fetch parameters for a short URL <nl> * <nl> * @param string $shortUrlId The ID of the short URL <nl> - * @return ?array Returns an array with information regarding the short URL, or null if the <nl> + * @return ?array<string, string> Returns an array with information regarding the short URL, or null if the <nl> * short URL is not found <nl> */ <nl> function getShortUrlParams(string $shortUrlId) : ?array; <nl> ", "msg": "Be more specific on the array params"}
{"diff_id": 1650, "repo": "imbo/imbo", "sha": "94d735c1a9a3354b53d32b06fabd09e12468171f", "time": "25.07.2020 19:11:22", "diff": "mmm a / src/Database/DatabaseInterface.php <nl> ppp b / src/Database/DatabaseInterface.php <nl>@@ -43,7 +43,7 @@ interface DatabaseInterface { <nl> * <nl> * @param string $user The user which the image belongs to <nl> * @param string $imageIdentifier Image identifier <nl> - * @param array $metadata An array with metadata <nl> + * @param array<string, mixed> $metadata An array with metadata <nl> * @throws DatabaseException <nl> * @return bool Returns true on success or false on failure <nl> */ <nl> @@ -55,7 +55,7 @@ interface DatabaseInterface { <nl> * @param string $user The user which the image belongs to <nl> * @param string $imageIdentifier Image identifier <nl> * @throws DatabaseException <nl> - * @return array Returns the metadata as an array <nl> + * @return array<string, mixed> Returns the metadata as an array <nl> */ <nl> function getMetadata(string $user, string $imageIdentifier) : array; <nl> @@ -74,12 +74,12 @@ interface DatabaseInterface { <nl> * <nl> * This method is also responsible for setting a correct \"hits\" number in the images model. <nl> * <nl> - * @param array $users The users which the images belongs to. If an empty array is specified <nl> + * @param string[] $users The users which the images belongs to. If an empty array is specified <nl> * the adapter should return images for all users. <nl> * @param Query $query A query instance <nl> * @param Images $model The images model <nl> * @throws DatabaseException <nl> - * @return array <nl> + * @return array<int, array<string, mixed>> <nl> */ <nl> function getImages(array $users, Query $query, Images $model) : array; <nl> ", "msg": "Make docblock type hints more specific"}
{"diff_id": 1651, "repo": "imbo/imbo", "sha": "99b1c3df50a32f4c8fcd8e8d80b701fa9d805d9d", "time": "10.08.2020 16:03:51", "diff": "mmm a / src/Database/DatabaseInterface.php <nl> ppp b / src/Database/DatabaseInterface.php <nl>@@ -223,8 +223,12 @@ interface DatabaseInterface { <nl> * Fetch parameters for a short URL <nl> * <nl> * @param string $shortUrlId The ID of the short URL <nl> - * @return ?array<string, string> Returns an array with information regarding the short URL, or null if the <nl> - * short URL is not found <nl> + * @return ?array{ <nl> + * user: string, <nl> + * imageIdentifier: string, <nl> + * extension: string, <nl> + * query: array<string, string|string[]> <nl> + * } <nl> */ <nl> function getShortUrlParams(string $shortUrlId) : ?array; <nl> ", "msg": "Be more precise with the phpdoc"}
{"diff_id": 1654, "repo": "imbo/imbo", "sha": "ed2bc2083d3cdd2f63036cc79c69a764a8058238", "time": "26.08.2021 00:32:36", "diff": "mmm a / tests/Behat/FeatureContextTest.php <nl> ppp b / tests/Behat/FeatureContextTest.php <nl>@@ -51,7 +51,7 @@ class FeatureContextTest extends TestCase { <nl> $this->cacheUtil = $this->createMock(CacheUtil::class); <nl> $this->context = new FeatureContext($this->cacheUtil); <nl> - $this->context->setClient($this->client); <nl> + $this->context->setClient($this->client, $this->baseUri); <nl> } <nl> /** <nl> @@ -83,11 +83,11 @@ class FeatureContextTest extends TestCase { <nl> ) <nl> ->willReturnOnConsecutiveCalls( <nl> $handlerStack, <nl> - 'http://localhost:8080', <nl> + $this->baseUri, <nl> ); <nl> $context = new FeatureContext(); <nl> - $this->assertSame($context, $context->setClient($client)); <nl> + $this->assertSame($context, $context->setClient($client, $this->baseUri)); <nl> } <nl> /** <nl> ", "msg": "Specify base URI as well"}
{"diff_id": 1671, "repo": "imbo/imbo", "sha": "cc71ada2bf961c2f22f06a1e74d5d377dde80e20", "time": "09.10.2021 23:43:42", "diff": "mmm a / src/EventListener/AccessToken.php <nl> ppp b / src/EventListener/AccessToken.php <nl>@@ -190,7 +190,7 @@ class AccessToken implements ListenerInterface <nl> }, $uris); <nl> } <nl> - foreach ($uris as $uri) { <nl> + foreach (array_filter($uris) as $uri) { <nl> foreach ($presentAccessTokenArgumentKeys as $argumentKey => $token) { <nl> // Remove the access token from the query string as it's not used to generate the signature <nl> $uriWithoutAccessToken = rtrim(preg_replace('/(?<=(\\?|&))' . $argumentKey . '=[^&]+&?/', '', $uri), '&?'); <nl> ", "msg": "Remove possible empty entries"}
{"diff_id": 1695, "repo": "kirki-framework/kirki", "sha": "a029d161bf7ff521e523fccc742daa1702b99ba6", "time": "23.04.2017 14:23:08", "diff": "mmm a / field/class-kirki-field-spacing.php <nl> ppp b / field/class-kirki-field-spacing.php <nl>@@ -37,7 +37,7 @@ class Kirki_Field_Spacing extends Kirki_Field_Number { <nl> if ( ! empty( $this->sanitize_callback ) ) { <nl> return; <nl> } <nl> - $this->sanitize_callback = array( $this, 'sanitize' ); <nl> + $this->sanitize_callback = array( $this, 'sanitize_value' ); <nl> } <nl> @@ -48,7 +48,7 @@ class Kirki_Field_Spacing extends Kirki_Field_Number { <nl> * @param array $value The value. <nl> * @return array <nl> */ <nl> - public function sanitize( $value ) { <nl> + public function sanitize_value( $value ) { <nl> // Sanitize each sub-value separately. <nl> foreach ( $value as $key => $sub_value ) { <nl> ", "msg": "Bugfix for spacing control sanitization."}
{"diff_id": 1714, "repo": "kirki-framework/kirki", "sha": "0c9d48fbad26d7a396ecd54932c02964ea9d8950", "time": "13.05.2017 12:34:24", "diff": "mmm a / modules/custom-sections/sections/class-kirki-sections-nested-section.php <nl> ppp b / modules/custom-sections/sections/class-kirki-sections-nested-section.php <nl>@@ -58,10 +58,8 @@ class Kirki_Sections_Nested_Section extends WP_Customize_Section { <nl> $array['customizeAction'] = esc_attr__( 'Customizing', 'kirki' ); <nl> if ( $this->panel ) { <nl> - $array['customizeAction'] = sprintf( <nl> - esc_attr__( 'Customizing &#9656; %s', 'kirki' ), <nl> - esc_html( $this->manager->get_panel( $this->panel )->title ) <nl> - ); <nl> + /* translators: The title. */ <nl> + $array['customizeAction'] = sprintf( esc_attr__( 'Customizing &#9656; %s', 'kirki' ), esc_html( $this->manager->get_panel( $this->panel )->title ) ); <nl> } <nl> return $array; <nl> } <nl> ", "msg": "Add inline comment for translators."}
{"diff_id": 1715, "repo": "kirki-framework/kirki", "sha": "067e83cc235f1e849c2ca93d1172141c706143fd", "time": "13.05.2017 23:57:42", "diff": "mmm a / field/class-kirki-field-gradient.php <nl> ppp b / field/class-kirki-field-gradient.php <nl>@@ -71,22 +71,28 @@ class Kirki_Field_Gradient extends Kirki_Field { <nl> $value['start'] = ( ! isset( $value['start'] ) ) ? array() : $value['start']; <nl> $value['end'] = ( ! isset( $value['end'] ) ) ? array() : $value['end']; <nl> - // Sanitie colors. <nl> - $value['start']['color'] = ( ! isset( $value['start']['color'] ) ) ? '' : esc_attr( $value['start']['color'] ); <nl> - $value['end']['color'] = ( ! isset( $value['end']['color'] ) ) ? '' : esc_attr( $value['end']['color'] ); <nl> + foreach ( array( 'start', 'end' ) as $context ) { <nl> + <nl> + // Sanitize colors. <nl> + if ( ! isset( $value[ $context ]['color'] ) ) { <nl> + $value[ $context ]['color'] = ''; <nl> + } <nl> + $value[ $context ]['color'] = esc_attr( $value[ $context ]['color'] ); <nl> // Sanitize positions. <nl> - $value['start']['position'] = ( ! isset( $value['start']['position'] ) ) ? 0 : (int) $value['start']['position']; <nl> - $value['start']['position'] = ( 0 > $value['start']['position'] ) ? 0 : $value['start']['position']; <nl> - $value['start']['position'] = ( 100 < $value['start']['position'] ) ? 100 : $value['start']['position']; <nl> - $value['end']['position'] = ( ! isset( $value['end']['position'] ) ) ? 0 : (int) $value['end']['position']; <nl> - $value['end']['position'] = ( 0 > $value['end']['position'] ) ? 0 : $value['end']['position']; <nl> - $value['end']['position'] = ( 100 < $value['end']['position'] ) ? 100 : $value['end']['position']; <nl> + if ( ! isset( $value[ $context ]['position'] ) ) { <nl> + $value[ $context ]['position'] = 0; <nl> + }; <nl> + $value[ $context ]['position'] = (int) $value[ $context ]['position']; <nl> + $value[ $context ]['position'] = max( min( $value[ $context ]['position'], 100 ), 0 ); <nl> + } <nl> // Sanitize angle. <nl> - $value['angle'] = ( ! isset( $value['angle'] ) ) ? 0 : (int) $value['angle']; <nl> - $value['angle'] = ( -90 > $value['angle'] ) ? -90 : $value['angle']; <nl> - $value['angle'] = ( 90 < $value['angle'] ) ? 90 : $value['angle']; <nl> + if ( ! isset( $value['angle'] ) ) { <nl> + $value['angle'] = 0; <nl> + } <nl> + $value['angle'] = (int) $value['angle']; <nl> + $value['angle'] = max( min( $value['angle'], 90 ), -90 ) <nl> // Sanitize the type. <nl> $value['type'] = ( ! isset( $value['type'] ) || 'linear' !== $value['type'] || 'radial' !== $value['type'] ) ? 'linear' : $value['type']; <nl> ", "msg": "better sanitization function for gradient control"}
{"diff_id": 1717, "repo": "kirki-framework/kirki", "sha": "4cbe75e760b64d033b23392e262864368bba579d", "time": "14.05.2017 00:20:06", "diff": "mmm a / field/class-kirki-field-number.php <nl> ppp b / field/class-kirki-field-number.php <nl>@@ -45,29 +45,27 @@ class Kirki_Field_Number extends Kirki_Field { <nl> */ <nl> public function sanitize( $value = null ) { <nl> - $value = ( is_numeric( $value ) ) ? $value : intval( $value ); <nl> + // Make sure min, max & step are all numeric. <nl> + $min = ( isset( $this->choices['min'] ) && ! is_numeric( $this->choices['min'] ) ) ? filter_var( $this->choices['min'], FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_FRACTION ) : -999999999 <nl> + $max = ( isset( $this->choices['max'] ) && ! is_numeric( $this->choices['max'] ) ) ? filter_var( $this->choices['max'], FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_FRACTION ) : 999999999; <nl> + $step = ( isset( $this->choices['step'] ) && ! is_numeric( $this->choices['step'] ) ) ? filter_var( $this->choices['step'], FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_FRACTION ) : 1; <nl> + <nl> + if ( ! is_numeric( $value ) ) { <nl> + $value = filter_var( $value, FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_FRACTION ); <nl> + } <nl> // Minimum value limit. <nl> - if ( isset( $this->choices['min'] ) ) { <nl> - $min = ( is_numeric( $this->choices['min'] ) ) ? $this->choices['min'] : intval( $this->choices['min'] ); <nl> if ( $value < $min ) { <nl> - $value = $min; <nl> - } <nl> + return $min; <nl> } <nl> // Maximum value limit. <nl> - if ( isset( $this->choices['max'] ) ) { <nl> - $max = ( is_numeric( $this->choices['max'] ) ) ? $this->choices['max'] : intval( $this->choices['max'] ); <nl> if ( $value > $max ) { <nl> - $value = $max; <nl> - } <nl> + return $max; <nl> } <nl> // Step divider. <nl> if ( isset( $this->choices['min'] ) && isset( $this->choices['step'] ) ) { <nl> - $min = ( is_numeric( $this->choices['min'] ) ) ? $this->choices['min'] : intval( $this->choices['min'] ); <nl> - $max = ( is_numeric( $this->choices['max'] ) ) ? $this->choices['max'] : intval( $this->choices['max'] ); <nl> - $step = ( is_numeric( $this->choices['step'] ) ) ? $this->choices['step'] : intval( $this->choices['step'] ); <nl> $valid = range( $min, $max, $step ); <nl> $smallest = array(); <nl> ", "msg": "Better sanitization for number controls."}
{"diff_id": 1735, "repo": "kirki-framework/kirki", "sha": "c55376db0f13434760229540385aecefa3ff6024", "time": "27.05.2017 11:33:58", "diff": "mmm a / modules/postmessage/class-kirki-modules-postmessage.php <nl> ppp b / modules/postmessage/class-kirki-modules-postmessage.php <nl>@@ -77,8 +77,9 @@ class Kirki_Modules_PostMessage { <nl> foreach ( $args['js_vars'] as $key => $js_var ) { <nl> $js_var['index_key'] = $key; <nl> $func_name = 'script_var_' . str_replace( array( 'kirki-', '-' ), array( '', '_' ), $args['type'] ); <nl> - if ( method_exists( $this, $func_name ) ) { <nl> - $field['scripts'][ $key ] = call_user_func_array( array( $this, $func_name ), array( $js_var, $args ) ); <nl> + $callback = $this->get_callback( $args ); <nl> + if ( is_callable( $callback ) ) { <nl> + $field['scripts'][ $key ] = call_user_func_array( $callback, array( $js_var, $args ) ); <nl> continue; <nl> } <nl> $field['scripts'][ $key ] = $this->script_var( $js_var, $args ); <nl> @@ -198,18 +199,6 @@ class Kirki_Modules_PostMessage { <nl> ); <nl> } <nl> - /** <nl> - * Processes values for dimensions fields. <nl> - * <nl> - * @access protected <nl> - * @since 3.0.0 <nl> - * @param array $args The arguments for this js_var. <nl> - * @param array $field The whole field arguments. <nl> - */ <nl> - protected function script_var_dimensions( $args, $field ) { <nl> - return $this->script_var_array( $args, $field ); <nl> - } <nl> - <nl> /** <nl> * Sanitizes the arguments and makes sure they are all there. <nl> * <nl> @@ -268,4 +257,25 @@ class Kirki_Modules_PostMessage { <nl> $value_compiled = trim( $value_compiled, '+' ); <nl> return $script . $alias . '=\\'' . $value_compiled . '\\';'; <nl> } <nl> + <nl> + /** <nl> + * Get the callback function/method we're going to use for this field. <nl> + * <nl> + * @access private <nl> + * @since 3.0.0 <nl> + * @param array $args The field args. <nl> + * @return string|array A callable function or method. <nl> + */ <nl> + protected function get_callback( $args ) { <nl> + <nl> + switch ( $args['type'] ) { <nl> + case 'kirki-background': <nl> + case 'kirki-dimensions': <nl> + $callback = array( $this, 'script_var_array' ); <nl> + break; <nl> + default: <nl> + $callback = array( $this, 'script_var' ); <nl> + } <nl> + return $callback; <nl> + } <nl> } <nl> ", "msg": "better implementation to figure out the callback for fields"}
{"diff_id": 1762, "repo": "kirki-framework/kirki", "sha": "32c2544cf44b8008248d3e696b8264eefe9b1d34", "time": "31.05.2017 15:56:58", "diff": "mmm a / core/class-kirki-active-callback.php <nl> ppp b / core/class-kirki-active-callback.php <nl>@@ -37,9 +37,9 @@ class Kirki_Active_Callback { <nl> if ( isset( $field['required'] ) ) { <nl> foreach ( $field['required'] as $requirement ) { <nl> - // Handles \"AND\" functionality. <nl> - $show = self::evaluate_requirement( $object, $field, $requirement ); <nl> - // No need to process further if one requirement returns false. <nl> + $show = self::evaluate_requirement( $object, $field, $requirement, 'AND' ); <nl> + // The 1st level uses \"AND\" so no need to process further <nl> + // if one requirement returns false. <nl> if ( ! $show ) { <nl> return false; <nl> } <nl> @@ -58,9 +58,10 @@ class Kirki_Active_Callback { <nl> * @param WP_Customize_Setting $object The current field. <nl> * @param object $field The current object. <nl> * @param array $requirement A single requirement. <nl> + * @param string $relation Can be \"AND\" or \"OR\". <nl> * @return boolean <nl> */ <nl> - private static function evaluate_requirement( $object, $field, $requirement ) { <nl> + private static function evaluate_requirement( $object, $field, $requirement, $relation ) { <nl> // Test for callables first. <nl> if ( is_callable( $requirement ) ) { <nl> @@ -91,14 +92,17 @@ class Kirki_Active_Callback { <nl> return true; <nl> } <nl> - // Handles \"OR\" functionality. <nl> + // Handles \"OR/AND\" functionality & switching. <nl> $show = false; <nl> + $sub_relation = ( 'AND' === $relation ) ? 'OR' : 'AND'; <nl> foreach ( $requirement as $sub_requirement ) { <nl> - $show = self::evaluate_requirement( $object, $field, $sub_requirement ); <nl> - // No need to go on if one sub_requirement returns true. <nl> - if ( $show ) { <nl> + $show = self::evaluate_requirement( $object, $field, $sub_requirement, $sub_relation ); <nl> + if ( 'OR' === $sub_relation && $show ) { <nl> return true; <nl> } <nl> + if ( 'AND' === $sub_relation && ! $show ) { <nl> + return false; <nl> + } <nl> } <nl> return $show; <nl> } <nl> ", "msg": "Better handling for deeper nested conditions"}
{"diff_id": 1769, "repo": "kirki-framework/kirki", "sha": "06977cd685c0a121a5ea9785cd3f1a384d2f5374", "time": "02.06.2017 15:30:20", "diff": "mmm a / field/class-kirki-field-image-array.php <nl> ppp b / field/class-kirki-field-image-array.php <nl>@@ -48,7 +48,11 @@ class Kirki_Field_Image_Array extends Kirki_Field { <nl> */ <nl> public function sanitize( $value ) { <nl> - return $value; <nl> - <nl> + return array( <nl> + 'id' => ( isset( $value['id'] && '' !== $value['id'] ) ) ? (int) $value['id'] : '', <nl> + 'url' => ( isset( $value['url'] && '' !== $value['url'] ) ) ? esc_url_raw( $value['url'] ) : '', <nl> + 'width' => ( isset( $value['width'] && '' !== $value['width'] ) ) ? (int) $value['width'] : '', <nl> + 'height' => ( isset( $value['height'] && '' !== $value['height'] ) ) ? (int) $value['height'] : '', <nl> + ) <nl> } <nl> } <nl> ", "msg": "Sanitization for image-array control."}
{"diff_id": 1796, "repo": "kirki-framework/kirki", "sha": "e7ec0fe3e8a206baf53e5594415f1f43187340ee", "time": "05.07.2017 00:31:52", "diff": "mmm a / core/class-kirki-util.php <nl> ppp b / core/class-kirki-util.php <nl>@@ -177,18 +177,12 @@ class Kirki_Util { <nl> * @return array <nl> */ <nl> public function http_request( $r = array(), $url = '' ) { <nl> - // Early exit if not a request to wordpress.org. <nl> - if ( false === strpos( $url, 'wordpress.org' ) ) { <nl> - return $r; <nl> - } <nl> - // Early exit if Kirki is installed as a plugin. <nl> - if ( self::is_plugin() ) { <nl> - return $r; <nl> - } <nl> - // Early exit if we don't have everything we need. <nl> - if ( ! isset( $r['body'] ) || ! isset( $r['body']['plugins'] ) || ! isset( $r['body']['translations'] ) || ! isset( $r['body']['locale'] ) || ! isset( $r['body']['all'] ) ) { <nl> + // Early exit if installed as a plugin or not a request to wordpress.org, <nl> + // or finally if we don't have everything we need. <nl> + if ( self::is_plugin() || false === strpos( $url, 'wordpress.org' ) || ( ! isset( $r['body'] ) || ! isset( $r['body']['plugins'] ) || ! isset( $r['body']['translations'] ) || ! isset( $r['body']['locale'] ) || ! isset( $r['body']['all'] ) ) ) { <nl> return $r; <nl> } <nl> + <nl> // Inject data. <nl> $plugins = json_decode( $r['body']['plugins'], true ); <nl> if ( isset( $plugins['plugins'] ) ) { <nl> ", "msg": "reduce complexity by combining conditions"}
{"diff_id": 1797, "repo": "kirki-framework/kirki", "sha": "eda9c6318133c67f30ff36069562d59815868c41", "time": "05.07.2017 11:30:48", "diff": "mmm a / modules/postmessage/class-kirki-modules-postmessage.php <nl> ppp b / modules/postmessage/class-kirki-modules-postmessage.php <nl>@@ -107,6 +107,14 @@ class Kirki_Modules_PostMessage { <nl> // Loop through the js_vars and generate the script. <nl> foreach ( $args['js_vars'] as $key => $js_var ) { <nl> + // Skip styles if \"exclude\" is defined and value is excluded. <nl> + if ( isset( $js_var['exclude'] ) ) { <nl> + $js_var['exclude'] = (array) $js_var['exclude']; <nl> + $script .= 'exclude=false;'; <nl> + foreach ( $js_var['exclude'] as $exclussion ) { <nl> + $script .= \"if(newval=={$exclussion}){exclude=true;}\"; <nl> + } <nl> + } <nl> if ( isset( $js_var['element'] ) ) { <nl> // Array to string. <nl> if ( is_array( $js_var['element'] ) ) { <nl> @@ -135,8 +143,14 @@ class Kirki_Modules_PostMessage { <nl> $combo_css_script .= ( 'css' !== $combo_css_script ) ? $script_array['css'] : ''; <nl> } <nl> $text = ( 'css' === $combo_css_script ) ? 'css' : '\\'' . $combo_css_script . '\\''; <nl> - $script .= $combo_extra_script . 'jQuery(\\'#' . $style_id . '\\').text(' . $text . ');'; <nl> - $script .= 'jQuery(\\'#' . $style_id . '\\').appendTo(\\'head\\');'; <nl> + <nl> + $script .= $combo_extra_script; <nl> + $script .= \"var cssContent={$text};\"; <nl> + if ( isset( $js_var['exclude'] ) ) { <nl> + $script .= 'if(true===exclude){cssContent=\"\";}'; <nl> + } <nl> + $script .= \"jQuery('#{$style_id}').text(cssContent);\"; <nl> + $script .= \"jQuery('#{$style_id}').appendTo('head');\"; <nl> $script .= '});});'; <nl> return $script; <nl> } <nl> @@ -150,10 +164,10 @@ class Kirki_Modules_PostMessage { <nl> */ <nl> protected function script_html_var( $args ) { <nl> - $script = ( isset( $args['choice'] ) ) ? 'newval=newval[\\'' . $args['choice'] . '\\'];' : ''; <nl> - $script .= 'jQuery(\\'' . $args['element'] . '\\').html(newval);'; <nl> + $script = ( isset( $args['choice'] ) ) ? \"newval=newval['{$args['choice']}'];\" : ''; <nl> + $script .= \"jQuery('{$args['element']}').html(newval);\"; <nl> if ( isset( $args['attr'] ) ) { <nl> - $script = 'jQuery(\\'' . $args['element'] . '\\').attr(\\'' . $args['attr'] . '\\',newval);'; <nl> + $script = \"jQuery('{$args['element']}').attr('{$args['attr']}',newval);\"; <nl> } <nl> return $script; <nl> } <nl> ", "msg": "bugfix for exclude in postMessage."}
{"diff_id": 1800, "repo": "kirki-framework/kirki", "sha": "cd66b7a6dfffd0d6d7fba7a0959a7dacfe5c5323", "time": "06.07.2017 01:22:12", "diff": "mmm a / field/class-kirki-field-typography.php <nl> ppp b / field/class-kirki-field-typography.php <nl>@@ -138,22 +138,20 @@ class Kirki_Field_Typography extends Kirki_Field { <nl> $value['font-family'] = esc_attr( $val ); <nl> break; <nl> case 'font-weight': <nl> - if ( ! isset( $value['variant'] ) ) { <nl> + if ( isset( $value['variant'] ) ) { <nl> + break; <nl> + } <nl> $value['variant'] = $val; <nl> if ( isset( $value['font-style'] ) && 'italic' === $value['font-style'] ) { <nl> $value['variant'] = ( '400' !== $val || 400 !== $val ) ? $value['variant'] . 'italic' : 'italic'; <nl> } <nl> - } <nl> break; <nl> case 'variant': <nl> // Use 'regular' instead of 400 for font-variant. <nl> $value['variant'] = ( 400 === $val || '400' === $val ) ? 'regular' : $val; <nl> // Get font-weight from variant. <nl> $value['font-weight'] = filter_var( $value['variant'], FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_FRACTION ); <nl> - $value['font-weight'] = absint( $value['font-weight'] ); <nl> - if ( 'regular' === $value['variant'] || 'italic' === $value['variant'] ) { <nl> - $value['font-weight'] = 400; <nl> - } <nl> + $value['font-weight'] = ( 'regular' === $value['variant'] || 'italic' === $value['variant'] ) ? 400 : absint( $value['font-weight'] ); <nl> // Get font-style from variant. <nl> if ( ! isset( $value['font-style'] ) ) { <nl> $value['font-style'] = ( false === strpos( $value['variant'], 'italic' ) ) ? 'normal' : 'italic'; <nl> @@ -169,14 +167,13 @@ class Kirki_Field_Typography extends Kirki_Field { <nl> // Make sure we're using a valid subset. <nl> $valid_subsets = Kirki_Fonts::get_google_font_subsets(); <nl> $subsets_ok = array(); <nl> - if ( is_array( $value['subsets'] ) ) { <nl> + $value['subsets'] = (array) $value['subsets']; <nl> foreach ( $value['subsets'] as $subset ) { <nl> if ( array_key_exists( $subset, $valid_subsets ) ) { <nl> $subsets_ok[] = $subset; <nl> } <nl> } <nl> $value['subsets'] = $subsets_ok; <nl> - } <nl> break; <nl> case 'font-size': <nl> case 'letter-spacing': <nl> ", "msg": "further reduce sanitization cyclomatic complexity for typography fields"}
{"diff_id": 1804, "repo": "kirki-framework/kirki", "sha": "7928a6af5ad77d29dd3858ab7fb7fee3d24b4c89", "time": "08.07.2017 17:38:34", "diff": "mmm a / core/class-kirki.php <nl> ppp b / core/class-kirki.php <nl>@@ -176,6 +176,10 @@ class Kirki extends Kirki_Init { <nl> */ <nl> public static function add_field( $config_id, $args ) { <nl> + if ( doing_action( 'customize_register' ) ) { <nl> + _doing_it_wrong( __METHOD__, esc_attr__( 'Kirki fields should not be added on customize_register. Please add them directly, or on init.', 'kirki' ), '3.1' ); <nl> + } <nl> + <nl> if ( isset( $args['type'] ) ) { <nl> $str = str_replace( array( '-', '_' ), ' ', $args['type'] ); <nl> $classname = 'Kirki_Field_' . str_replace( ' ', '_', ucwords( $str ) ); <nl> ", "msg": "Add error message when fields are added on customize_register."}
{"diff_id": 1873, "repo": "kirki-framework/kirki", "sha": "29c548a3492e22a89a71c555a923383729c7379f", "time": "16.11.2017 13:23:43", "diff": "mmm a / example.php <nl> ppp b / example.php <nl>@@ -25,21 +25,25 @@ if ( ! class_exists( 'Kirki' ) ) { <nl> * <nl> * @link https://aristath.github.io/kirki/docs/getting-started/config.html <nl> */ <nl> -Kirki::add_config( 'kirki_demo', array( <nl> +Kirki::add_config( <nl> + 'kirki_demo', array( <nl> 'capability' => 'edit_theme_options', <nl> 'option_type' => 'theme_mod', <nl> -) ); <nl> + ) <nl> +); <nl> /** <nl> * Add a panel. <nl> * <nl> * @link https://aristath.github.io/kirki/docs/getting-started/panels.html <nl> */ <nl> -Kirki::add_panel( 'kirki_demo_panel', array( <nl> +Kirki::add_panel( <nl> + 'kirki_demo_panel', array( <nl> 'priority' => 10, <nl> 'title' => esc_attr__( 'Kirki Demo Panel', 'kirki' ), <nl> 'description' => esc_attr__( 'Contains sections for all kirki controls.', 'kirki' ), <nl> -) ); <nl> + ) <nl> +); <nl> /** <nl> * Add Sections. <nl> @@ -81,11 +85,22 @@ $sections = array( <nl> 'typography' => array( esc_attr__( 'Typography', 'kirki' ), '' ), <nl> ); <nl> foreach ( $sections as $section_id => $section ) { <nl> - Kirki::add_section( str_replace( '-', '_', $section_id ) . '_section', array( <nl> + Kirki::add_section( <nl> + str_replace( '-', '_', $section_id ) . '_section', array( <nl> 'title' => $section[0], <nl> 'description' => $section[1], <nl> 'panel' => 'kirki_demo_panel', <nl> - ) ); <nl> + ) <nl> + ); <nl> +} <nl> + <nl> +/** <nl> + * A proxy function. Automatically passes-on the config-id. <nl> + * <nl> + * @param array $args The field arguments. <nl> + */ <nl> +function my_config_kirki_add_field( $args ) { <nl> + Kirki::add_field( 'kirki_demo', $args ); <nl> } <nl> /** <nl> @@ -93,7 +108,7 @@ foreach ( $sections as $section_id => $section ) { <nl> * <nl> * @todo Triggers change on load. <nl> */ <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'background', <nl> 'settings' => 'background_setting', <nl> 'label' => esc_attr__( 'Background Control', 'kirki' ), <nl> @@ -107,14 +122,14 @@ Kirki::add_field( 'kirki_demo', array( <nl> 'background-size' => 'cover', <nl> 'background-attachment' => 'scroll', <nl> ), <nl> -) ); <nl> +); <nl> /** <nl> * Code control. <nl> * <nl> * @link https://aristath.github.io/kirki/docs/controls/code.html <nl> */ <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'code', <nl> 'settings' => 'code_setting', <nl> 'label' => esc_attr__( 'Code Control', 'kirki' ), <nl> @@ -125,37 +140,37 @@ Kirki::add_field( 'kirki_demo', array( <nl> 'language' => 'css', <nl> 'theme' => 'monokai', <nl> ), <nl> -) ); <nl> +); <nl> /** <nl> * Checkbox control. <nl> * <nl> * @link https://aristath.github.io/kirki/docs/controls/checkbox.html <nl> */ <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'checkbox', <nl> 'settings' => 'checkbox_setting', <nl> 'label' => esc_attr__( 'Checkbox Control', 'kirki' ), <nl> 'description' => esc_attr__( 'Description', 'kirki' ), <nl> 'section' => 'checkbox_section', <nl> 'default' => true, <nl> -) ); <nl> +); <nl> /** <nl> * Color Controls. <nl> * <nl> * @link https://aristath.github.io/kirki/docs/controls/color.html <nl> */ <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'color', <nl> 'settings' => 'color_setting_hex', <nl> 'label' => __( 'Color Control (hex-only)', 'kirki' ), <nl> 'description' => esc_attr__( 'This is a color control - without alpha channel.', 'kirki' ), <nl> 'section' => 'color_section', <nl> - 'default' => '#0088CC', <nl> -) ); <nl> + 'default' => '#0008DC', <nl> +); <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'color', <nl> 'settings' => 'color_setting_rgba', <nl> 'label' => __( 'Color Control (with alpha channel)', 'kirki' ), <nl> @@ -165,57 +180,57 @@ Kirki::add_field( 'kirki_demo', array( <nl> 'choices' => array( <nl> 'alpha' => true, <nl> ), <nl> -) ); <nl> +); <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'color', <nl> 'settings' => 'color_setting_hue', <nl> 'label' => __( 'Color Control - hue only.', 'kirki' ), <nl> 'description' => esc_attr__( 'This is a color control - hue only.', 'kirki' ), <nl> 'section' => 'color_section', <nl> - 'default' => '#0088CC', <nl> + 'default' => 160, <nl> 'mode' => 'hue', <nl> -) ); <nl> +); <nl> /** <nl> * DateTime Control. <nl> */ <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'date', <nl> 'settings' => 'date_setting', <nl> 'label' => esc_attr__( 'Date Control', 'kirki' ), <nl> 'description' => esc_attr__( 'This is a date control.', 'kirki' ), <nl> 'section' => 'date_section', <nl> 'default' => '', <nl> -) ); <nl> +); <nl> /** <nl> * Editor Controls <nl> */ <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'editor', <nl> 'settings' => 'editor_1', <nl> 'label' => esc_attr__( 'First Editor Control', 'kirki' ), <nl> 'description' => esc_attr__( 'This is an editor control.', 'kirki' ), <nl> 'section' => 'editor_section', <nl> 'default' => '', <nl> -) ); <nl> +); <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'editor', <nl> 'settings' => 'editor_2', <nl> 'label' => esc_attr__( 'Second Editor Control', 'kirki' ), <nl> 'description' => esc_attr__( 'This is a 2nd editor control just to check that we do not have issues with multiple instances.', 'kirki' ), <nl> 'section' => 'editor_section', <nl> 'default' => esc_attr__( 'Default Text', 'kirki' ), <nl> -) ); <nl> +); <nl> /** <nl> * Color-Palette Controls. <nl> * <nl> * @link https://aristath.github.io/kirki/docs/controls/color-palette.html <nl> */ <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'color-palette', <nl> 'settings' => 'color_palette_setting_0', <nl> 'label' => esc_attr__( 'Color-Palette', 'kirki' ), <nl> @@ -226,9 +241,9 @@ Kirki::add_field( 'kirki_demo', array( <nl> 'colors' => array( '#000000', '#222222', '#444444', '#666666', '#888888', '#aaaaaa', '#cccccc', '#eeeeee', '#ffffff' ), <nl> 'style' => 'round', <nl> ), <nl> -) ); <nl> +); <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'color-palette', <nl> 'settings' => 'color_palette_setting_4', <nl> 'label' => esc_attr__( 'Color-Palette', 'kirki' ), <nl> @@ -239,9 +254,9 @@ Kirki::add_field( 'kirki_demo', array( <nl> 'colors' => Kirki_Helper::get_material_design_colors( 'all' ), <nl> 'size' => 17, <nl> ), <nl> -) ); <nl> +); <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'color-palette', <nl> 'settings' => 'color_palette_setting_1', <nl> 'label' => esc_attr__( 'Color-Palette', 'kirki' ), <nl> @@ -252,9 +267,9 @@ Kirki::add_field( 'kirki_demo', array( <nl> 'colors' => Kirki_Helper::get_material_design_colors( 'primary' ), <nl> 'size' => 25, <nl> ), <nl> -) ); <nl> +); <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'color-palette', <nl> 'settings' => 'color_palette_setting_2', <nl> 'label' => esc_attr__( 'Color-Palette', 'kirki' ), <nl> @@ -265,9 +280,9 @@ Kirki::add_field( 'kirki_demo', array( <nl> 'colors' => Kirki_Helper::get_material_design_colors( 'red' ), <nl> 'size' => 16, <nl> ), <nl> -) ); <nl> +); <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'color-palette', <nl> 'settings' => 'color_palette_setting_3', <nl> 'label' => esc_attr__( 'Color-Palette', 'kirki' ), <nl> @@ -279,14 +294,14 @@ Kirki::add_field( 'kirki_demo', array( <nl> 'size' => 60, <nl> 'style' => 'round', <nl> ), <nl> -) ); <nl> +); <nl> /** <nl> * Dashicons control. <nl> * <nl> * @link https://aristath.github.io/kirki/docs/controls/dashicons.html <nl> */ <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'dashicons', <nl> 'settings' => 'dashicons_setting_0', <nl> 'label' => esc_attr__( 'Dashicons Control', 'kirki' ), <nl> @@ -302,33 +317,33 @@ Kirki::add_field( 'kirki_demo', array( <nl> 'admin-links', <nl> 'admin-page', <nl> ), <nl> -) ); <nl> +); <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'dashicons', <nl> 'settings' => 'dashicons_setting_1', <nl> 'label' => esc_attr__( 'All Dashicons', 'kirki' ), <nl> 'description' => esc_attr__( 'Showing all dashicons', 'kirki' ), <nl> 'section' => 'dashicons_section', <nl> 'default' => 'menu', <nl> -) ); <nl> +); <nl> /** <nl> * Dimension Control. <nl> */ <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'dimension', <nl> 'settings' => 'dimension_0', <nl> 'label' => esc_attr__( 'Dimension Control', 'kirki' ), <nl> 'description' => esc_attr__( 'Description Here.', 'kirki' ), <nl> 'section' => 'dimension_section', <nl> 'default' => '10px', <nl> -) ); <nl> +); <nl> /** <nl> * Dimensions Control. <nl> */ <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'dimensions', <nl> 'settings' => 'dimensions_0', <nl> 'label' => esc_attr__( 'Dimension Control', 'kirki' ), <nl> @@ -338,9 +353,9 @@ Kirki::add_field( 'kirki_demo', array( <nl> 'width' => '100px', <nl> 'height' => '100px', <nl> ), <nl> -) ); <nl> +); <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'dimensions', <nl> 'settings' => 'dimensions_1', <nl> 'label' => esc_attr__( 'Dimension Control', 'kirki' ), <nl> @@ -352,42 +367,42 @@ Kirki::add_field( 'kirki_demo', array( <nl> 'padding-left' => '1vh', <nl> 'padding-right' => '10px', <nl> ), <nl> -) ); <nl> +); <nl> /** <nl> * Font-Awesome Control. <nl> */ <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'fontawesome', <nl> 'settings' => 'fontawesome_setting', <nl> 'label' => esc_attr__( 'Font Awesome Control', 'kirki' ), <nl> 'description' => esc_attr__( 'Description Here.', 'kirki' ), <nl> 'section' => 'fontawesome_section', <nl> 'default' => 'bath', <nl> -) ); <nl> +); <nl> /** <nl> * Generic Controls. <nl> */ <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'text', <nl> 'settings' => 'generic_text_setting', <nl> 'label' => esc_attr__( 'Text Control', 'kirki' ), <nl> 'description' => esc_attr__( 'Description', 'kirki' ), <nl> 'section' => 'generic_section', <nl> 'default' => '', <nl> -) ); <nl> +); <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'textarea', <nl> 'settings' => 'generic_textarea_setting', <nl> 'label' => esc_attr__( 'Textarea Control', 'kirki' ), <nl> 'description' => esc_attr__( 'Description', 'kirki' ), <nl> 'section' => 'generic_section', <nl> 'default' => '', <nl> -) ); <nl> +); <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'generic', <nl> 'settings' => 'generic_custom_setting', <nl> 'label' => esc_attr__( 'Custom input Control.', 'kirki' ), <nl> @@ -400,21 +415,21 @@ Kirki::add_field( 'kirki_demo', array( <nl> 'style' => 'background-color:black;color:red;', <nl> 'data-foo' => 'bar', <nl> ), <nl> -) ); <nl> +); <nl> /** <nl> * Image Control. <nl> */ <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'image', <nl> 'settings' => 'image_setting_url', <nl> 'label' => esc_attr__( 'Image Control (URL)', 'kirki' ), <nl> 'description' => esc_attr__( 'Description Here.', 'kirki' ), <nl> 'section' => 'image_section', <nl> 'default' => '', <nl> -) ); <nl> +); <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'image', <nl> 'settings' => 'image_setting_id', <nl> 'label' => esc_attr__( 'Image Control (ID)', 'kirki' ), <nl> @@ -424,9 +439,9 @@ Kirki::add_field( 'kirki_demo', array( <nl> 'choices' => array( <nl> 'save_as' => 'id', <nl> ), <nl> -) ); <nl> +); <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'image', <nl> 'settings' => 'image_setting_array', <nl> 'label' => esc_attr__( 'Image Control (array)', 'kirki' ), <nl> @@ -436,12 +451,12 @@ Kirki::add_field( 'kirki_demo', array( <nl> 'choices' => array( <nl> 'save_as' => 'array', <nl> ), <nl> -) ); <nl> +); <nl> /** <nl> * Multicheck Control. <nl> */ <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'multicheck', <nl> 'settings' => 'multicheck_setting', <nl> 'label' => esc_attr__( 'Multickeck Control', 'kirki' ), <nl> @@ -455,12 +470,12 @@ Kirki::add_field( 'kirki_demo', array( <nl> 'option-4' => esc_attr__( 'Option 4', 'kirki' ), <nl> 'option-5' => esc_attr__( 'Option 5', 'kirki' ), <nl> ), <nl> -) ); <nl> +); <nl> /** <nl> * Multicolor Control. <nl> */ <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'multicolor', <nl> 'settings' => 'multicolor_setting', <nl> 'label' => esc_attr__( 'Label', 'kirki' ), <nl> @@ -476,12 +491,12 @@ Kirki::add_field( 'kirki_demo', array( <nl> 'hover' => '#00aaff', <nl> 'active' => '#00ffff', <nl> ), <nl> -) ); <nl> +); <nl> /** <nl> * Number Control. <nl> */ <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'number', <nl> 'settings' => 'number_setting', <nl> 'label' => esc_attr__( 'Label', 'kirki' ), <nl> @@ -492,12 +507,12 @@ Kirki::add_field( 'kirki_demo', array( <nl> 'max' => 5, <nl> 'step' => 1, <nl> ), <nl> -) ); <nl> +); <nl> /** <nl> * Palette Control. <nl> */ <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'palette', <nl> 'settings' => 'palette_setting', <nl> 'label' => esc_attr__( 'Label', 'kirki' ), <nl> @@ -509,12 +524,12 @@ Kirki::add_field( 'kirki_demo', array( <nl> 'green' => array( '#E8F5E9', '#C8E6C9', '#A5D6A7', '#81C784', '#66BB6A', '#4CAF50', '#43A047', '#388E3C', '#2E7D32', '#1B5E20', '#B9F6CA', '#69F0AE', '#00E676', '#00C853' ), <nl> 'bnw' => array( '#000000', '#ffffff' ), <nl> ), <nl> -) ); <nl> +); <nl> /** <nl> * Radio Control. <nl> */ <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'radio', <nl> 'settings' => 'radio_setting', <nl> 'label' => esc_attr__( 'Radio Control', 'kirki' ), <nl> @@ -528,12 +543,12 @@ Kirki::add_field( 'kirki_demo', array( <nl> 'option-4' => esc_attr__( 'Option 4', 'kirki' ), <nl> 'option-5' => esc_attr__( 'Option 5', 'kirki' ), <nl> ), <nl> -) ); <nl> +); <nl> /** <nl> * Radio-Buttonset Control. <nl> */ <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'radio-buttonset', <nl> 'settings' => 'radio_buttonset_setting', <nl> 'label' => esc_attr__( 'Radio-Buttonset Control', 'kirki' ), <nl> @@ -545,12 +560,12 @@ Kirki::add_field( 'kirki_demo', array( <nl> 'option-2' => esc_attr__( 'Option 2', 'kirki' ), <nl> 'option-3' => esc_attr__( 'Option 3', 'kirki' ), <nl> ), <nl> -) ); <nl> +); <nl> /** <nl> * Radio-Image Control. <nl> */ <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'radio-image', <nl> 'settings' => 'radio_image_setting', <nl> 'label' => esc_attr__( 'Radio-Image Control', 'kirki' ), <nl> @@ -562,12 +577,12 @@ Kirki::add_field( 'kirki_demo', array( <nl> 'cossack' => 'https://raw.githubusercontent.com/templatemonster/cossack-wapuula/master/cossack-wapuula.png', <nl> 'travel' => 'https://jawordpressorg.github.io/wapuu/wapuu-archive/wapuu-travel.png', <nl> ), <nl> -) ); <nl> +); <nl> /** <nl> * Select Control. <nl> */ <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'select', <nl> 'settings' => 'select_setting', <nl> 'label' => esc_attr__( 'Select Control', 'kirki' ), <nl> @@ -581,12 +596,12 @@ Kirki::add_field( 'kirki_demo', array( <nl> 'option-4' => esc_attr__( 'Option 4', 'kirki' ), <nl> 'option-5' => esc_attr__( 'Option 5', 'kirki' ), <nl> ), <nl> -) ); <nl> +); <nl> /** <nl> * Slider Control. <nl> */ <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'slider', <nl> 'settings' => 'slider_setting', <nl> 'label' => esc_attr__( 'Slider Control', 'kirki' ), <nl> @@ -599,12 +614,12 @@ Kirki::add_field( 'kirki_demo', array( <nl> 'step' => 1, <nl> 'suffix' => 'px', <nl> ), <nl> -) ); <nl> +); <nl> /** <nl> * Sortable control. <nl> */ <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'sortable', <nl> 'settings' => 'sortable_setting', <nl> 'label' => __( 'This is a sortable control.', 'kirki' ), <nl> @@ -618,36 +633,36 @@ Kirki::add_field( 'kirki_demo', array( <nl> 'option5' => esc_attr__( 'Option 5', 'kirki' ), <nl> 'option6' => esc_attr__( 'Option 6', 'kirki' ), <nl> ), <nl> -) ); <nl> +); <nl> /** <nl> * Switch control. <nl> */ <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'switch', <nl> 'settings' => 'switch_setting', <nl> 'label' => esc_attr__( 'Switch Control', 'kirki' ), <nl> 'description' => esc_attr__( 'Description', 'kirki' ), <nl> 'section' => 'switch_section', <nl> 'default' => true, <nl> -) ); <nl> +); <nl> /** <nl> * Toggle control. <nl> */ <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'toggle', <nl> 'settings' => 'toggle_setting', <nl> 'label' => esc_attr__( 'Toggle Control', 'kirki' ), <nl> 'description' => esc_attr__( 'Description', 'kirki' ), <nl> 'section' => 'toggle_section', <nl> 'default' => true, <nl> -) ); <nl> +); <nl> /** <nl> * Typography Control. <nl> */ <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'typography', <nl> 'settings' => 'typography_setting_0', <nl> 'label' => esc_attr__( 'Typography Control Label', 'kirki' ), <nl> @@ -665,9 +680,9 @@ Kirki::add_field( 'kirki_demo', array( <nl> 'text-align' => 'left', <nl> ), <nl> 'priority' => 10, <nl> -) ); <nl> +); <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'typography', <nl> 'settings' => 'typography_setting_1', <nl> 'label' => esc_attr__( 'Typography Control Label', 'kirki' ), <nl> @@ -676,9 +691,9 @@ Kirki::add_field( 'kirki_demo', array( <nl> 'default' => array( <nl> 'font-family' => 'Roboto', <nl> ), <nl> -) ); <nl> +); <nl> -Kirki::add_field( 'kirki_demo', array( <nl> +my_config_kirki_add_field( array( <nl> 'type' => 'typography', <nl> 'settings' => 'typography_setting_2', <nl> 'label' => esc_attr__( 'Typography Control Label', 'kirki' ), <nl> @@ -690,4 +705,4 @@ Kirki::add_field( 'kirki_demo', array( <nl> 'letter-spacing' => '0', <nl> 'color' => '#333333', <nl> ), <nl> -) ); <nl> +); <nl> ", "msg": "added a proxy function for add_field in the example"}
{"diff_id": 1878, "repo": "kirki-framework/kirki", "sha": "9b9fd818ac1d528e0789754ef4b39d25aa1f0433", "time": "20.11.2017 22:21:17", "diff": "mmm a / modules/webfonts/class-kirki-fonts-google.php <nl> ppp b / modules/webfonts/class-kirki-fonts-google.php <nl>@@ -80,6 +80,9 @@ final class Kirki_Fonts_Google { <nl> return; <nl> } <nl> + add_action( 'wp_ajax_kirki_fonts_google_all_get', array( $this, 'get_googlefonts_json' ) ); <nl> + add_action( 'wp_ajax_noprinv_kirki_fonts_google_all_get', array( $this, 'get_googlefonts_json' ) ); <nl> + <nl> // Populate the array of google fonts. <nl> $this->google_fonts = Kirki_Fonts::get_google_fonts(); <nl> @@ -252,4 +255,15 @@ final class Kirki_Fonts_Google { <nl> } <nl> $this->subsets = $valid_subsets; <nl> } <nl> + <nl> + /** <nl> + * Gets the googlefonts JSON file. <nl> + * <nl> + * @since 3.0.17 <nl> + * @return string <nl> + */ <nl> + public function get_googlefonts_json() { <nl> + echo file_get_contents( wp_normalize_path( dirname( __FILE__ ) . '/webfonts.json' ) ); // WPCS: XSS ok. <nl> + exit(); <nl> + } <nl> } <nl> ", "msg": "Add ajax callback to get googlefonts"}
{"diff_id": 1879, "repo": "kirki-framework/kirki", "sha": "73feb16e7ad7778f6964135bad34a1bd154a963e", "time": "22.11.2017 19:06:38", "diff": "mmm a / None <nl> ppp b / controls/class-kirki-controls.php <nl>+<?php <nl> +/** <nl> + * Customizer Controls Init. <nl> + * <nl> + * @package Kirki <nl> + * @subpackage Controls <nl> + * @copyright Copyright (c) 2017, Aristeides Stathopoulos <nl> + * @license http://opensource.org/licenses/https://opensource.org/licenses/MIT <nl> + * @since 3.0.17 <nl> + */ <nl> + <nl> +/** <nl> + * Controls. <nl> + */ <nl> +class Kirki_Controls { <nl> + <nl> + /** <nl> + * An array of templates to load. <nl> + * <nl> + * @access private <nl> + * @since 3.0.17 <nl> + * @var array <nl> + */ <nl> + private $templates = array( <nl> + 'input-radio', <nl> + ); <nl> + <nl> + /** <nl> + * Path to controls views. <nl> + * <nl> + * @access private <nl> + * @since 3.0.17 <nl> + * @var string <nl> + */ <nl> + private $views_path; <nl> + <nl> + /** <nl> + * Constructor. <nl> + * <nl> + * @access public <nl> + * @since 3.0.17 <nl> + */ <nl> + public function __construct() { <nl> + <nl> + if ( ! $this->views_path ) { <nl> + $this->views_path = wp_normalize_path( dirname( KIRKI_PLUGIN_FILE ) . '/controls/views/' ); <nl> + } <nl> + add_action( 'customize_controls_print_footer_scripts', array( $this, 'underscore_templates' ) ); <nl> + } <nl> + <nl> + /** <nl> + * Adds underscore.js templates to the footer. <nl> + * <nl> + * @access public <nl> + * @since 3.0.17 <nl> + * @return void <nl> + */ <nl> + public function underscore_templates() { <nl> + foreach ( $this->templates as $template ) { <nl> + if ( file_exists( $this->views_path . $template . '.php' ) ) { <nl> + echo '<script type=\"text/html\" id=\"tmpl-kirki-' . esc_attr( $template ) . '\">'; <nl> + include $this->views_path . $template . '.php'; <nl> + echo '</script>'; <nl> + } <nl> + } <nl> + } <nl> +} <nl> ", "msg": "Add a Kirki_Controls class to load underscore.js templates"}
{"diff_id": 1885, "repo": "kirki-framework/kirki", "sha": "20d9794bf6d2bfddde3bcc21e20dd71a51208b04", "time": "27.11.2017 00:19:32", "diff": "mmm a / field/class-kirki-field-dimension.php <nl> ppp b / field/class-kirki-field-dimension.php <nl>@@ -24,4 +24,15 @@ class Kirki_Field_Dimension extends Kirki_Field { <nl> $this->type = 'kirki-dimension'; <nl> } <nl> + <nl> + /** <nl> + * Sanitizes the value. <nl> + * <nl> + * @access public <nl> + * @param string $value The value. <nl> + * @return string <nl> + */ <nl> + public function sanitize( $value ) { <nl> + return Kirki_Sanitize_Values::css_dimension( $value ); <nl> + } <nl> } <nl> ", "msg": "Add sanitization for dimension control."}
{"diff_id": 1890, "repo": "kirki-framework/kirki", "sha": "3cab81ced70b2fe38a99a068e9c0cd874c8ca437", "time": "02.12.2017 17:28:49", "diff": "mmm a / core/deprecated.php <nl> ppp b / core/deprecated.php <nl>@@ -66,3 +66,21 @@ if ( ! function_exists( 'Kirki' ) ) { <nl> return kirki(); <nl> } <nl> } <nl> + <nl> +if ( ! class_exists( 'Kirki_Active_Callback' ) ) { <nl> + // Removed in https://github.com/aristath/kirki/pull/1682/files <nl> + class Kirki_Active_Callback { <nl> + public static function evaluate() { <nl> + _deprecated_function( __METHOD__, '3.0.17', null ); <nl> + return true; <nl> + } <nl> + private static function evaluate_requirement() { <nl> + _deprecated_function( __METHOD__, '3.0.17', null ); <nl> + return true; <nl> + } <nl> + public static function compare() { <nl> + _deprecated_function( __METHOD__, '3.0.17', null ); <nl> + return true; <nl> + } <nl> + } <nl> +} <nl> ", "msg": "Add Kirki_Active_Callback to deprecated file."}
{"diff_id": 1905, "repo": "kirki-framework/kirki", "sha": "f99c7d27eb84526debc4b6a061945a309015646b", "time": "16.12.2017 16:08:14", "diff": "mmm a / controls/views/select.php <nl> ppp b / controls/views/select.php <nl>@@ -29,6 +29,9 @@ if ( 1 < data.multiple && data.value && _.isString( data.value ) ) { <nl> data-multiple=\"{{ data.multiple }}\" multiple=\"multiple\" <nl> <# } #> <nl> > <nl> + <# if ( data.placeholder ) { #> <nl> + <option value=\"\"<# if ( '' === data.value ) { #> selected<# } #>></option> <nl> + <# } #> <nl> <# _.each( data.choices, function( optionLabel, optionKey ) { #> <nl> <# <nl> selected = ( data.value === optionKey ); <nl> ", "msg": "Add empty option if using a placeholder"}
{"diff_id": 1919, "repo": "kirki-framework/kirki", "sha": "0edc07ce14e2cb5e30f6d1a02ee398193fe69f68", "time": "18.03.2018 14:12:52", "diff": "mmm a / controls/php/class-kirki-control-repeater.php <nl> ppp b / controls/php/class-kirki-control-repeater.php <nl>@@ -346,6 +346,10 @@ class Kirki_Control_Repeater extends Kirki_Control_Base { <nl> <# } else if ( 'color' === field.type ) { #> <nl> + <label> <nl> + <# if ( field.label ) { #><span class=\"customize-control-title\">{{{ field.label }}}</span><# } #> <nl> + <# if ( field.description ) { #><span class=\"description customize-control-description\">{{{ field.description }}}</span><# } #> <nl> + </label> <nl> <# var defaultValue = ''; <nl> if ( field.default ) { <nl> if ( -1 === field.default.indexOf( 'rgba' ) ) { <nl> @@ -355,13 +359,8 @@ class Kirki_Control_Repeater extends Kirki_Control_Base { <nl> defaultValue = ' data-default-color=\"' + defaultValue + '\" data-alpha=\"true\"'; <nl> } <nl> } #> <nl> - <label> <nl> - <# if ( field.label ) { #><span class=\"customize-control-title\">{{{ field.label }}}</span><# } #> <nl> - <# if ( field.description ) { #><span class=\"description customize-control-description\">{{{ field.description }}}</span><# } #> <nl> <input class=\"color-picker-hex\" type=\"text\" maxlength=\"7\" placeholder=\"<?php esc_attr_e( 'Hex Value', 'kirki' ); ?>\" value=\"{{{ field.default }}}\" data-field=\"{{{ field.id }}}\" {{ defaultValue }} /> <nl> - </label> <nl> - <nl> <# } else if ( 'textarea' === field.type ) { #> <nl> <# if ( field.label ) { #><span class=\"customize-control-title\">{{{ field.label }}}</span><# } #> <nl> ", "msg": "Correct positioning of labels & descriptions in colors fields inside repeaters"}
{"diff_id": 1928, "repo": "kirki-framework/kirki", "sha": "4a3f4ba7148cabb3522a0e47d3617a39b4e5b04a", "time": "13.05.2018 16:54:51", "diff": "mmm a / modules/css-vars/class-kirki-modules-css-vars.php <nl> ppp b / modules/css-vars/class-kirki-modules-css-vars.php <nl>@@ -81,7 +81,11 @@ class Kirki_Modules_CSS_Vars { <nl> if ( is_string( $args['css_var'] ) ) { <nl> $args['css_var'] = array( $args['css_var'], '$' ); <nl> } <nl> - echo esc_attr( $args['css_var'][0] ) . ':' . esc_attr( str_replace( '$', Kirki_Values::get_value( $args['kirki_config'], $id ), $args['css_var'][1] ) ) . ';'; <nl> + $val = Kirki_Values::get_value( $args['kirki_config'], $id ); <nl> + if ( isset( $args['css_var'][2] ) && is_array( $val ) && isset( $val[ $args['css_var'][2] ] ) ) { <nl> + $val = $val[ $args['css_var'][2] ]; <nl> + } <nl> + echo esc_attr( $args['css_var'][0] ) . ':' . esc_attr( str_replace( '$', $val, $args['css_var'][1] ) ) . ';'; <nl> } <nl> echo '}'; <nl> echo '</style>'; <nl> ", "msg": "Add support for array values."}
{"diff_id": 1943, "repo": "kirki-framework/kirki", "sha": "40a7856aadaa25bb77c64e2bf406c0d7089e131c", "time": "01.08.2018 01:04:31", "diff": "mmm a / controls/php/class-kirki-control-dimensions.php <nl> ppp b / controls/php/class-kirki-control-dimensions.php <nl>@@ -133,7 +133,6 @@ class Kirki_Control_Dimensions extends Kirki_Control_Base { <nl> 'right' => esc_attr__( 'Right', 'kirki' ), <nl> 'center' => esc_attr__( 'Center', 'kirki' ), <nl> 'size' => esc_attr__( 'Size', 'kirki' ), <nl> - 'height' => esc_attr__( 'Height', 'kirki' ), <nl> 'spacing' => esc_attr__( 'Spacing', 'kirki' ), <nl> 'width' => esc_attr__( 'Width', 'kirki' ), <nl> 'height' => esc_attr__( 'Height', 'kirki' ), <nl> ", "msg": "Duplicate array key height\nIf multiple elements in the array declaration use the same key, only the last one will be used as all others are overwritten."}
{"diff_id": 2026, "repo": "yajra/laravel-datatables", "sha": "613a02bd000b60af9013cbc782c86bb8565115c7", "time": "30.01.2017 12:56:03", "diff": "mmm a / src/Datatables.php <nl> ppp b / src/Datatables.php <nl>@@ -39,26 +39,26 @@ class Datatables <nl> /** <nl> * Gets query and returns instance of class. <nl> * <nl> - * @param mixed $object <nl> + * @param mixed $builder <nl> * @return mixed <nl> * @throws \\Exception <nl> */ <nl> - public static function of($object) <nl> + public static function of($builder) <nl> { <nl> $datatables = app('datatables'); <nl> $config = app('config'); <nl> $engines = $config->get('datatables.engines'); <nl> $builders = $config->get('datatables.builders'); <nl> - $builder = get_class($object); <nl> - if (array_key_exists($builder, $builders)) { <nl> - $engine = $builders[$builder]; <nl> + foreach ($builders as $class => $engine) { <nl> + if ($builder instanceof $class) { <nl> $class = $engines[$engine]; <nl> - return new $class($object, $datatables->getRequest()); <nl> + return new $class($builder, $datatables->getRequest()); <nl> + } <nl> } <nl> - throw new \\Exception('No available engine for ' . $builder); <nl> + throw new \\Exception('No available engine for ' . get_class($builder)); <nl> } <nl> /** <nl> ", "msg": "Enhance identifation of proper engine to use for a given builder.\nFix"}
{"diff_id": 2030, "repo": "yajra/laravel-datatables", "sha": "adc06060cddd57d6a34e03731a917ee530e260c3", "time": "08.02.2017 09:21:56", "diff": "mmm a / src/Engines/CollectionEngine.php <nl> ppp b / src/Engines/CollectionEngine.php <nl>@@ -119,13 +119,17 @@ class CollectionEngine extends BaseEngine <nl> foreach ($this->request->orderableColumns() as $orderable) { <nl> $column = $this->getColumnName($orderable['column']); <nl> - $this->collection = $this->collection->sortBy( <nl> - function ($row) use ($column) { <nl> + <nl> + $options = SORT_REGULAR; <nl> + if ($this->isCaseInsensitive()) { <nl> + $options = SORT_REGULAR | SORT_FLAG_CASE; <nl> + } <nl> + <nl> + $this->collection = $this->collection->sortBy(function ($row) use ($column) { <nl> $data = $this->serialize($row); <nl> return Arr::get($data, $column); <nl> - } <nl> - ); <nl> + }, $options); <nl> if ($orderable['direction'] == 'desc') { <nl> $this->collection = $this->collection->reverse(); <nl> ", "msg": "Add SORT_FLAG_CASE when ordering collection.\nFix"}
{"diff_id": 2031, "repo": "yajra/laravel-datatables", "sha": "26931b9ab1114f2adfc1d69bc1f5ba9b9f89bd19", "time": "09.02.2017 11:12:30", "diff": "mmm a / src/Datatables.php <nl> ppp b / src/Datatables.php <nl>namespace Yajra\\Datatables; <nl> -use Yajra\\Datatables\\Html\\Builder; <nl> +use Illuminate\\Support\\Collection; <nl> /** <nl> * Class Datatables. <nl> @@ -39,26 +39,30 @@ class Datatables <nl> /** <nl> * Gets query and returns instance of class. <nl> * <nl> - * @param mixed $builder <nl> + * @param mixed $source <nl> * @return mixed <nl> * @throws \\Exception <nl> */ <nl> - public static function of($builder) <nl> + public static function of($source) <nl> { <nl> $datatables = app('datatables'); <nl> $config = app('config'); <nl> $engines = $config->get('datatables.engines'); <nl> $builders = $config->get('datatables.builders'); <nl> + if (is_array($source)) { <nl> + $source = new Collection($source); <nl> + } <nl> + <nl> foreach ($builders as $class => $engine) { <nl> - if ($builder instanceof $class) { <nl> + if ($source instanceof $class) { <nl> $class = $engines[$engine]; <nl> - return new $class($builder, $datatables->getRequest()); <nl> + return new $class($source, $datatables->getRequest()); <nl> } <nl> } <nl> - throw new \\Exception('No available engine for ' . get_class($builder)); <nl> + throw new \\Exception('No available engine for ' . get_class($source)); <nl> } <nl> /** <nl> @@ -96,12 +100,16 @@ class Datatables <nl> /** <nl> * Datatables using Collection. <nl> * <nl> - * @param \\Illuminate\\Support\\Collection|mixed $builder <nl> + * @param \\Illuminate\\Support\\Collection|mixed $collection <nl> * @return \\Yajra\\Datatables\\Engines\\CollectionEngine <nl> */ <nl> - public function collection($builder) <nl> + public function collection($collection) <nl> { <nl> - return new Engines\\CollectionEngine($builder, $this->request); <nl> + if (is_array($collection)) { <nl> + $collection = new Collection($collection); <nl> + } <nl> + <nl> + return new Engines\\CollectionEngine($collection, $this->request); <nl> } <nl> /** <nl> ", "msg": "Add support for array data source.\nRemove unused import."}
{"diff_id": 2075, "repo": "yajra/laravel-datatables", "sha": "70c2809276d28adc2881874bc89c10c68df216cd", "time": "30.06.2017 09:17:13", "diff": "mmm a / src/Engines/QueryBuilderEngine.php <nl> ppp b / src/Engines/QueryBuilderEngine.php <nl>@@ -270,7 +270,7 @@ class QueryBuilderEngine extends BaseEngine <nl> if ($this->hasFilterColumn($column)) { <nl> $keyword = $this->getColumnSearchKeyword($index, $raw = true); <nl> - $this->applyFilterColumn($this->query, $column, $keyword); <nl> + $this->applyFilterColumn($this->getBaseQueryBuilder(), $column, $keyword); <nl> continue; <nl> } <nl> @@ -313,12 +313,12 @@ class QueryBuilderEngine extends BaseEngine <nl> /** <nl> * Apply filterColumn api search. <nl> * <nl> - * @param mixed $query <nl> + * @param Builder $query <nl> * @param string $columnName <nl> * @param string $keyword <nl> * @param string $boolean <nl> */ <nl> - protected function applyFilterColumn($query, $columnName, $keyword, $boolean = 'and') <nl> + protected function applyFilterColumn(Builder $query, $columnName, $keyword, $boolean = 'and') <nl> { <nl> $callback = $this->columnDef['filter'][$columnName]['method']; <nl> $builder = $query->newQuery(); <nl> @@ -326,20 +326,6 @@ class QueryBuilderEngine extends BaseEngine <nl> $query->addNestedWhereQuery($builder, $boolean); <nl> } <nl> - /** <nl> - * Get eager loads keys if eloquent. <nl> - * <nl> - * @return array <nl> - */ <nl> - protected function getEagerLoads() <nl> - { <nl> - if ($this->query instanceof EloquentBuilder) { <nl> - return array_keys($this->query->getEagerLoads()); <nl> - } <nl> - <nl> - return []; <nl> - } <nl> - <nl> /** <nl> * Compile queries for column search. <nl> * <nl> @@ -512,6 +498,20 @@ class QueryBuilderEngine extends BaseEngine <nl> return $this->query; <nl> } <nl> + /** <nl> + * Get eager loads keys if eloquent. <nl> + * <nl> + * @return array <nl> + */ <nl> + protected function getEagerLoads() <nl> + { <nl> + if ($this->query instanceof EloquentBuilder) { <nl> + return array_keys($this->query->getEagerLoads()); <nl> + } <nl> + <nl> + return []; <nl> + } <nl> + <nl> /** <nl> * Perform global search for the given keyword. <nl> * <nl> ", "msg": "Fix column search query builder used.\nAdd Builder type hint."}
{"diff_id": 2090, "repo": "yajra/laravel-datatables", "sha": "aeb87c0f37555dc88844a9a994cd164f5032f8ca", "time": "05.07.2017 11:40:17", "diff": "mmm a / src/Facades/DataTables.php <nl> ppp b / src/Facades/DataTables.php <nl>@@ -4,6 +4,12 @@ namespace Yajra\\DataTables\\Facades; <nl> use Illuminate\\Support\\Facades\\Facade; <nl> +/** <nl> + * @mixin \\Yajra\\DataTables\\Factory <nl> + * @method eloquent($builder) <nl> + * @method queryBuilder($builder) <nl> + * @method collection($collection) <nl> + */ <nl> class DataTables extends Facade <nl> { <nl> /** <nl> ", "msg": "Add mixin and method annotation for better facade ide support."}
{"diff_id": 2091, "repo": "yajra/laravel-datatables", "sha": "eb958d3ad472f59168892c95ec6fda440fee71d0", "time": "05.07.2017 13:49:04", "diff": "mmm a / src/Utilities/Request.php <nl> ppp b / src/Utilities/Request.php <nl>@@ -7,6 +7,9 @@ namespace Yajra\\DataTables\\Utilities; <nl> * @method get($key, $default = null) <nl> * @method query($key, $default = null) <nl> * @method has($key) <nl> + * @method merge(array $values) <nl> + * @method wantsJson() <nl> + * @method ajax() <nl> * @method all() <nl> */ <nl> class Request <nl> ", "msg": "Add method annotations for request proxy calls."}
{"diff_id": 2097, "repo": "yajra/laravel-datatables", "sha": "7052bb9cba099af0bfeabf644d72a9b50bac29f4", "time": "13.07.2017 09:32:42", "diff": "mmm a / src/EloquentDataTable.php <nl> ppp b / src/EloquentDataTable.php <nl>@@ -77,11 +77,7 @@ class EloquentDataTable extends QueryDataTable <nl> return $columnName; <nl> } <nl> - $parts = explode('.', $column); <nl> - $relationColumn = array_pop($parts); <nl> - $relation = implode('.', $parts); <nl> - <nl> - return $this->joinEagerLoadedColumn($relation, $relationColumn); <nl> + return $this->joinEagerLoadedColumn($relation, $columnName); <nl> } <nl> /** <nl> @@ -157,14 +153,4 @@ class EloquentDataTable extends QueryDataTable <nl> $this->getBaseQueryBuilder()->join($table, $foreign, '=', $other, $type); <nl> } <nl> } <nl> - <nl> - /** <nl> - * Get eager loads keys if eloquent. <nl> - * <nl> - * @return array <nl> - */ <nl> - protected function getEagerLoads() <nl> - { <nl> - return array_keys($this->query->getEagerLoads()); <nl> - } <nl> } <nl> ", "msg": "Refactor duplicates and remove unused method."}
{"diff_id": 2125, "repo": "yajra/laravel-datatables", "sha": "afdbe6bce9ade9b19d66034ace3d8a2c24da8a56", "time": "21.10.2017 14:59:00", "diff": "mmm a / src/config/datatables.php <nl> ppp b / src/config/datatables.php <nl>@@ -46,12 +46,14 @@ return [ <nl> /** <nl> * DataTables accepted builder to engine mapping. <nl> + * This is where you can override which engine a builder should use <nl> + * Note, only change this if you know what you are doing! <nl> */ <nl> 'builders' => [ <nl> - Illuminate\\Database\\Eloquent\\Relations\\Relation::class => 'eloquent', <nl> - Illuminate\\Database\\Eloquent\\Builder::class => 'eloquent', <nl> - Illuminate\\Database\\Query\\Builder::class => 'query', <nl> - Illuminate\\Support\\Collection::class => 'collection', <nl> + //Illuminate\\Database\\Eloquent\\Relations\\Relation::class => 'eloquent', <nl> + //Illuminate\\Database\\Eloquent\\Builder::class => 'eloquent', <nl> + //Illuminate\\Database\\Query\\Builder::class => 'query', <nl> + //Illuminate\\Support\\Collection::class => 'collection', <nl> ], <nl> /** <nl> ", "msg": "Mark datatables.builder an advanced option to override default behaviour"}
{"diff_id": 2137, "repo": "yajra/laravel-datatables", "sha": "21bddab4b916722bbf90a75b27e2406b6e517f05", "time": "13.02.2018 19:11:29", "diff": "mmm a / src/DataTableAbstract.php <nl> ppp b / src/DataTableAbstract.php <nl>namespace Yajra\\DataTables; <nl> use Illuminate\\Support\\Str; <nl> +use Psr\\Log\\LoggerInterface; <nl> use Illuminate\\Http\\JsonResponse; <nl> -use Illuminate\\Contracts\\Logging\\Log; <nl> use Yajra\\DataTables\\Utilities\\Helper; <nl> use Illuminate\\Support\\Traits\\Macroable; <nl> use Yajra\\DataTables\\Contracts\\DataTable; <nl> @@ -32,7 +32,7 @@ abstract class DataTableAbstract implements DataTable, Arrayable, Jsonable <nl> public $request; <nl> /** <nl> - * @var \\Illuminate\\Contracts\\Logging\\Log <nl> + * @var \\Psr\\Log\\LoggerInterface <nl> */ <nl> protected $logger; <nl> @@ -720,11 +720,11 @@ abstract class DataTableAbstract implements DataTable, Arrayable, Jsonable <nl> /** <nl> * Get monolog/logger instance. <nl> * <nl> - * @return \\Illuminate\\Contracts\\Logging\\Log <nl> + * @return \\Psr\\Log\\LoggerInterface <nl> */ <nl> public function getLogger() <nl> { <nl> - $this->logger = $this->logger ?: app(Log::class); <nl> + $this->logger = $this->logger ?: app(LoggerInterface::class); <nl> return $this->logger; <nl> } <nl> @@ -732,10 +732,10 @@ abstract class DataTableAbstract implements DataTable, Arrayable, Jsonable <nl> /** <nl> * Set monolog/logger instance. <nl> * <nl> - * @param \\Illuminate\\Contracts\\Logging\\Log $logger <nl> + * @param \\Psr\\Log\\LoggerInterface $logger <nl> * @return $this <nl> */ <nl> - public function setLogger(Log $logger) <nl> + public function setLogger(LoggerInterface $logger) <nl> { <nl> $this->logger = $logger; <nl> ", "msg": "Update Log interface type-hint in DataTableAbstract\nIlluminate\\Contracts\\Logging\\Log was removed in Laravel 5.6\nPsr\\Log\\LoggerInterface should be used instead as described in:"}
{"diff_id": 2144, "repo": "yajra/laravel-datatables", "sha": "e198329ac3c539ae597dcb0e948d7012f43f1487", "time": "12.05.2018 11:11:24", "diff": "mmm a / src/QueryDataTable.php <nl> ppp b / src/QueryDataTable.php <nl>@@ -161,7 +161,7 @@ class QueryDataTable extends DataTableAbstract <nl> */ <nl> protected function isComplexQuery($builder) <nl> { <nl> - return Str::contains(Str::lower($builder->toSql()), ['union', 'having', 'distinct', 'order by', 'group by']); <nl> + return Str::contains(Str::lower($builder->toSql()), ['union', 'having', 'distinct', 'order by', 'group by', 'join']); <nl> } <nl> /** <nl> ", "msg": "Classify join statements as a complex query.\nFix"}
{"diff_id": 2147, "repo": "yajra/laravel-datatables", "sha": "66ab96cd85d178334600a7b72ebd7ca15cb4d39a", "time": "03.06.2018 09:22:09", "diff": "mmm a / src/DataTableAbstract.php <nl> ppp b / src/DataTableAbstract.php <nl>@@ -340,7 +340,7 @@ abstract class DataTableAbstract implements DataTable, Arrayable, Jsonable <nl> if (is_array($key)) { <nl> $this->appends = $key; <nl> } elseif (is_callable($value)) { <nl> - $this->appends[$key] = $value; <nl> + $this->appends[$key] = value($value); <nl> } else { <nl> $this->appends[$key] = value($value); <nl> } <nl> @@ -348,6 +348,19 @@ abstract class DataTableAbstract implements DataTable, Arrayable, Jsonable <nl> return $this; <nl> } <nl> + /** <nl> + * Add with query callback value on response. <nl> + * <nl> + * @param string $key <nl> + * @param callable $value <nl> + * @return $this <nl> + */ <nl> + public function withQuery($key, callable $value) { <nl> + $this->appends[$key] = $value; <nl> + <nl> + return $this; <nl> + } <nl> + <nl> /** <nl> * Override default ordering method with a closure callback. <nl> * <nl> ", "msg": "Add withQuery api for query callback.\nRevert with callback implementation since its BC."}
{"diff_id": 2156, "repo": "yajra/laravel-datatables", "sha": "bdc7a242f570140f2172dca5acd833051e5e0038", "time": "20.11.2018 11:18:10", "diff": "mmm a / src/QueryDataTable.php <nl> ppp b / src/QueryDataTable.php <nl>@@ -45,6 +45,13 @@ class QueryDataTable extends DataTableAbstract <nl> */ <nl> protected $limitCallback; <nl> + /** <nl> + * Flag to use simple pagination. <nl> + * <nl> + * @var bool <nl> + */ <nl> + protected $simplePagination = false; <nl> + <nl> /** <nl> * Can the DataTable engine be created with these parameters. <nl> * <nl> @@ -111,6 +118,19 @@ class QueryDataTable extends DataTableAbstract <nl> $this->prepared = true; <nl> } <nl> + /** <nl> + * Use simple pagination to set the recordsTotal equals to recordsFiltered. <nl> + * This will improve the performance by skipping the count query. <nl> + * <nl> + * @return $this <nl> + */ <nl> + public function simplePagination() <nl> + { <nl> + $this->simplePagination = true; <nl> + <nl> + return $this; <nl> + } <nl> + <nl> /** <nl> * Count total items. <nl> * <nl> @@ -118,9 +138,28 @@ class QueryDataTable extends DataTableAbstract <nl> */ <nl> public function totalCount() <nl> { <nl> + if ($this->simplePagination) { <nl> + return true; <nl> + } <nl> + <nl> return $this->totalRecords ? $this->totalRecords : $this->count(); <nl> } <nl> + /** <nl> + * Count filtered items. <nl> + * <nl> + * @return int <nl> + */ <nl> + protected function filteredCount() <nl> + { <nl> + $this->filteredRecords = $this->filteredRecords ?: $this->count(); <nl> + if ($this->simplePagination) { <nl> + $this->totalRecords = $this->filteredRecords; <nl> + } <nl> + <nl> + return $this->filteredRecords; <nl> + } <nl> + <nl> /** <nl> * Counts current query. <nl> * <nl> ", "msg": "Add simplePagination api for better performance on large datasets."}
{"diff_id": 2181, "repo": "yajra/laravel-datatables", "sha": "55c2f8d44dcf49f82d24da5db85edd9b96c4cb40", "time": "29.05.2019 11:12:51", "diff": "mmm a / src/QueryDataTable.php <nl> ppp b / src/QueryDataTable.php <nl>@@ -280,7 +280,7 @@ class QueryDataTable extends DataTableAbstract <nl> foreach ($columns as $index => $column) { <nl> $column = $this->getColumnName($index); <nl> - if (! $this->request->isColumnSearchable($index) || $this->isBlacklisted($column)) { <nl> + if (! $this->request->isColumnSearchable($index) || $this->isBlacklisted($column) && ! $this->hasFilterColumn($column)) { <nl> continue; <nl> } <nl> ", "msg": "Allow column search on blacklisted columns with custom filter.\nFix"}
{"diff_id": 2190, "repo": "yajra/laravel-datatables", "sha": "632b4b4bf91dc223fb6296387dc31a01336b55b9", "time": "01.10.2020 20:09:38", "diff": "mmm a / src/DataTableAbstract.php <nl> ppp b / src/DataTableAbstract.php <nl>@@ -11,6 +11,7 @@ use Illuminate\\Support\\Traits\\Macroable; <nl> use Psr\\Log\\LoggerInterface; <nl> use Yajra\\DataTables\\Contracts\\DataTable; <nl> use Yajra\\DataTables\\Exceptions\\Exception; <nl> +use Yajra\\DataTables\\Extensions\\SearchPanes; <nl> use Yajra\\DataTables\\Processors\\DataProcessor; <nl> use Yajra\\DataTables\\Utilities\\Helper; <nl> @@ -145,6 +146,11 @@ abstract class DataTableAbstract implements DataTable, Arrayable, Jsonable <nl> */ <nl> protected $serializer; <nl> + /** <nl> + * @var array <nl> + */ <nl> + protected $searchPanes = []; <nl> + <nl> /** <nl> * Can the DataTable engine be created with these parameters. <nl> * <nl> @@ -772,6 +778,10 @@ abstract class DataTableAbstract implements DataTable, Arrayable, Jsonable <nl> $output = $this->showDebugger($output); <nl> } <nl> + foreach ($this->searchPanes as $column => $options) { <nl> + $output['searchPanes']['options'][$column] = $options; <nl> + } <nl> + <nl> return new JsonResponse( <nl> $output, <nl> 200, <nl> @@ -924,4 +934,22 @@ abstract class DataTableAbstract implements DataTable, Arrayable, Jsonable <nl> { <nl> return 'id'; <nl> } <nl> + <nl> + /** <nl> + * @param string $column <nl> + * @param mixed $options <nl> + * @return $this <nl> + */ <nl> + public function searchPanes($column, $options) <nl> + { <nl> + if ($options instanceof Arrayable) { <nl> + $options = $options->toArray(); <nl> + } else { <nl> + $options = value($options); <nl> + } <nl> + <nl> + $this->searchPanes[$column] = $options; <nl> + <nl> + return $this; <nl> + } <nl> } <nl> ", "msg": "Add support for search panes.\nFix"}
{"diff_id": 2192, "repo": "yajra/laravel-datatables", "sha": "34931b6a6fda014fc976527616b086b8bdc66a12", "time": "01.10.2020 21:34:47", "diff": "mmm a / src/DataTableAbstract.php <nl> ppp b / src/DataTableAbstract.php <nl>@@ -672,7 +672,7 @@ abstract class DataTableAbstract implements DataTable, Arrayable, Jsonable <nl> */ <nl> protected function searchPanesSearch() <nl> { <nl> - $columns = $this->request->get('searchPanes'); <nl> + $columns = $this->request->get('searchPanes', []); <nl> foreach ($columns as $column => $values) { <nl> if ($this->isBlacklisted($column) && ! $this->hasFilterColumn($column)) { <nl> ", "msg": "Set empty array as default searchPanes."}
{"diff_id": 2216, "repo": "yajra/laravel-datatables", "sha": "f3c9e49abef7a82fc34df9265705952c66cf97c8", "time": "12.10.2021 14:46:03", "diff": "mmm a / src/Utilities/Request.php <nl> ppp b / src/Utilities/Request.php <nl>@@ -170,7 +170,7 @@ class Request <nl> */ <nl> public function columnKeyword($index) <nl> { <nl> - $keyword = $this->request->input(\"columns.$index.search.value\"); <nl> + $keyword = $this->request->input(\"columns.$index.search.value\") ?? ''; <nl> return $this->prepareKeyword($keyword); <nl> } <nl> @@ -197,7 +197,7 @@ class Request <nl> */ <nl> public function keyword() <nl> { <nl> - $keyword = $this->request->input('search.value'); <nl> + $keyword = $this->request->input('search.value') ?? ''; <nl> return $this->prepareKeyword($keyword); <nl> } <nl> ", "msg": "Return empty string for null request keyword"}
{"diff_id": 2225, "repo": "yajra/laravel-datatables", "sha": "465fb15ae1820ed4604ce14574ed3f49c298b8e8", "time": "17.05.2022 13:38:19", "diff": "mmm a / src/Utilities/Helper.php <nl> ppp b / src/Utilities/Helper.php <nl>@@ -337,7 +337,7 @@ class Helper <nl> return str_replace($replacements, $values, $json); <nl> } <nl> - public static function isJavascript(string|array|object $value, string $key): bool <nl> + public static function isJavascript(string|array|object|null $value, string $key): bool <nl> { <nl> if (empty($value) || is_array($value) || is_object($value)) { <nl> return false; <nl> ", "msg": "Added null parameter type as allowed to handle default Action column from laravel-datatables-html"}
{"diff_id": 2253, "repo": "zendframework/zend-form", "sha": "d7192d096f01e22b10077473412309a53a04cd2f", "time": "18.06.2018 12:08:02", "diff": "mmm a / src/Fieldset.php <nl> ppp b / src/Fieldset.php <nl>@@ -211,7 +211,7 @@ class Fieldset extends Element implements FieldsetInterface <nl> * Retrieve a named element or fieldset <nl> * <nl> * @param string $elementOrFieldset <nl> - * @return ElementInterface <nl> + * @return ElementInterface|FieldsetInterface <nl> */ <nl> public function get($elementOrFieldset) <nl> { <nl> ", "msg": "Fieldset#get(): Update return type options"}
{"diff_id": 2256, "repo": "zendframework/zend-form", "sha": "26fcee5a6a2722e7a12e0224874ed1332fb582ad", "time": "22.07.2018 20:29:56", "diff": "mmm a / src/Form.php <nl> ppp b / src/Form.php <nl>@@ -361,7 +361,7 @@ class Form extends Fieldset implements FormInterface <nl> // If there is a base fieldset, only hydrate beginning from the base fieldset <nl> if ($this->baseFieldset !== null) { <nl> - $data = $data[$this->baseFieldset->getName()]; <nl> + $data = isset($data[$this->baseFieldset->getName()]) ? $data[$this->baseFieldset->getName()] : []; <nl> $this->object = $this->baseFieldset->bindValues($data, $validationGroup[$this->baseFieldset->getName()]); <nl> } else { <nl> $this->object = parent::bindValues($data, $validationGroup); <nl> ", "msg": "Updated Form class, bindValues function to set  to empty array if no data to pass along for baseFieldset"}
{"diff_id": 2261, "repo": "zendframework/zend-form", "sha": "814422970ff490b07f0b10957422f64792347240", "time": "11.08.2018 21:11:32", "diff": "mmm a / None <nl> ppp b / src/HelperTrait.php <nl>+<?php <nl> + <nl> +namespace Zend\\Form\\View; <nl> + <nl> +use IntlDateFormatter; <nl> +use Zend\\Form\\ElementInterface; <nl> +use Zend\\Form\\FormInterface; <nl> +use Zend\\Form\\View\\Helper\\Captcha\\Dumb; <nl> +use Zend\\Form\\View\\Helper\\Captcha\\Figlet; <nl> +use Zend\\Form\\View\\Helper\\Captcha\\Image; <nl> +use Zend\\Form\\View\\Helper\\Captcha\\ReCaptcha; <nl> +use Zend\\Form\\View\\Helper\\Form; <nl> +use Zend\\Form\\View\\Helper\\FormButton; <nl> +use Zend\\Form\\View\\Helper\\FormCaptcha; <nl> +use Zend\\Form\\View\\Helper\\FormCheckbox; <nl> +use Zend\\Form\\View\\Helper\\FormCollection; <nl> +use Zend\\Form\\View\\Helper\\FormColor; <nl> +use Zend\\Form\\View\\Helper\\FormDate; <nl> +use Zend\\Form\\View\\Helper\\FormDateSelect; <nl> +use Zend\\Form\\View\\Helper\\FormDateTime; <nl> +use Zend\\Form\\View\\Helper\\FormDateTimeLocal; <nl> +use Zend\\Form\\View\\Helper\\FormDateTimeSelect; <nl> +use Zend\\Form\\View\\Helper\\FormElement; <nl> +use Zend\\Form\\View\\Helper\\FormElementErrors; <nl> +use Zend\\Form\\View\\Helper\\FormEmail; <nl> +use Zend\\Form\\View\\Helper\\FormFile; <nl> +use Zend\\Form\\View\\Helper\\FormHidden; <nl> +use Zend\\Form\\View\\Helper\\FormImage; <nl> +use Zend\\Form\\View\\Helper\\FormInput; <nl> +use Zend\\Form\\View\\Helper\\FormLabel; <nl> +use Zend\\Form\\View\\Helper\\FormMonth; <nl> +use Zend\\Form\\View\\Helper\\FormMonthSelect; <nl> +use Zend\\Form\\View\\Helper\\FormMultiCheckbox; <nl> +use Zend\\Form\\View\\Helper\\FormNumber; <nl> +use Zend\\Form\\View\\Helper\\FormPassword; <nl> +use Zend\\Form\\View\\Helper\\FormRadio; <nl> +use Zend\\Form\\View\\Helper\\FormRange; <nl> +use Zend\\Form\\View\\Helper\\FormReset; <nl> +use Zend\\Form\\View\\Helper\\FormRow; <nl> +use Zend\\Form\\View\\Helper\\FormSearch; <nl> +use Zend\\Form\\View\\Helper\\FormSelect; <nl> +use Zend\\Form\\View\\Helper\\FormSubmit; <nl> +use Zend\\Form\\View\\Helper\\FormTel; <nl> +use Zend\\Form\\View\\Helper\\FormText; <nl> +use Zend\\Form\\View\\Helper\\FormTextarea; <nl> +use Zend\\Form\\View\\Helper\\FormTime; <nl> +use Zend\\Form\\View\\Helper\\FormUrl; <nl> +use Zend\\Form\\View\\Helper\\FormWeek; <nl> + <nl> +/** <nl> + * Trait HelperTrait <nl> + * <nl> + * The trait provides convenience methods for view helpers, <nl> + * defined by the zend-form component. It is designed to be used <nl> + * for type-hinting $this variable inside zend-view templates via doc blocks. <nl> + * <nl> + * The base class is PhpRenderer, followed by the helper trait from <nl> + * the zend-form component. However, multiple helper traits from different <nl> + * Zend components can be chained afterwards. <nl> + * <nl> + * @example @var \\Zend\\View\\Renderer\\PhpRenderer|\\Zend\\Form\\View\\HelperTrait $this <nl> + * <nl> + * @method string|Form form(FormInterface $form = null) <nl> + * @method string|FormButton formButton(ElementInterface $element = null, $buttonContent = null) <nl> + * @method string|FormCaptcha formCaptcha(ElementInterface $element = null) <nl> + * @method string|Dumb formCaptchaDumb(ElementInterface $element = null) <nl> + * @method string|Figlet formCaptchaFiglet(ElementInterface $element = null) <nl> + * @method string|Image formCaptchaImage(ElementInterface $element = null) <nl> + * @method string|ReCaptcha formCaptchaRecaptcha(ElementInterface $element = null) <nl> + * @method string|FormCheckbox formCheckbox(ElementInterface $element = null) <nl> + * @method string|FormCollection formCollection(ElementInterface $element = null, $wrap = true) <nl> + * @method string|FormColor formColor(ElementInterface $element = null) <nl> + * @method string|FormDate formDate(ElementInterface $element = null) <nl> + * @method string|FormDateTime formDateTime(ElementInterface $element = null) <nl> + * @method string|FormDateTimeLocal formDateTimeLocal(ElementInterface $element = null) <nl> + * @method string|FormDateTimeSelect formDateTimeSelect(ElementInterface $element = null, $dateType = IntlDateFormatter::LONG, $timeType = IntlDateFormatter::LONG, $locale = null) <nl> + * @method string|FormDateSelect formDateSelect(ElementInterface $element = null, $dateType = IntlDateFormatter::LONG, $locale = null) <nl> + * @method string|FormElement formElement(ElementInterface $element = null) <nl> + * @method string|FormElementErrors formElementErrors(ElementInterface $element = null, array $attributes = []) <nl> + * @method string|FormEmail formEmail(ElementInterface $element = null) <nl> + * @method string|FormFile formFile(ElementInterface $element = null) <nl> + * @method string formFileApcProgress(ElementInterface $element = null) <nl> + * @method string formFileSessionProgress(ElementInterface $element = null) <nl> + * @method string formFileUploadProgress(ElementInterface $element = null) <nl> + * @method string|FormHidden formHidden(ElementInterface $element = null) <nl> + * @method string|FormImage formImage(ElementInterface $element = null) <nl> + * @method string|FormInput formInput(ElementInterface $element = null) <nl> + * @method string|FormLabel formLabel(ElementInterface $element = null, $labelContent = null, $position = null) <nl> + * @method string|FormMonth formMonth(ElementInterface $element = null) <nl> + * @method string|FormMonthSelect formMonthSelect(ElementInterface $element = null, $dateType = IntlDateFormatter::LONG, $locale = null) <nl> + * @method string|FormMultiCheckbox formMultiCheckbox(ElementInterface $element = null, $labelPosition = null) <nl> + * @method string|FormNumber formNumber(ElementInterface $element = null) <nl> + * @method string|FormPassword formPassword(ElementInterface $element = null) <nl> + * @method string|FormRadio formRadio(ElementInterface $element = null, $labelPosition = null) <nl> + * @method string|FormRange formRange(ElementInterface $element = null) <nl> + * @method string|FormReset formReset(ElementInterface $element = null) <nl> + * @method string|FormRow formRow(ElementInterface $element = null, $labelPosition = null, $renderErrors = null, $partial = null) <nl> + * @method string|FormSearch formSearch(ElementInterface $element = null) <nl> + * @method string|FormSelect formSelect(ElementInterface $element = null) <nl> + * @method string|FormSubmit formSubmit(ElementInterface $element = null) <nl> + * @method string|FormTel formTel(ElementInterface $element = null) <nl> + * @method string|FormText formText(ElementInterface $element = null) <nl> + * @method string|FormTextarea formTextarea(ElementInterface $element = null) <nl> + * @method string|FormTime formTime(ElementInterface $element = null) <nl> + * @method string|FormUrl formUrl(ElementInterface $element = null) <nl> + * @method string|FormWeek formWeek(ElementInterface $element = null) <nl> + */ <nl> +trait HelperTrait <nl> +{ <nl> +} <nl> ", "msg": "Add helper trait to provide type-hinting for zend-view"}
{"diff_id": 2266, "repo": "zendframework/zend-form", "sha": "a75308c117f333e85fd373f677b7c40cf7533a46", "time": "05.09.2018 15:00:48", "diff": "mmm a / src/View/HelperTrait.php <nl> ppp b / src/View/HelperTrait.php <nl>@@ -67,50 +67,50 @@ use Zend\\Form\\View\\Helper\\FormWeek; <nl> * <nl> * @example @var \\Zend\\View\\Renderer\\PhpRenderer|\\Zend\\Form\\View\\HelperTrait $this <nl> * <nl> - * @method string|Form form(FormInterface $form = null) <nl> - * @method string|FormButton formButton(ElementInterface $element = null, $buttonContent = null) <nl> - * @method string|FormCaptcha formCaptcha(ElementInterface $element = null) <nl> - * @method string|Dumb formCaptchaDumb(ElementInterface $element = null) <nl> - * @method string|Figlet formCaptchaFiglet(ElementInterface $element = null) <nl> - * @method string|Image formCaptchaImage(ElementInterface $element = null) <nl> - * @method string|ReCaptcha formCaptchaRecaptcha(ElementInterface $element = null) <nl> - * @method string|FormCheckbox formCheckbox(ElementInterface $element = null) <nl> - * @method string|FormCollection formCollection(ElementInterface $element = null, $wrap = true) <nl> - * @method string|FormColor formColor(ElementInterface $element = null) <nl> - * @method string|FormDate formDate(ElementInterface $element = null) <nl> - * @method string|FormDateTime formDateTime(ElementInterface $element = null) <nl> - * @method string|FormDateTimeLocal formDateTimeLocal(ElementInterface $element = null) <nl> - * @method string|FormDateTimeSelect formDateTimeSelect(ElementInterface $element = null, $dateType = IntlDateFormatter::LONG, $timeType = IntlDateFormatter::LONG, $locale = null) <nl> + * @method string|Form form(FormInterface|null $form = null) <nl> + * @method string|FormButton formButton(ElementInterface|null $element = null, string|null $buttonContent = null) <nl> + * @method string|FormCaptcha formCaptcha(ElementInterface|null $element = null) <nl> + * @method string|Dumb formCaptchaDumb(ElementInterface|null $element = null) <nl> + * @method string|Figlet formCaptchaFiglet(ElementInterface|null $element = null) <nl> + * @method string|Image formCaptchaImage(ElementInterface|null $element = null) <nl> + * @method string|ReCaptcha formCaptchaRecaptcha(ElementInterface|null $element = null) <nl> + * @method string|FormCheckbox formCheckbox(ElementInterface|null $element = null) <nl> + * @method string|FormCollection formCollection(ElementInterface|null $element = null, bool $wrap = true) <nl> + * @method string|FormColor formColor(ElementInterface|null $element = null) <nl> + * @method string|FormDate formDate(ElementInterface|null $element = null) <nl> + * @method string|FormDateTime formDateTime(ElementInterface|null $element = null) <nl> + * @method string|FormDateTimeLocal formDateTimeLocal(ElementInterface|null $element = null) <nl> + * @method string|FormDateTimeSelect formDateTimeSelect(ElementInterface|null $element = null, int $dateType = IntlDateFormatter::LONG, int|null|string $timeType = IntlDateFormatter::LONG, string|null $locale = null) <nl> * @method string|FormDateSelect formDateSelect(ElementInterface $element = null, $dateType = IntlDateFormatter::LONG, $locale = null) <nl> - * @method string|FormElement formElement(ElementInterface $element = null) <nl> - * @method string|FormElementErrors formElementErrors(ElementInterface $element = null, array $attributes = []) <nl> - * @method string|FormEmail formEmail(ElementInterface $element = null) <nl> - * @method string|FormFile formFile(ElementInterface $element = null) <nl> - * @method string formFileApcProgress(ElementInterface $element = null) <nl> - * @method string formFileSessionProgress(ElementInterface $element = null) <nl> - * @method string formFileUploadProgress(ElementInterface $element = null) <nl> - * @method string|FormHidden formHidden(ElementInterface $element = null) <nl> - * @method string|FormImage formImage(ElementInterface $element = null) <nl> - * @method string|FormInput formInput(ElementInterface $element = null) <nl> - * @method string|FormLabel formLabel(ElementInterface $element = null, $labelContent = null, $position = null) <nl> - * @method string|FormMonth formMonth(ElementInterface $element = null) <nl> - * @method string|FormMonthSelect formMonthSelect(ElementInterface $element = null, $dateType = IntlDateFormatter::LONG, $locale = null) <nl> - * @method string|FormMultiCheckbox formMultiCheckbox(ElementInterface $element = null, $labelPosition = null) <nl> - * @method string|FormNumber formNumber(ElementInterface $element = null) <nl> - * @method string|FormPassword formPassword(ElementInterface $element = null) <nl> - * @method string|FormRadio formRadio(ElementInterface $element = null, $labelPosition = null) <nl> - * @method string|FormRange formRange(ElementInterface $element = null) <nl> - * @method string|FormReset formReset(ElementInterface $element = null) <nl> - * @method string|FormRow formRow(ElementInterface $element = null, $labelPosition = null, $renderErrors = null, $partial = null) <nl> - * @method string|FormSearch formSearch(ElementInterface $element = null) <nl> - * @method string|FormSelect formSelect(ElementInterface $element = null) <nl> - * @method string|FormSubmit formSubmit(ElementInterface $element = null) <nl> - * @method string|FormTel formTel(ElementInterface $element = null) <nl> - * @method string|FormText formText(ElementInterface $element = null) <nl> - * @method string|FormTextarea formTextarea(ElementInterface $element = null) <nl> - * @method string|FormTime formTime(ElementInterface $element = null) <nl> - * @method string|FormUrl formUrl(ElementInterface $element = null) <nl> - * @method string|FormWeek formWeek(ElementInterface $element = null) <nl> + * @method string|FormElement formElement(ElementInterface|null $element = null) <nl> + * @method string|FormElementErrors formElementErrors(ElementInterface|null $element = null, array $attributes = []) <nl> + * @method string|FormEmail formEmail(ElementInterface|null $element = null) <nl> + * @method string|FormFile formFile(ElementInterface|null $element = null) <nl> + * @method string formFileApcProgress(ElementInterface|null $element = null) <nl> + * @method string formFileSessionProgress(ElementInterface|null $element = null) <nl> + * @method string formFileUploadProgress(ElementInterface|null $element = null) <nl> + * @method string|FormHidden formHidden(ElementInterface|null $element = null) <nl> + * @method string|FormImage formImage(ElementInterface|null $element = null) <nl> + * @method string|FormInput formInput(ElementInterface|null $element = null) <nl> + * @method string|FormLabel formLabel(ElementInterface|null $element = null, string|null $labelContent = null, string|null $position = null) <nl> + * @method string|FormMonth formMonth(ElementInterface|null $element = null) <nl> + * @method string|FormMonthSelect formMonthSelect(ElementInterface|null $element = null, int $dateType = IntlDateFormatter::LONG, string|null $locale = null) <nl> + * @method string|FormMultiCheckbox formMultiCheckbox(ElementInterface|null $element = null, string|null $labelPosition = null) <nl> + * @method string|FormNumber formNumber(ElementInterface|null $element = null) <nl> + * @method string|FormPassword formPassword(ElementInterface|null $element = null) <nl> + * @method string|FormRadio formRadio(ElementInterface|null $element = null, string|null $labelPosition = null) <nl> + * @method string|FormRange formRange(ElementInterface|null $element = null) <nl> + * @method string|FormReset formReset(ElementInterface|null $element = null) <nl> + * @method string|FormRow formRow(ElementInterface|null $element = null, string|null $labelPosition = null, bool|null $renderErrors = null, string|null $partial = null) <nl> + * @method string|FormSearch formSearch(ElementInterface|null $element = null) <nl> + * @method string|FormSelect formSelect(ElementInterface|null $element = null) <nl> + * @method string|FormSubmit formSubmit(ElementInterface|null $element = null) <nl> + * @method string|FormTel formTel(ElementInterface|null $element = null) <nl> + * @method string|FormText formText(ElementInterface|null $element = null) <nl> + * @method string|FormTextarea formTextarea(ElementInterface|null $element = null) <nl> + * @method string|FormTime formTime(ElementInterface|null $element = null) <nl> + * @method string|FormUrl formUrl(ElementInterface|null $element = null) <nl> + * @method string|FormWeek formWeek(ElementInterface|null $element = null) <nl> */ <nl> trait HelperTrait <nl> { <nl> ", "msg": "Add data types for all parameters in the helper trait"}
{"diff_id": 2271, "repo": "zendframework/zend-form", "sha": "f0929507288bc7061cbf9551511e4f993e59d39f", "time": "21.02.2019 12:25:06", "diff": "mmm a / src/Element/Collection.php <nl> ppp b / src/Element/Collection.php <nl>@@ -225,6 +225,7 @@ class Collection extends Fieldset <nl> } <nl> foreach ($data as $key => $value) { <nl> + $elementOrFieldset = null; <nl> if ($this->has($key)) { <nl> $elementOrFieldset = $this->get($key); <nl> } elseif ($this->targetElement) { <nl> ", "msg": "fixed initial value not being present and causing issues"}
{"diff_id": 2275, "repo": "zendframework/zend-form", "sha": "2cbf54f30ff5988f8e7625e44510a285a4669aec", "time": "03.10.2019 19:43:08", "diff": "mmm a / src/ElementFactory.php <nl> ppp b / src/ElementFactory.php <nl>@@ -37,6 +37,7 @@ final class ElementFactory implements FactoryInterface <nl> if (null === $creationOptions) { <nl> return; <nl> } <nl> + <nl> if ($creationOptions instanceof Traversable) { <nl> $creationOptions = iterator_to_array($creationOptions); <nl> } <nl> @@ -45,7 +46,7 @@ final class ElementFactory implements FactoryInterface <nl> throw new InvalidServiceException(sprintf( <nl> '%s cannot use non-array, non-traversable, non-null creation options; received %s', <nl> __CLASS__, <nl> - (is_object($creationOptions) ? get_class($creationOptions) : gettype($creationOptions)) <nl> + is_object($creationOptions) ? get_class($creationOptions) : gettype($creationOptions) <nl> )); <nl> } <nl> ", "msg": "Formatting adjsutments\nAdded empty line between if statements\nRemoved redundant brackets"}
{"diff_id": 2296, "repo": "luyadev/luya", "sha": "596e54965fd3d7b72736973529d2f9ed51e3e088", "time": "24.01.2017 13:11:30", "diff": "mmm a / core/components/Mail.php <nl> ppp b / core/components/Mail.php <nl>namespace luya\\components; <nl> use Yii; <nl> -use Exception; <nl> +use luya\\Exception; <nl> use PHPMailer; <nl> use SMTP; <nl> @@ -87,7 +87,7 @@ class Mail extends \\yii\\base\\Component <nl> /** <nl> * @since 1.0.0-beta7 <nl> - * @var string|boolean Define a layout template file which is going to be wrapped around the setBody() <nl> + * @var string|boolean Define a layout template file which is going to be wrapped around the body() <nl> * content. The file alias will be resolved so an example layout could look as followed: <nl> * <nl> * ```php <nl> @@ -156,11 +156,15 @@ class Mail extends \\yii\\base\\Component <nl> * @param string $body The HTML body of the mail message. <nl> * @return \\luya\\components\\Mail <nl> */ <nl> - public function compose($subject, $body) <nl> + public function compose($subject = null, $body = null) <nl> { <nl> $this->cleanup(); <nl> - $this->setSubject($subject); <nl> - $this->setBody($body); <nl> + if ($subject !== null) { <nl> + $this->subject($subject); <nl> + } <nl> + if ($body !== null) { <nl> + $this->body($body); <nl> + } <nl> return $this; <nl> } <nl> @@ -170,7 +174,7 @@ class Mail extends \\yii\\base\\Component <nl> * @param string $subject The subject message <nl> * @return \\luya\\components\\Mail <nl> */ <nl> - public function setSubject($subject) <nl> + public function subject($subject) <nl> { <nl> $this->getMailer()->Subject = $subject; <nl> return $this; <nl> @@ -183,7 +187,7 @@ class Mail extends \\yii\\base\\Component <nl> * @param string $body The HTML body message <nl> * @return \\luya\\components\\Mail <nl> */ <nl> - public function setBody($body) <nl> + public function body($body) <nl> { <nl> $this->getMailer()->Body = $this->wrapLayout($body); <nl> return $this; <nl> @@ -351,6 +355,9 @@ class Mail extends \\yii\\base\\Component <nl> */ <nl> public function send() <nl> { <nl> + if (empty($this->mailer->Subject) || empty($this->mailer->Body)) { <nl> + throw new Exception(\"Mail subject() and body() can not be empty in order to send mail.\"); <nl> + } <nl> return $this->getMailer()->send(); <nl> } <nl> ", "msg": "renamed setter methods for body and subject in order to allow mail\nchaining"}
{"diff_id": 2304, "repo": "luyadev/luya", "sha": "8e24c9d65639d3fa3d8c1767b756b65989e90bcd", "time": "30.01.2017 11:28:08", "diff": "mmm a / modules/admin/src/proxy/ClientTransfer.php <nl> ppp b / modules/admin/src/proxy/ClientTransfer.php <nl>@@ -75,7 +75,7 @@ class ClientTransfer extends Object <nl> if (!$curl->error) { <nl> if (FileHelper::writeFile($image->serverSource, $curl->response)) { <nl> - $this->build->command->outputInfo('[+] Image ' . $file->systemFileName.' downloaded.'); <nl> + $this->build->command->outputInfo('[+] Image ' . $image->systemFileName.' downloaded.'); <nl> } <nl> } <nl> } <nl> ", "msg": "fixed image transfer proxy name"}
{"diff_id": 2319, "repo": "luyadev/luya", "sha": "36098aa18dd8d019e625a9e4bd71985494b07e40", "time": "07.02.2017 16:54:14", "diff": "mmm a / modules/admin/src/components/StorageContainer.php <nl> ppp b / modules/admin/src/components/StorageContainer.php <nl>@@ -727,6 +727,15 @@ class StorageContainer extends Component <nl> } <nl> } <nl> + // force auto fix <nl> + $this->autoFixMissingImageSources = true; <nl> + <nl> + foreach ($this->findImages() as $image) { <nl> + if (!empty($image->file) && !$image->file->isHidden && !$image->file->isDeleted) { <nl> + $image->toArray(); // which forces to recreate missing sources. <nl> + } <nl> + } <nl> + <nl> return true; <nl> } <nl> } <nl> ", "msg": "improve process thumbnail process to regenerate image files."}
{"diff_id": 2321, "repo": "luyadev/luya", "sha": "7f6db91fc25db8f8b0a325eee4de782f6beaa942", "time": "13.02.2017 15:16:20", "diff": "mmm a / core/console/commands/HealthController.php <nl> ppp b / core/console/commands/HealthController.php <nl>@@ -5,6 +5,7 @@ namespace luya\\console\\commands; <nl> use Yii; <nl> use yii\\helpers\\FileHelper; <nl> use yii\\helpers\\Console; <nl> +use yii\\imagine\\Image; <nl> /** <nl> * Health/Status informations about the Application itself. <nl> @@ -83,6 +84,12 @@ class HealthController extends \\luya\\console\\Command <nl> } <nl> } <nl> + try { <nl> + Image::getImagine(); <nl> + } catch (\\Exception $e) { <nl> + $this->outputError('Imagine Error: ' . $e->getMessage()); <nl> + } <nl> + <nl> return ($error) ? $this->outputError('Health check found errors!') : $this->outputSuccess('O.K.'); <nl> } <nl> ", "msg": "added missing imagine driver warning to health command closes"}
{"diff_id": 2322, "repo": "luyadev/luya", "sha": "0ab9b588420ae4860b76945da5bc8b50af3538e5", "time": "14.02.2017 12:52:14", "diff": "mmm a / modules/cms/src/widgets/LangSwitcher.php <nl> ppp b / modules/cms/src/widgets/LangSwitcher.php <nl>@@ -42,6 +42,11 @@ use luya\\helpers\\ArrayHelper; <nl> * <nl> * This configure widget would output the following code: <nl> * <nl> + * ```html <nl> + * <ul class=\"langnav__list\"> <nl> + * <li class=\"langnav__item lang-element-item--active\"><a class=\"langnav__link lang-link-item--active\" href=\"/public_html/\">DE</a></li> <nl> + * <li class=\"langnav__item\"><a class=\"langnav__link\" href=\"/public_html/en\">EN</a></li> <nl> + * </ul> <nl> * ``` <nl> * <nl> * @author Basil Suter <basil@nadar.io> <nl> ", "msg": "added html output for configured widget"}
{"diff_id": 2347, "repo": "luyadev/luya", "sha": "a001a39042cd60b412ccf33da7ddded6bde5111b", "time": "10.03.2017 17:00:42", "diff": "mmm a / core/traits/ApplicationTrait.php <nl> ppp b / core/traits/ApplicationTrait.php <nl>@@ -68,8 +68,8 @@ trait ApplicationTrait <nl> * <nl> * ```php <nl> * public $locales = [ <nl> - * 'de' => 'de_CH.utf8', <nl> - * 'en' => 'en_GB.utf8', <nl> + * 'de' => 'de_CH', <nl> + * 'en' => 'en_GB', <nl> * ]; <nl> * ``` <nl> */ <nl> @@ -124,8 +124,9 @@ trait ApplicationTrait <nl> */ <nl> public function setLocale($lang) <nl> { <nl> - $this->language = $lang; <nl> - setlocale(LC_ALL, $this->ensureLocale($lang).'.utf8', $this->ensureLocale($lang)); <nl> + $locale = $this->ensureLocale($lang); <nl> + $this->language = $locale; <nl> + setlocale(LC_ALL, $locale.'.utf8', $locale); <nl> } <nl> /** <nl> ", "msg": "use language code for yii application."}
{"diff_id": 2367, "repo": "luyadev/luya", "sha": "3f6e524a2765184e19958358e6df0dba52110eac", "time": "04.04.2017 10:41:59", "diff": "mmm a / modules/admin/src/commands/ProxyController.php <nl> ppp b / modules/admin/src/commands/ProxyController.php <nl>@@ -12,12 +12,23 @@ use luya\\helpers\\Url; <nl> use luya\\console\\Command; <nl> /** <nl> - * Proxy Sync Command. <nl> + * Synchronise a PROD env to your locale env with files and images. <nl> + * <nl> + * The proxy command will ask for an url, identifier and token. The url is the url of your website in production where you have leased the token and <nl> + * identifier inside the admin. Make sure you are using the right protocol (with or without https)! <nl> + * <nl> + * e.g url: `https://luya.io` or if you are using a domain with www `http://www.example.com` depending on your server configuration. <nl> * <nl> * ```sh <nl> * ./vendor/bin/luya admin/proxy <nl> * ``` <nl> * <nl> + * You can also provide all prompted options in order to not used an interactive mode: <nl> + * <nl> + * ```sh <nl> + * ./vendor/bin/luya admin/proxy --url=https://example.com --idf=lcp58e35acb4ca69 --token=ESOH1isB3ka_dF09ozkDJewpeecGCdUw <nl> + * ``` <nl> + * <nl> * Options: <nl> * <nl> * ```sh <nl> @@ -72,12 +83,31 @@ class ProxyController extends Command <nl> */ <nl> public $table = null; <nl> + /** <nl> + * @var string The production environment Domain where your LUYA application is running in production mode make so to use the right protocolo <nl> + * examples: <nl> + * - https://luya.io <nl> + * - http://www.example.com <nl> + * <nl> + */ <nl> + public $url = null; <nl> + <nl> + /** <nl> + * @var string The identifier you get from the Machines menu in your production env admin looks like this: lcp58e35acb4ca69 <nl> + */ <nl> + public $idf = null; <nl> + <nl> + /** <nl> + * @var string The token which is used for the identifier, looks like this: ESOH1isB3ka_dF09ozkDJewpeecGCdUw <nl> + */ <nl> + public $token = null; <nl> + <nl> /** <nl> * @inheritdoc <nl> */ <nl> public function options($actionID) <nl> { <nl> - return ['strict', 'table']; <nl> + return ['strict', 'table', 'url', 'idf', 'token']; <nl> } <nl> /** <nl> @@ -85,7 +115,7 @@ class ProxyController extends Command <nl> */ <nl> public function optionAliases() <nl> { <nl> - return ['s' => 'strict', 't' => 'table']; <nl> + return ['s' => 'strict', 't' => 'table', 'u' => 'url', 'i' => 'idf', 'tk' => 'token']; <nl> } <nl> /** <nl> @@ -95,26 +125,39 @@ class ProxyController extends Command <nl> */ <nl> public function actionSync() <nl> { <nl> + if ($this->url === null) { <nl> $url = Config::get(self::CONFIG_VAR_URL); <nl> if (!$url) { <nl> - $url = $this->prompt('Please enter the lcp Proxy Url:'); <nl> + $url = $this->prompt('Enter the Proxy PROD env URL (e.g. https://example.com):'); <nl> Config::set(self::CONFIG_VAR_URL, $url); <nl> } <nl> + } else { <nl> + $url = $this->url; <nl> + } <nl> + if ($this->idf === null) { <nl> $identifier = Config::get(self::CONFIG_VAR_IDENTIFIER); <nl> if (!$identifier) { <nl> $identifier = $this->prompt('Please enter the identifier ID:'); <nl> Config::set(self::CONFIG_VAR_IDENTIFIER, trim($identifier)); <nl> } <nl> + } else { <nl> + $identifier = $this->idf; <nl> + } <nl> + if ($this->token === null) { <nl> $token = Config::get(self::CONFIG_VAR_TOKEN); <nl> if (!$token) { <nl> $token = $this->prompt('Please enter the access token:'); <nl> Config::set(self::CONFIG_VAR_TOKEN, trim($token)); <nl> } <nl> + } else { <nl> + $token = $this->token; <nl> + } <nl> + <nl> $proxyUrl = Url::ensureHttp(rtrim(trim($url), '/')) . '/admin/api-admin-proxy'; <nl> $this->outputInfo('Connect to: ' . $proxyUrl); <nl> ", "msg": "enhance proxy command by providing command options by url."}
{"diff_id": 2370, "repo": "luyadev/luya", "sha": "674af945e1cc8e1329ed902c585041f639b31e67", "time": "05.04.2017 13:35:53", "diff": "mmm a / modules/admin/src/proxy/ClientBuild.php <nl> ppp b / modules/admin/src/proxy/ClientBuild.php <nl>@@ -33,7 +33,19 @@ class ClientBuild extends Object <nl> public $optionStrict = null; <nl> - public $optionTable = null; <nl> + private $_optionTable = null; <nl> + <nl> + public function setOptionTable($table) <nl> + { <nl> + if (!empty($table)) { <nl> + $this->_optionTable = explode(\",\", $table); <nl> + } <nl> + } <nl> + <nl> + public function getOptionTable() <nl> + { <nl> + return $this->_optionTable; <nl> + } <nl> public function __construct(Command $command, array $config = []) <nl> { <nl> @@ -48,8 +60,6 @@ class ClientBuild extends Object <nl> if ($this->_buildConfig === null) { <nl> throw new InvalidConfigException(\"build config can not be empty!\"); <nl> } <nl> - <nl> - $this->optionTable = explode(\",\", $this->optionTable); <nl> } <nl> private $_buildConfig = null; <nl> @@ -59,12 +69,19 @@ class ClientBuild extends Object <nl> $this->_buildConfig = $config; <nl> foreach ($config['tables'] as $tableName => $tableConfig) { <nl> + <nl> if (!empty($this->optionTable)) { <nl> + $skip = true; <nl> + <nl> foreach ($this->optionTable as $useName) { <nl> - if ($useName != $tableName || !StringHelper::startsWithWildcard($tableName, $useName)) { <nl> - continue; <nl> + if ($useName == $tableName || StringHelper::startsWithWildcard($tableName, $useName)) { <nl> + $skip = false; <nl> } <nl> } <nl> + <nl> + if ($skip) { <nl> + continue; <nl> + } <nl> } <nl> $schema = Yii::$app->db->getTableSchema($tableName); <nl> ", "msg": "fixed client build table sync for table wildcards"}
{"diff_id": 2383, "repo": "luyadev/luya", "sha": "efaa3c5e0c1aa84f19f9bdbe3642f3fcdd76e98b", "time": "18.04.2017 16:28:02", "diff": "mmm a / modules/admin/src/components/StorageContainer.php <nl> ppp b / modules/admin/src/components/StorageContainer.php <nl>@@ -736,7 +736,7 @@ class StorageContainer extends Component <nl> foreach ($this->findImages() as $image) { <nl> if (!empty($image->file) && !$image->file->isHidden && !$image->file->isDeleted) { <nl> - $image->toArray(); // which forces to recreate missing sources. <nl> + $image->source; // which forces to recreate missing sources. <nl> } <nl> } <nl> ", "msg": "fixed storage importer on console application"}
{"diff_id": 2400, "repo": "luyadev/luya", "sha": "f0d2e43f9254179a071939635683edc104a6ca7a", "time": "06.05.2017 11:59:58", "diff": "mmm a / modules/admin/src/ngrest/plugins/Sortable.php <nl> ppp b / modules/admin/src/ngrest/plugins/Sortable.php <nl>@@ -9,8 +9,8 @@ use luya\\admin\\ngrest\\base\\Plugin; <nl> * <nl> * Generates an arrow down/up ability to click direct in the CRUD list. <nl> * <nl> - * When using the Sortable Plugin make sure to use the {{luya\\admin\\traits\\SortableTrait}}. This will ensure the <nl> - * default ordering for your fields and disabled the sorting inside the grid. <nl> + * When using the Sortable Plugin make sure to use the {{luya\\admin\\traits\\SortableTrait}} within the Model. This will <nl> + * ensure the default ordering for your fields and disabled the sorting inside the grid. <nl> * <nl> * @author Basil Suter <basil@nadar.io> <nl> */ <nl> ", "msg": "improve phpdocs for Sortable Plugin and SortableTrait"}
{"diff_id": 2435, "repo": "luyadev/luya", "sha": "90f2402ce77e8b0665d3870c7524484a7ec526df", "time": "10.06.2017 19:28:20", "diff": "mmm a / modules/admin/src/ngrest/base/Api.php <nl> ppp b / modules/admin/src/ngrest/base/Api.php <nl>@@ -6,12 +6,12 @@ use Yii; <nl> use yii\\helpers\\Inflector; <nl> use yii\\helpers\\Html; <nl> use yii\\base\\InvalidCallException; <nl> -use yii\\base\\Arrayable; <nl> use yii\\base\\ErrorException; <nl> use yii\\base\\InvalidConfigException; <nl> use yii\\data\\ActiveDataProvider; <nl> use luya\\helpers\\FileHelper; <nl> use luya\\helpers\\Url; <nl> +use luya\\helpers\\ExportHelper; <nl> use luya\\admin\\base\\RestActiveController; <nl> use luya\\admin\\models\\UserOnline; <nl> use luya\\admin\\ngrest\\render\\RenderActiveWindow; <nl> @@ -306,61 +306,7 @@ class Api extends RestActiveController <nl> */ <nl> public function actionExport() <nl> { <nl> - $tempData = null; <nl> - <nl> - // first row <nl> - $header = []; <nl> - $i = 0; <nl> - <nl> - foreach ($this->model->find()->all() as $key => $value) { <nl> - $row = []; <nl> - <nl> - $attrs = $value->getAttributes(); <nl> - foreach ($value->extraFields() as $field) { <nl> - $attrs[$field] = $value->$field; <nl> - } <nl> - <nl> - foreach ($attrs as $k => $v) { <nl> - if (is_object($v)) { <nl> - if ($v instanceof Arrayable) { <nl> - $v = $v->toArray(); <nl> - } else { <nl> - continue; <nl> - } <nl> - } <nl> - <nl> - if ($i === 0) { <nl> - $header[] = $this->model->getAttributeLabel($k); <nl> - } <nl> - <nl> - if (is_array($v)) { <nl> - $tv = []; <nl> - foreach ($v as $kk => $vv) { <nl> - if (is_object($vv)) { <nl> - if ($vv instanceof Arrayable) { <nl> - $tv[] = implode(\" | \", $vv->toArray()); <nl> - } else { <nl> - continue; <nl> - } <nl> - } elseif (is_array($vv)) { <nl> - $tv[] = implode(\" | \", $vv); <nl> - } else { <nl> - $tv[] = $vv; <nl> - } <nl> - } <nl> - <nl> - $v = implode(\" - \", $tv); <nl> - } <nl> - <nl> - $row[] = '\"'. str_replace('\"', '\\\"', $v) .'\"'; <nl> - } <nl> - <nl> - if ($i=== 0) { <nl> - $tempData.= implode(\",\", $header) . \"\\n\"; <nl> - } <nl> - $tempData.= implode(\",\", $row) . \"\\n\"; <nl> - $i++; <nl> - } <nl> + $tempData = ExportHelper::csv($this->model->find()); <nl> $key = uniqid('ngre', true); <nl> ", "msg": "use export helper for ngrest api csv generator"}
{"diff_id": 2447, "repo": "luyadev/luya", "sha": "fefdb137e8cd4a9ee3a015d92aa677ff1f2f7cec", "time": "21.06.2017 07:44:24", "diff": "mmm a / modules/cms/src/admin/importers/CmslayoutImporter.php <nl> ppp b / modules/cms/src/admin/importers/CmslayoutImporter.php <nl>@@ -88,7 +88,8 @@ class CmslayoutImporter extends Importer <nl> if ($layoutItem) { <nl> $match = $this->comparePlaceholders($_placeholders, json_decode($layoutItem->json_config, true)); <nl> - if ($match) { <nl> + $matchRevert = $this->comparePlaceholders(json_decode($layoutItem->json_config, true), $_placeholders); <nl> + if ($match && $matchRevert) { <nl> $layoutItem->updateAttributes([ <nl> 'name' => $readableFileName, <nl> 'view_file' => $fileBaseName, <nl> ", "msg": "cms layout import ensure revert way in order to support new placeholder\nlayouts."}
{"diff_id": 2481, "repo": "luyadev/luya", "sha": "af726cf60becfefa2f5c95804b57641cfab0a020", "time": "17.08.2017 15:41:38", "diff": "mmm a / modules/admin/src/views/ngrest/crud.php <nl> ppp b / modules/admin/src/views/ngrest/crud.php <nl>@@ -11,8 +11,10 @@ $this->beginBody(); <nl> ?> <nl> <?php $this->registerAngularControllerScript(); ?> <nl> <div ng-controller=\"<?= $config->hash; ?>\" ng-init=\"init()\" class=\"crud\"> <nl> + <nl> <!-- This fake ui-view is used to render the detail item, which actuals uses the parent scope in the ui router controller. --> <nl> - <div style=\"visibility:hidden;\" ui-view></div> <nl> + <div style=\"display: none;\" ui-view></div> <nl> + <nl> <?php if (!$relationCall): ?> <nl> <?php if (!$isInline): ?> <nl> <div class=\"crud-header\"> <nl> ", "msg": "Changed visibility: hidden to display: none on fake crud ui-view"}
{"diff_id": 2505, "repo": "luyadev/luya", "sha": "7ab44d720da6715f5b3edde15b09afbc83ed5422", "time": "30.08.2017 14:19:41", "diff": "mmm a / core/console/Application.php <nl> ppp b / core/console/Application.php <nl>@@ -53,7 +53,7 @@ class Application extends \\yii\\console\\Application <nl> { <nl> return array_merge($this->luyaCoreComponents(), [ <nl> 'errorHandler' => ['class' => 'luya\\console\\ErrorHandler'], <nl> - 'urlManager' => ['class' => 'yii\\web\\UrlManager'], // add for console commands with view files <nl> + 'urlManager' => ['class' => 'yii\\web\\UrlManager', 'enablePrettyUrl' => true, 'showScriptName' => false], // add for console commands with view files <nl> ]); <nl> } <nl> } <nl> ", "msg": "change default url manager to allow pretty urls"}
{"diff_id": 2514, "repo": "luyadev/luya", "sha": "0443be853bf470671816d81d59fea22a2c32b54d", "time": "04.09.2017 17:06:56", "diff": "mmm a / core/traits/ErrorHandlerTrait.php <nl> ppp b / core/traits/ErrorHandlerTrait.php <nl>@@ -19,7 +19,7 @@ trait ErrorHandlerTrait <nl> * @var string The url of the error api without trailing slash. Make sure you have installed the error api <nl> * module on the requested api url (https://luya.io/guide/module/luyadev---luya-module-errorapi). <nl> */ <nl> - public $api = 'http://luya.io/errorapi'; <nl> + public $api = 'https://luya.io/errorapi'; <nl> /** <nl> * @var boolean Enable the transfer of exceptions to the defined `$api` server. <nl> ", "msg": "default error api use https"}
{"diff_id": 2515, "repo": "luyadev/luya", "sha": "5f4486a7f9afbb4c9ec97dfbefa2001c242ef80d", "time": "05.09.2017 10:26:29", "diff": "mmm a / modules/admin/src/views/layouts/main.php <nl> ppp b / modules/admin/src/views/layouts/main.php <nl>@@ -177,11 +177,14 @@ $this->beginPage() <nl> <div class=\"debug\" ng-show=\"showDebugBar\" ng-class=\"{'debug-toggled': isHover}\" ng-init=\"debugTab=1\"> <nl> <ul class=\"nav nav-tabs debug-tabs\"> <nl> + <li class=\"nav-item\" ng-click=\"showDebugBar=0\"> <nl> + <span class=\"nav-link\">x</span> <nl> + </li> <nl> <li class=\"nav-item\" ng-click=\"debugTab=1\"> <nl> - <span class=\"nav-link active\" ng-click=\"switchTab('infos')\" ng-class=\"{'active': debugTab==1}\">Network</span> <nl> + <span class=\"nav-link\" ng-class=\"{'active': debugTab==1}\">Network</span> <nl> </li> <nl> <li class=\"nav-item\" ng-click=\"debugTab=2\"> <nl> - <span class=\"nav-link\" ng-click=\"switchTab('infos')\" ng-class=\"{'active': debugTab==2}\">Infos</span> <nl> + <span class=\"nav-link\" ng-class=\"{'active': debugTab==2}\">Infos</span> <nl> </li> <nl> </ul> <nl> ", "msg": "add ability to close debug bar"}
{"diff_id": 2533, "repo": "luyadev/luya", "sha": "72a1f528b0852f62f5dc20c9c994bf9a4ab272f1", "time": "02.10.2017 19:24:24", "diff": "mmm a / core/components/Mail.php <nl> ppp b / core/components/Mail.php <nl>@@ -67,6 +67,12 @@ class Mail extends \\yii\\base\\Component <nl> */ <nl> public $isSMTP = true; <nl> + /** <nl> + * @var boolean Whether the SMTP requires authentication or not, if {{Mail::$isSMTP}} is disabled <nl> + * this property has no effect. <nl> + */ <nl> + public $SMTPAuth = true; <nl> + <nl> /** <nl> * @var string alternate text message if email client doesn't support HTML <nl> */ <nl> @@ -127,7 +133,7 @@ class Mail extends \\yii\\base\\Component <nl> $this->_mailer->isSMTP(); <nl> $this->_mailer->SMTPSecure = $this->smtpSecure; <nl> $this->_mailer->Host = $this->host; <nl> - $this->_mailer->SMTPAuth = true; <nl> + $this->_mailer->SMTPAuth = $this->SMTPAuth; <nl> $this->_mailer->Username = $this->username; <nl> $this->_mailer->Password = $this->password; <nl> $this->_mailer->Port = $this->port; <nl> ", "msg": "added ability to disable smpt auth."}
{"diff_id": 2505, "repo": "luyadev/luya", "sha": "7ab44d720da6715f5b3edde15b09afbc83ed5422", "time": "30.08.2017 14:19:41", "diff": "mmm a / core/console/Application.php <nl> ppp b / core/console/Application.php <nl>@@ -53,7 +53,7 @@ class Application extends \\yii\\console\\Application <nl> { <nl> return array_merge($this->luyaCoreComponents(), [ <nl> 'errorHandler' => ['class' => 'luya\\console\\ErrorHandler'], <nl> - 'urlManager' => ['class' => 'yii\\web\\UrlManager'], // add for console commands with view files <nl> + 'urlManager' => ['class' => 'yii\\web\\UrlManager', 'enablePrettyUrl' => true, 'showScriptName' => false], // add for console commands with view files <nl> ]); <nl> } <nl> } <nl> ", "msg": "change default url manager to allow pretty urls"}
{"diff_id": 2515, "repo": "luyadev/luya", "sha": "5f4486a7f9afbb4c9ec97dfbefa2001c242ef80d", "time": "05.09.2017 10:26:29", "diff": "mmm a / modules/admin/src/views/layouts/main.php <nl> ppp b / modules/admin/src/views/layouts/main.php <nl>@@ -177,11 +177,14 @@ $this->beginPage() <nl> <div class=\"debug\" ng-show=\"showDebugBar\" ng-class=\"{'debug-toggled': isHover}\" ng-init=\"debugTab=1\"> <nl> <ul class=\"nav nav-tabs debug-tabs\"> <nl> + <li class=\"nav-item\" ng-click=\"showDebugBar=0\"> <nl> + <span class=\"nav-link\">x</span> <nl> + </li> <nl> <li class=\"nav-item\" ng-click=\"debugTab=1\"> <nl> - <span class=\"nav-link active\" ng-click=\"switchTab('infos')\" ng-class=\"{'active': debugTab==1}\">Network</span> <nl> + <span class=\"nav-link\" ng-class=\"{'active': debugTab==1}\">Network</span> <nl> </li> <nl> <li class=\"nav-item\" ng-click=\"debugTab=2\"> <nl> - <span class=\"nav-link\" ng-click=\"switchTab('infos')\" ng-class=\"{'active': debugTab==2}\">Infos</span> <nl> + <span class=\"nav-link\" ng-class=\"{'active': debugTab==2}\">Infos</span> <nl> </li> <nl> </ul> <nl> ", "msg": "add ability to close debug bar"}
{"diff_id": 2547, "repo": "luyadev/luya", "sha": "8cce6d1515d6d4a5dae323d6b29c5d6aa3ff77aa", "time": "12.10.2017 12:18:15", "diff": "mmm a / modules/admin/src/apis/ProxyController.php <nl> ppp b / modules/admin/src/apis/ProxyController.php <nl>@@ -11,8 +11,6 @@ use luya\\admin\\models\\ProxyBuild; <nl> use yii\\helpers\\Json; <nl> use luya\\helpers\\Url; <nl> use luya\\admin\\models\\StorageFile; <nl> -use yii\\web\\HttpException; <nl> -use yii\\web\\ServerErrorHttpException; <nl> use yii\\web\\NotFoundHttpException; <nl> /** <nl> @@ -38,6 +36,14 @@ class ProxyController extends Controller <nl> 'migration', 'admin_proxy_build', 'admin_proxy_machine', 'admin_config', <nl> ]; <nl> + /** <nl> + * Gathers basic informations about the build. <nl> + * <nl> + * @param string $identifier <nl> + * @param string $token <nl> + * @throws ForbiddenHttpException <nl> + * @return array <nl> + */ <nl> public function actionIndex($identifier, $token) <nl> { <nl> $machine = ProxyMachine::findOne(['identifier' => $identifier, 'is_deleted' => false]); <nl> @@ -101,6 +107,14 @@ class ProxyController extends Controller <nl> return $build->getErrors(); <nl> } <nl> + /** <nl> + * Make sure the machine and token are valid. <nl> + * <nl> + * @param string $machine <nl> + * @param string $buildToken <nl> + * @throws ForbiddenHttpException <nl> + * @return \\luya\\admin\\models\\ProxyBuild <nl> + */ <nl> private function ensureBuild($machine, $buildToken) <nl> { <nl> $build = ProxyBuild::findOne(['build_token' => $buildToken, 'is_complet' => 0]); <nl> @@ -120,6 +134,15 @@ class ProxyController extends Controller <nl> return $build; <nl> } <nl> + /** <nl> + * Return sql table data. <nl> + * <nl> + * @param unknown $machine <nl> + * @param unknown $buildToken <nl> + * @param unknown $table <nl> + * @param unknown $offset <nl> + * @return array <nl> + */ <nl> public function actionDataProvider($machine, $buildToken, $table, $offset) <nl> { <nl> $build = $this->ensureBuild($machine, $buildToken); <nl> @@ -145,8 +168,15 @@ class ProxyController extends Controller <nl> return $query->all(); <nl> } <nl> - <nl> - <nl> + /** <nl> + * Return file storage data. <nl> + * <nl> + * @param unknown $machine <nl> + * @param unknown $buildToken <nl> + * @param unknown $fileId <nl> + * @throws ForbiddenHttpException <nl> + * @throws NotFoundHttpException <nl> + */ <nl> public function actionFileProvider($machine, $buildToken, $fileId) <nl> { <nl> $build = $this->ensureBuild($machine, $buildToken); <nl> @@ -166,6 +196,15 @@ class ProxyController extends Controller <nl> } <nl> } <nl> + /** <nl> + * Return image storage data. <nl> + * <nl> + * @param unknown $machine <nl> + * @param unknown $buildToken <nl> + * @param unknown $imageId <nl> + * @throws ForbiddenHttpException <nl> + * @throws NotFoundHttpException <nl> + */ <nl> public function actionImageProvider($machine, $buildToken, $imageId) <nl> { <nl> $build = $this->ensureBuild($machine, $buildToken); <nl> @@ -185,6 +224,12 @@ class ProxyController extends Controller <nl> } <nl> } <nl> + /** <nl> + * Close the current build. <nl> + * <nl> + * @param string $buildToken <nl> + * @throws ForbiddenHttpException <nl> + */ <nl> public function actionClose($buildToken) <nl> { <nl> $build = ProxyBuild::findOne(['build_token' => $buildToken, 'is_complet' => 0]); <nl> ", "msg": "add phpdocs removed unused classes"}
{"diff_id": 2552, "repo": "luyadev/luya", "sha": "aa41569400190310f206eac03c2fe3e5c1fc3be5", "time": "23.10.2017 11:56:21", "diff": "mmm a / modules/remoteadmin/src/views/status/index.php <nl> ppp b / modules/remoteadmin/src/views/status/index.php <nl>@@ -5,6 +5,8 @@ use luya\\remoteadmin\\Module; <nl> <script> <nl> zaa.bootstrap.register('SitesStatusController', function($scope, $http) { <nl> + $scope.searchQuery = ''; <nl> + <nl> $scope.sites = []; <nl> $scope.hasError = false; <nl> @@ -48,6 +50,7 @@ zaa.bootstrap.register('SitesStatusController', function($scope, $http) { <nl> <div class=\"card-body\"> <nl> <h3><?= Module::t('status_index_heading'); ?></h3> <nl> <p><?= Module::t('status_index_intro', ['version' => $currentVersion['version'], 'date' => Yii::$app->formatter->asDate(strtotime($currentVersion['time']))]); ?></p> <nl> + <input type=\"text\" ng-model=\"searchQuery\" class=\"form-control\" /> <nl> <table class=\"table table-striped\"> <nl> <thead> <nl> <tr> <nl> @@ -62,7 +65,7 @@ zaa.bootstrap.register('SitesStatusController', function($scope, $http) { <nl> <th></th> <nl> </tr> <nl> </thead> <nl> - <tr ng-repeat=\"site in sites\"> <nl> + <tr ng-repeat=\"site in sites | filter:searchQuery\"> <nl> <td style=\"text-align:left;\"><a ng-href=\"{{site.safeUrl}}\" target=\"_blank\">{{site.safeUrl}}</a></td> <nl> <td ng-if=\"!site.status.error && !site.status.loading\">{{site.status.time}}</td> <nl> <td ng-if=\"!site.status.error && !site.status.loading\" style=\"{{site.status.debugstyle}}\">{{site.status.debug}}</td> <nl> ", "msg": "added search ability for remote admin"}
{"diff_id": 2557, "repo": "luyadev/luya", "sha": "f95261a10b8c34874d0bf44b901b80c5b3912bb3", "time": "25.10.2017 18:47:24", "diff": "mmm a / core/traits/RestBehaviorsTrait.php <nl> ppp b / core/traits/RestBehaviorsTrait.php <nl>@@ -9,6 +9,7 @@ use yii\\filters\\auth\\QueryParamAuth; <nl> use yii\\filters\\auth\\HttpBearerAuth; <nl> use yii\\filters\\ContentNegotiator; <nl> use luya\\rest\\UserBehaviorInterface; <nl> +use yii\\filters\\Cors; <nl> /** <nl> * Rest Behaviors Trait. <nl> @@ -29,6 +30,11 @@ use luya\\rest\\UserBehaviorInterface; <nl> */ <nl> trait RestBehaviorsTrait <nl> { <nl> + /** <nl> + * @var boolean Whether CORS is enabled or not. <nl> + */ <nl> + public $enableCors = false; <nl> + <nl> /** <nl> * Whether the rest controller is protected or not. <nl> * <nl> @@ -66,7 +72,6 @@ trait RestBehaviorsTrait <nl> */ <nl> public function behaviors() <nl> { <nl> - // get the parent behaviors to overwrite <nl> $behaviors = parent::behaviors(); <nl> if (!$this->getUserAuthClass()) { <nl> @@ -81,6 +86,14 @@ trait RestBehaviorsTrait <nl> HttpBearerAuth::className(), <nl> ], <nl> ]; <nl> + <nl> + if ($this->enableCors) { <nl> + $behaviors['authenticator']['except'] = ['options']; <nl> + } <nl> + } <nl> + <nl> + if ($this->enableCors) { <nl> + $behaviors['cors'] = Cors::class; <nl> } <nl> $behaviors['contentNegotiator'] = [ <nl> @@ -91,7 +104,8 @@ trait RestBehaviorsTrait <nl> ], <nl> ]; <nl> - // by default rate limiter behavior is removed as its not implememented. <nl> + // by default rate limiter behavior is removed as it requires a database <nl> + // user given from the admin module. <nl> if (isset($behaviors['rateLimiter'])) { <nl> unset($behaviors['rateLimiter']); <nl> } <nl> ", "msg": "behavior ability to enable cors."}
{"diff_id": 2569, "repo": "luyadev/luya", "sha": "88c562f27c0a370b0d4f0772f7017d95fc50661d", "time": "21.11.2017 12:45:46", "diff": "mmm a / modules/admin/src/storage/BaseFileSystemStorage.php <nl> ppp b / modules/admin/src/storage/BaseFileSystemStorage.php <nl>@@ -257,6 +257,18 @@ abstract class BaseFileSystemStorage extends Component <nl> return $this->_filesArray; <nl> } <nl> + /** <nl> + * Setter method for fiels array. <nl> + * <nl> + * This is mainly used when working with unit tests. <nl> + * <nl> + * @param array $files <nl> + */ <nl> + public function setFilesArray(array $files) <nl> + { <nl> + $this->_filesArray = $files; <nl> + } <nl> + <nl> /** <nl> * Get a single file by file id from the files array. <nl> * <nl> @@ -286,6 +298,18 @@ abstract class BaseFileSystemStorage extends Component <nl> return $this->_imagesArray; <nl> } <nl> + /** <nl> + * Setter method for images array. <nl> + * <nl> + * This is mainly used when working with unit tests. <nl> + * <nl> + * @param array $images <nl> + */ <nl> + public function setImagesArray(array $images) <nl> + { <nl> + $this->_imagesArray = $images; <nl> + } <nl> + <nl> /** <nl> * Get a single image by image id from the files array. <nl> * <nl> @@ -725,6 +749,18 @@ abstract class BaseFileSystemStorage extends Component <nl> return $this->_filtersArray; <nl> } <nl> + /** <nl> + * Setter method for filters array. <nl> + * <nl> + * This is mainly used when working with unit tests. <nl> + * <nl> + * @param array $filters <nl> + */ <nl> + public function setFiltersArray(array $filters) <nl> + { <nl> + $this->_filtersArray = $data; <nl> + } <nl> + <nl> /** <nl> * Get a single filter by filter identifier from the filters array. <nl> * <nl> ", "msg": "add setter methods for filesystem in order to prevent db dependency."}
{"diff_id": 2576, "repo": "luyadev/luya", "sha": "605dc19fa26c5266cfa3ce6089bda1b9ff6fbc08", "time": "29.11.2017 12:44:14", "diff": "mmm a / None <nl> ppp b / modules/admin/src/ngrest/plugins/Hidden.php <nl>+<?php <nl> + <nl> +namespace luya\\admin\\ngrest\\plugins; <nl> + <nl> +use luya\\admin\\ngrest\\base\\Plugin; <nl> + <nl> +/** <nl> + * Hidden Field Plugin. <nl> + * <nl> + * @author Basil Suter <basil@nadar.io> <nl> + * @since 1.0.0 <nl> + */ <nl> +class Hidden extends Plugin <nl> +{ <nl> + /** <nl> + * @var string|integer This value will be stored on create and update actions as a hidden field. <nl> + */ <nl> + public $value; <nl> + <nl> + /** <nl> + * @inheritdoc <nl> + */ <nl> + public function renderList($id, $ngModel) <nl> + { <nl> + return $this->createListTag($ngModel); <nl> + } <nl> + <nl> + /** <nl> + * @inheritdoc <nl> + */ <nl> + public function renderCreate($id, $ngModel) <nl> + { <nl> + return $this->createTag('input', null, ['ng-model' => $ngModel, 'type' => 'hidden', 'name' => $id, 'id' => $id, 'value' => $this->value, 'ng-init' => \"{$ngModel}={$this->value}\"]); <nl> + } <nl> + <nl> + /** <nl> + * @inheritdoc <nl> + */ <nl> + public function renderUpdate($id, $ngModel) <nl> + { <nl> + return $this->renderCreate($id, $ngModel); <nl> + } <nl> +} <nl> ", "msg": "add option for hidden ngrest values."}
{"diff_id": 2593, "repo": "luyadev/luya", "sha": "6684afb3bb18ae8d5377da0bdecb3ce6bc9e2c46", "time": "10.01.2018 10:13:19", "diff": "mmm a / tests/core/console/CommandTest.php <nl> ppp b / tests/core/console/CommandTest.php <nl>@@ -23,14 +23,10 @@ class CommandTest extends LuyaConsoleTestCase <nl> $this->assertEquals('FooActiveWindow', $cmd->createClassName('FooActiveWindow', 'ActiveWindow')); <nl> $this->assertEquals('FooActiveWindow', $cmd->createClassName('foo-active-window', 'ActiveWindow')); <nl> $this->assertEquals('FooActiveWindow', $cmd->createClassName('foo', 'ActiveWindow')); <nl> - <nl> - $this->assertEquals(\\luya\\Boot::VERSION, $cmd->getLuyaVersion()); <nl> } <nl> public function testHelper() <nl> { <nl> $cmd = new SubCommand('myid', Yii::$app->getModule('unitmodule')); <nl> - <nl> - $this->assertEquals(\\luya\\Boot::VERSION, $cmd->getLuyaVersion()); <nl> } <nl> } <nl> ", "msg": "remove deprecated method from tests."}
{"diff_id": 2602, "repo": "luyadev/luya", "sha": "710c0a16cb4024a4d30eaead36848d317ac43804", "time": "12.03.2018 17:06:24", "diff": "mmm a / core/web/Request.php <nl> ppp b / core/web/Request.php <nl>namespace luya\\web; <nl> -use Yii; <nl> - <nl> /** <nl> * Request Component. <nl> * <nl> @@ -37,6 +35,19 @@ class Request extends \\yii\\web\\Request <nl> 'application/json' => 'yii\\web\\JsonParser', <nl> ]; <nl> + /** <nl> + * @inheritdoc <nl> + */ <nl> + public function init() <nl> + { <nl> + parent::init(); <nl> + <nl> + // if an admin request is detected, change the csrf param. <nl> + if ($this->isAdmin) { <nl> + $this->csrfParam = '_csrf-admin'; <nl> + } <nl> + } <nl> + <nl> private $_isAdmin; <nl> /** <nl> @@ -62,9 +73,8 @@ class Request extends \\yii\\web\\Request <nl> if ($this->getIsConsoleRequest() && !$this->forceWebRequest) { <nl> $this->_isAdmin = false; <nl> } else { <nl> - $resolver = Yii::$app->composition->getResolvedPathInfo($this); <nl> - $pathInfo = $resolver['route']; <nl> - $parts = explode('/', $pathInfo); <nl> + $resolver = (new Composition($this))->getResolvedPathInfo($this); <nl> + $parts = explode('/', $resolver['route']); <nl> $first = reset($parts); <nl> if (preg_match('/admin/i', $first, $results)) { <nl> ", "msg": "change csrf param name for admin requests"}
{"diff_id": 2621, "repo": "luyadev/luya", "sha": "b6bb86fd0e9c66a35cfeb92500559d1bf4a46523", "time": "07.05.2018 22:08:46", "diff": "mmm a / core/console/commands/ImportController.php <nl> ppp b / core/console/commands/ImportController.php <nl>@@ -128,7 +128,7 @@ class ImportController extends Command implements ImportControllerInterface <nl> // if there response is an array, the it will be added to the queue <nl> if (is_array($response)) { <nl> foreach ($response as $class) { <nl> - $object = new $class($this, $module); <nl> + $object = Yii::createObject($class, [$this, $module]); <nl> $position = $object->queueListPosition; <nl> while (true) { <nl> if (!array_key_exists($position, $queue)) { <nl> ", "msg": "use create object method in order to support DI"}
{"diff_id": 2622, "repo": "luyadev/luya", "sha": "a66a99ee0155ff060289d5c6f6a7deb6d29df159", "time": "13.05.2018 13:11:20", "diff": "mmm a / core/traits/ApplicationTrait.php <nl> ppp b / core/traits/ApplicationTrait.php <nl>@@ -106,35 +106,26 @@ trait ApplicationTrait <nl> /** <nl> * Transform the $language into a locale sign to set php env settings. <nl> * <nl> - * Example transform input `de` to `de_CH` when available $locales property. <nl> + * Example transform input `de` to `de_CH` when available $locales property as <nl> + * <nl> + * ```php <nl> + * 'locales' => ['de' => 'de_CH'] <nl> + * ``` <nl> * <nl> * @param string $lang Find the locale POSIX for the provided $lang short code. <nl> * @return string The localisation code for the provided lang short code. <nl> */ <nl> public function ensureLocale($lang) <nl> { <nl> + // see if the $lang is available in the $locales map. <nl> if (array_key_exists($lang, $this->locales)) { <nl> return $this->locales[$lang]; <nl> } <nl> + // generate from `de` the locale `de_DE` or from `en` `en_EN` only if $lang is 2 chars. <nl> if (strlen($lang) == 2) { <nl> - switch ($lang) { <nl> - case 'de': <nl> - return 'de_DE'; <nl> - case 'fr': <nl> - return 'fr_FR'; <nl> - case 'it': <nl> - return 'it_IT'; <nl> - case 'ru': <nl> - return 'ru_RU'; <nl> - case 'en': <nl> - return 'en_US'; <nl> - case 'cn': <nl> - return 'cn_CN'; <nl> - default: <nl> return strtolower($lang) . '_' . strtoupper($lang); <nl> } <nl> - } <nl> return $lang; <nl> } <nl> @@ -143,13 +134,19 @@ trait ApplicationTrait <nl> * Setter method ensures the locilations POSIX from {{ensureLocale}} for the provided lang <nl> * and changes the Yii::$app->langauge and sets the `setlocale()` code from ensureLocale(). <nl> * <nl> + * From the setlocale docs about, try different locales: <nl> + * <nl> + * > If locale is an array or followed by additional parameters then each array element or parameter <nl> + * > is tried to be set as new locale until success. This is useful if a locale is known under different <nl> + * > names on different systems or for providing a fallback for a possibly not available locale. <nl> + * <nl> * @param string $lang The language short code to set the locale for. <nl> */ <nl> public function setLocale($lang) <nl> { <nl> - $locale = str_replace('.utf8', '', $this->ensureLocale($lang)); <nl> + $locale = str_replace(['.utf8', '.UTF-8'], '', $this->ensureLocale($lang)); <nl> $this->language = $locale; <nl> - setlocale(LC_ALL, $locale.'.utf8', $locale); <nl> + setlocale(LC_ALL, $locale.'.utf8', $locale.'UTF-8', $locale); <nl> } <nl> /** <nl> ", "msg": "Add different locale utf8 types, remove defaults."}
{"diff_id": 2624, "repo": "luyadev/luya", "sha": "4c0f9414596b510936cc82fa0b172b7641b4ddde", "time": "14.05.2018 13:06:28", "diff": "mmm a / core/console/commands/ImportController.php <nl> ppp b / core/console/commands/ImportController.php <nl>@@ -4,7 +4,6 @@ namespace luya\\console\\commands; <nl> use Yii; <nl> use yii\\console\\widgets\\Table; <nl> -use yii\\helpers\\VarDumper; <nl> use luya\\Boot; <nl> use luya\\admin\\models\\Config; <nl> use luya\\console\\Command; <nl> @@ -209,12 +208,8 @@ class ImportController extends Command implements ImportControllerInterface <nl> foreach ($logs as $key => $value) { <nl> if (is_array($value)) { <nl> foreach ($value as $kk => $kv) { <nl> - if (!is_scalar($kv)) { <nl> - $rows[] = [$kk, VarDumper::dumpAsString($kv)]; <nl> - } else { <nl> $rows[] = [$kk, $kv]; <nl> } <nl> - } <nl> } else { <nl> $rows[] = [$key, $value]; <nl> } <nl> ", "msg": "use array table console output instead of dump"}
{"diff_id": 2625, "repo": "luyadev/luya", "sha": "9186affcccc3320fc4dd7eb3d5b8947437365b63", "time": "16.05.2018 15:36:21", "diff": "mmm a / tests/core/web/ViewTest.php <nl> ppp b / tests/core/web/ViewTest.php <nl>@@ -18,21 +18,13 @@ class ViewTest extends \\luyatests\\LuyaWebTestCase <nl> $string = ' '; <nl> $resultString = $view->compress($string); <nl> - $this->assertEquals(1, strlen($resultString)); <nl> + $this->assertEquals(0, strlen($resultString)); <nl> $string = ' '; <nl> $resultString = $view->compress($string); <nl> - $this->assertEquals(1, strlen($resultString)); <nl> + $this->assertEquals(0, strlen($resultString)); <nl> - $string = '<test> <nl> - <nl> - </test>'; <nl> - $resultString = $view->compress($string); <nl> - $this->assertEquals(14, strlen($resultString)); <nl> - <nl> - $string = 'test test test'; <nl> - $resultString = $view->compress($string); <nl> - $this->assertEquals(14, strlen($resultString)); <nl> + $this->assertSame('<p> foo bar </p>', $view->compress(' <p> foo bar </p>')); <nl> } <nl> /* <nl> ", "msg": "reduce compress tests as minify tests exists"}
{"diff_id": 2632, "repo": "luyadev/luya", "sha": "2d50e15e290de80a6d6a6854e3802865e1044672", "time": "05.11.2018 22:01:29", "diff": "mmm a / core/web/jsonld/BaseThing.php <nl> ppp b / core/web/jsonld/BaseThing.php <nl>@@ -61,7 +61,7 @@ abstract class BaseThing extends BaseObject implements Arrayable, ThingInterface <nl> */ <nl> public function toArray(array $fields = [], array $expand = [], $recursive = true) <nl> { <nl> - $array = $this->removeNullValues($this->internalToArray($fields, $expand, $recursive)); <nl> + $array = $this->removeEmptyValues($this->internalToArray($fields, $expand, $recursive)); <nl> if ($this->typeDefintion()) { <nl> $array['@type'] = $this->typeDefintion(); <nl> @@ -84,14 +84,14 @@ abstract class BaseThing extends BaseObject implements Arrayable, ThingInterface <nl> * @param array $haystack <nl> * @return array <nl> */ <nl> - private function removeNullValues(array $haystack) <nl> + private function removeEmptyValues(array $haystack) <nl> { <nl> foreach ($haystack as $key => $value) { <nl> if (is_array($value)) { <nl> - $haystack[$key] = $this->removeNullValues($value); <nl> + $haystack[$key] = $this->removeEmptyValues($value); <nl> } <nl> - <nl> - if ($value === null) { <nl> + // remove empty values as there is no property which allows empty values. <nl> + if (empty($value)) { <nl> unset($haystack[$key]); <nl> } <nl> } <nl> ", "msg": "remove empty values by default"}
{"diff_id": 2821, "repo": "auth0/auth0-php", "sha": "14ae230f8f5aab8748cb6b8e9f68de4c48fd5406", "time": "19.02.2017 18:52:09", "diff": "mmm a / src/API/Management/Tickets.php <nl> ppp b / src/API/Management/Tickets.php <nl>@@ -31,7 +31,7 @@ class Tickets extends GenericResource <nl> public function createPasswordChangeTicketByEmail($email, $new_password = null, $result_url = null, $connection_id = null) <nl> { <nl> - return $this->createPasswordChangeTicketRaw(null, $mail, $new_password, $result_url, $connection_id); <nl> + return $this->createPasswordChangeTicketRaw(null, $email, $new_password, $result_url, $connection_id); <nl> } <nl> public function createPasswordChangeTicketRaw($user_id = null, $email = null, $new_password = null, $result_url = null, $connection_id = null) <nl> ", "msg": "[BUGFIX] Use proper argument for createPasswordChangeTicketRaw"}
{"diff_id": 2828, "repo": "auth0/auth0-php", "sha": "6b28375e6261656f64297fb43e4617058affd622", "time": "28.08.2017 14:59:30", "diff": "mmm a / src/Auth0.php <nl> ppp b / src/Auth0.php <nl>@@ -230,7 +230,7 @@ class Auth0 { <nl> $this->setStore(new SessionStore()); <nl> } <nl> - $this->authentication = new Authentication ($this->domain, $this->client_id, $this->client_secret, $this->guzzleOptions); <nl> + $this->authentication = new Authentication ($this->domain, $this->client_id, $this->client_secret, $this->audience, $this->scope, $this->guzzleOptions); <nl> $this->user = $this->store->get(\"user\"); <nl> $this->access_token = $this->store->get(\"access_token\"); <nl> ", "msg": "Fixing issue with Guzzle options being ignored."}
{"diff_id": 2831, "repo": "auth0/auth0-php", "sha": "72337e7f752034c19abd95dd891fe79c74535b2e", "time": "10.03.2018 21:03:01", "diff": "mmm a / src/Auth0.php <nl> ppp b / src/Auth0.php <nl>@@ -158,7 +158,8 @@ class Auth0 { <nl> * - persist_id_token (Boolean) Optional. Indicates if you want to persist the id token, default false <nl> * - store (Mixed) Optional. Indicates how we store the persisting methods, default is session <nl> * store, you can pass false to avoid storing it or a class that <nl> - * implements a store (get, set, delete). TODO: add a proper interface <nl> + * implements the StorageInterface <nl> + * - state_handler (Mixed) Optional Indicates how to handle the state, default is SessionStateHandler using a newly opened session, you can pass false to avoid handling the state or a class that implements the StateHandler interface <nl> * - debug (Boolean) Optional. Default false <nl> * - guzzle_options (Object) Optional. Options forwarded to Guzzle <nl> * <nl> ", "msg": "Auth0 class documentation fixed for store and state handler"}
{"diff_id": 2861, "repo": "auth0/auth0-php", "sha": "da9d128cc2215df844b0c14f5336c00ecae287cd", "time": "25.02.2019 09:33:24", "diff": "mmm a / src/API/Management/ClientGrants.php <nl> ppp b / src/API/Management/ClientGrants.php <nl>@@ -169,9 +169,16 @@ class ClientGrants extends GenericResource <nl> ->call(); <nl> } <nl> + /* <nl> + * Deprecated <nl> + */ <nl> + <nl> + // phpcs:disable <nl> + <nl> /** <nl> * Get a Client Grant. <nl> - * TODO: Deprecate, cannot get a Client Grant by ID. <nl> + * <nl> + * @deprecated 5.4.0, no such endpoint. <nl> * <nl> * @param string $id Client Grant ID. <nl> * @param null|string $audience Client Grant audience to filter by. <nl> @@ -179,6 +186,8 @@ class ClientGrants extends GenericResource <nl> * @return mixed <nl> * <nl> * @throws \\Exception Thrown by the HTTP client when there is a problem with the API call. <nl> + * <nl> + * @codeCoverageIgnore - Deprecated. <nl> */ <nl> public function get($id, $audience = null) <nl> { <nl> @@ -191,4 +200,6 @@ class ClientGrants extends GenericResource <nl> return $request->call(); <nl> } <nl> + <nl> + // phpcs:enable <nl> } <nl> ", "msg": "Official deprecation of \\Auth0\\SDK\\API\\Management\\ClientGrants::get"}
{"diff_id": 2871, "repo": "auth0/auth0-php", "sha": "b235b95e625a71c7224becbe1236f27b727e8660", "time": "27.06.2019 15:17:52", "diff": "mmm a / src/API/Management/GenericResource.php <nl> ppp b / src/API/Management/GenericResource.php <nl>@@ -75,17 +75,15 @@ class GenericResource <nl> * <nl> * @return array <nl> */ <nl> - protected function normalizeIncludeTotals(array $params, $include_totals = null) <nl> + protected function normalizeIncludeTotals(array $params, $include_totals = false) <nl> { <nl> // User parameter include_totals if params does not have the key. <nl> if (! isset( $params['include_totals'] )) { <nl> $params['include_totals'] = $include_totals; <nl> } <nl> - // If include_totals is set (not null), then make sure we have a boolean. <nl> - if (isset( $params['include_totals'] )) { <nl> + // Make sure we have a boolean. <nl> $params['include_totals'] = boolval( $params['include_totals'] ); <nl> - } <nl> return $params; <nl> } <nl> ", "msg": "Change normalizeIncludeTotals() in GenericResource to have sane defaults"}
{"diff_id": 2885, "repo": "auth0/auth0-php", "sha": "b8f1ac15e52fa65907486c37e32e7778c9902c58", "time": "26.09.2019 08:36:17", "diff": "mmm a / src/Helpers/JWKFetcher.php <nl> ppp b / src/Helpers/JWKFetcher.php <nl>@@ -98,7 +98,7 @@ class JWKFetcher <nl> /** <nl> * Fetch x509 cert for RS256 token decoding. <nl> * <nl> - * TODO: Deprecate, use $this->getFormatted() <nl> + * @deprecated 5.6.0, use $this->getKeys(). <nl> * <nl> * @param string $jwks_url URL to the JWKS. <nl> * @param string|null $kid Key ID to use; returns first JWK if $kid is null or empty. <nl> @@ -151,7 +151,7 @@ class JWKFetcher <nl> /** <nl> * Get a JWK from a JWKS using a key ID, if provided. <nl> * <nl> - * TODO: Deprecate <nl> + * @deprecated 5.6.0, use $this->getKeys(). <nl> * <nl> * @param array $jwks JWKS to parse. <nl> * @param null|string $kid Key ID to return; returns first JWK if $kid is null or empty. <nl> @@ -182,7 +182,7 @@ class JWKFetcher <nl> /** <nl> * Check if an array within an array has a non-empty first item. <nl> * <nl> - * TODO: Deprecate <nl> + * @deprecated 5.6.0, not used. <nl> * <nl> * @param array|null $array Main array to check. <nl> * @param string $key Key pointing to a sub-array. <nl> ", "msg": "Deprecated unused JWKFetcher methods"}
{"diff_id": 2897, "repo": "auth0/auth0-php", "sha": "d669b9812b2f875cdf3eaf66fdc6ab4bf8b7b072", "time": "29.10.2019 13:43:22", "diff": "mmm a / tests/bootstrap.php <nl> ppp b / tests/bootstrap.php <nl>@@ -3,6 +3,9 @@ $tests_dir = dirname(__FILE__).'/'; <nl> require_once $tests_dir.'../vendor/autoload.php'; <nl> +ini_set('session.use_cookies', false); <nl> +ini_set('session.cache_limiter', false); <nl> + <nl> define( 'AUTH0_PHP_TEST_INTEGRATION_SLEEP', 160000 ); <nl> if (! defined( 'AUTH0_PHP_TEST_JSON_DIR' )) { <nl> ", "msg": "Add ini setting to avoid cookies in test env"}
{"diff_id": 2901, "repo": "auth0/auth0-php", "sha": "1b7b86ede7ecdefd2cf3f7f820cf7dbeb752dd03", "time": "11.11.2019 10:17:58", "diff": "mmm a / src/Auth0.php <nl> ppp b / src/Auth0.php <nl>@@ -286,19 +286,13 @@ class Auth0 <nl> $this->dontPersist('id_token'); <nl> } <nl> - $session_base_name = ! empty( $config['session_base_name'] ) ? $config['session_base_name'] : SessionStore::BASE_NAME; <nl> + $session_base_name = $config['session_base_name'] ?? SessionStore::BASE_NAME; <nl> - if (isset($config['store'])) { <nl> - if ($config['store'] === false) { <nl> - $emptyStore = new EmptyStore(); <nl> - $this->setStore($emptyStore); <nl> - } else { <nl> - $this->setStore($config['store']); <nl> + $sessionStore = $config['store'] ?? new SessionStore($session_base_name); <nl> + if (! $sessionStore instanceof StoreInterface) { <nl> + $sessionStore = new EmptyStore(); <nl> } <nl> - } else { <nl> - $sessionStore = new SessionStore($session_base_name); <nl> $this->setStore($sessionStore); <nl> - } <nl> if (isset($config['state_handler'])) { <nl> if ($config['state_handler'] === false) { <nl> ", "msg": "Simplify user session storage initialization"}
{"diff_id": 2970, "repo": "academico-sis/academico", "sha": "0d0e1f54335af37b27e0222024be8f56756afaf0", "time": "17.06.2019 23:47:50", "diff": "mmm a / resources/views/enrollments/show.blade.php <nl> ppp b / resources/views/enrollments/show.blade.php <nl>@if(isset($enrollment->result)) <nl> <p> <nl> - <a href=\"/result/{{ $enrollment->result->id }}\" class=\"btn btn-xs btn-info\"> <nl> + <a href=\"/result/{{ $enrollment->id }}\" class=\"btn btn-xs btn-info\"> <nl> <i class=\"fa fa-eye\"></i> {{ $enrollment->result['result_name']['name'] }} <nl> </a> <nl> </p> <nl> ", "msg": "enrollment result ref fix"}
{"diff_id": 2989, "repo": "academico-sis/academico", "sha": "6eca8d6127e0534bf8e189c533eb00778bb2e74e", "time": "12.08.2019 09:02:44", "diff": "mmm a / app/Exceptions/Handler.php <nl> ppp b / app/Exceptions/Handler.php <nl>@@ -35,7 +35,7 @@ class Handler extends ExceptionHandler <nl> */ <nl> public function report(Exception $exception) <nl> { <nl> - if (app()->bound('sentry')) { <nl> + if (app()->bound('sentry') && $this->shouldReport($exception)) { <nl> app('sentry')->captureException($exception); <nl> } <nl> @@ -51,10 +51,6 @@ class Handler extends ExceptionHandler <nl> */ <nl> public function render($request, Exception $exception) <nl> { <nl> - if (app()->bound('sentry')) { <nl> - app('sentry')->captureException($exception); <nl> - } <nl> - <nl> return parent::render($request, $exception); <nl> } <nl> } <nl> ", "msg": "restrict error reporting"}
{"diff_id": 3024, "repo": "academico-sis/academico", "sha": "d539b04dd44d50644ed796ab7b4203288a8829c4", "time": "08.03.2020 16:10:44", "diff": "mmm a / app/Http/Controllers/AttendanceController.php <nl> ppp b / app/Http/Controllers/AttendanceController.php <nl>@@ -125,7 +125,8 @@ class AttendanceController extends Controller <nl> // if the course has any past events <nl> if($events->count() == 0 || $course->enrollments()->count() == 0) { <nl> - abort(404, 'The course has no attendance record'); <nl> + \\Alert::add('error', 'This course has no events.')->flash(); <nl> + return back(); <nl> } <nl> $enrollments = $course->enrollments()->with('student')->get(); <nl> ", "msg": "better error management for courses with no events"}
{"diff_id": 3028, "repo": "academico-sis/academico", "sha": "f35880a0802406d7b812ce31cbaa63f21da1bf0a", "time": "14.03.2020 16:56:22", "diff": "mmm a / app/Http/Controllers/LeadStatusController.php <nl> ppp b / app/Http/Controllers/LeadStatusController.php <nl>@@ -26,6 +26,9 @@ class LeadStatusController extends Controller <nl> public function update(Request $request) <nl> { <nl> + $activeStudentsGroupId = Config::where('name', 'mailerlite_students_group_id')->first()->value; <nl> + $inactiveStudentsGroupId = Config::where('name', 'mailerlite_oldstudents_group_id')->first()->value; <nl> + <nl> // create or update the lead status record for the selected student <nl> $student = Student::findOrFail($request->input('student')); <nl> $student->lead_type_id = $request->input('status'); <nl> @@ -34,8 +37,6 @@ class LeadStatusController extends Controller <nl> // converted, active clients <nl> if ($request->input('status') == 1) <nl> { <nl> - $groupId = Config::where('name', 'mailerlite_students_group_id')->first()->value; <nl> - $parents_groupId = Config::where('name', 'mailerlite_parents_group_id')->first()->value; <nl> $subscriber = [ <nl> 'email' => $student->email, <nl> @@ -44,16 +45,26 @@ class LeadStatusController extends Controller <nl> 'lastname' => $student->lastname <nl> ] <nl> ]; <nl> - $this->subscribeToList($subscriber, $groupId); <nl> + $this->subscribeToList($subscriber, $activeStudentsGroupId); <nl> + <nl> + // contacts <nl> + foreach($student->contacts as $contact) <nl> + { <nl> + $subscriber = [ <nl> + 'email' => $contact->email, <nl> + 'name' => $contact->firstname, <nl> + 'fields' => [ <nl> + 'lastname' => $contact->lastname <nl> + ] <nl> + ]; <nl> + $this->subscribeToList($subscriber, $activeStudentsGroupId); <nl> + } <nl> } <nl> - // oldstudent <nl> - if ($request->input('status') == 2 || $request->input('status') == 3 || $request->input('status') == 4) <nl> + // inactive or formerClient <nl> + if ($request->input('status') == 2 || $request->input('status') == 3) <nl> { <nl> - $groupId = Config::where('name', 'mailerlite_oldstudents_group_id')->first()->value; <nl> - $parents_groupId = Config::where('name', 'mailerlite_oldstudents_group_id')->first()->value; <nl> - <nl> $subscriber = [ <nl> 'email' => $student->email, <nl> 'name' => $student->firstname, <nl> @@ -61,9 +72,7 @@ class LeadStatusController extends Controller <nl> 'lastname' => $student->lastname <nl> ] <nl> ]; <nl> - $this->subscribeToList($subscriber, $groupId); <nl> - } <nl> - <nl> + $this->subscribeToList($subscriber, $inactiveStudentsGroupId); <nl> // contacts <nl> foreach($student->contacts as $contact) <nl> @@ -75,65 +84,19 @@ class LeadStatusController extends Controller <nl> 'lastname' => $contact->lastname <nl> ] <nl> ]; <nl> - $this->subscribeToList($subscriber, $parents_groupId); <nl> + $this->subscribeToList($subscriber, $inactiveStudentsGroupId); <nl> + } <nl> } <nl> - <nl> return $student->lead_type_id; <nl> } <nl> public function reset_all_converted_leads() <nl> { <nl> - $api_key = Config::where('name', 'mailerlite_api_key')->first()->value; <nl> - <nl> - $students = Student::where('lead_type_id', '=', 1)->get(); <nl> - $groupId = Config::where('name', 'mailerlite_oldstudents_group_id')->first()->value; <nl> - $parents_groupId = Config::where('name', 'mailerlite_oldstudents_group_id')->first()->value; <nl> - $groupsApi = (new \\MailerLiteApi\\MailerLite($api_key))->groups(); <nl> - <nl> - $previousGroupId = Config::where('name', 'mailerlite_students_group_id')->first()->value; <nl> - $previousParentsGroupId = Config::where('name', 'mailerlite_parents_group_id')->first()->value; <nl> - <nl> - $students = []; <nl> - $parents = []; <nl> - <nl> - foreach ($students as $student) { <nl> - $student->update(['lead_type_id' => 4]); <nl> - <nl> - // unsubscribe from current students group <nl> - $groupsApi->removeSubscriber($previousGroupId, $student->email); // returns empty response <nl> - <nl> - array_push($students, [ <nl> - 'email' => $student->email, <nl> - 'name' => ucwords($student->firstname), <nl> - 'fields' => [ <nl> - 'last_name' => ucwords($student->lastname), <nl> - 'birthdate' => $student->birthdate ?? '' <nl> - ]]); <nl> - <nl> - foreach ($student->contacts as $contact) <nl> - { <nl> - $groupsApi->removeSubscriber($previousParentsGroupId, $contact->email); // returns empty response <nl> - <nl> - array_push($parents, <nl> - [ <nl> - 'email' => $contact->email, <nl> - 'name' => ucwords($contact->firstname), <nl> - 'fields' => [ <nl> - 'last_name' => ucwords($contact->lastname), <nl> - ]]); <nl> - } <nl> - <nl> - <nl> - $options = [ <nl> - 'resubscribe' => false, <nl> - 'autoresponders' => false // send autoresponders for successfully imported subscribers <nl> - ]; <nl> - } <nl> - <nl> - $groupsApi->importSubscribers($groupId, $students, $options); <nl> - $groupsApi->importSubscribers($parents_groupId, $parents, $options); <nl> + // change all active students to potential <nl> + $students = Student::where('lead_type_id', '=', 1)->update(['lead_type_id' => 4]); <nl> + // TODO change this to a queuable command! <nl> return back(); <nl> } <nl> } <nl> ", "msg": "simplify leads email sync"}
{"diff_id": 3030, "repo": "academico-sis/academico", "sha": "62596fd54e1ec02f8a8b5332e7e6d184b600b8f3", "time": "16.03.2020 15:22:44", "diff": "mmm a / app/Http/Controllers/HomeController.php <nl> ppp b / app/Http/Controllers/HomeController.php <nl>@@ -101,8 +101,8 @@ class HomeController extends Controller <nl> Log::info(backpack_user()->firstname . ' ' . backpack_user()->lastname . \" accessed the admin dashboard\"); <nl> - // todo refactor this !! <nl> - $events = Event::orderBy('id', 'desc')->get()->toArray(); <nl> + // todo optimize this !! <nl> + $events = Event::where('start', '>', (Carbon::now()->subDays(15)))->where('end', '<', (Carbon::now()->addDays(15)))->orderBy('id', 'desc')->get()->toArray(); <nl> $teachers = Teacher::with('user')->get()->toArray(); <nl> @@ -129,7 +129,7 @@ class HomeController extends Controller <nl> 'currentPeriod' => $currentPeriod, <nl> 'enrollmentsPeriod' => $enrollmentsPeriod, <nl> 'total_enrollment_count' => $currentPeriod->internal_enrollments_count, <nl> - 'pending_attendance' => count((new Attendance)->get_pending_attendance()), <nl> + 'pending_attendance' => count((new Attendance)->get_pending_attendance()), // optimize <nl> 'unassigned_events' => (new Event)->unassigned_teacher->count(), <nl> 'upcoming_leaves' => Leave::upcoming_leaves(), <nl> 'resources' => $teachers, <nl> ", "msg": "optimize events array for dashboard calendar"}
{"diff_id": 3100, "repo": "academico-sis/academico", "sha": "dff2ad95b199a62bd5f3292c142b37fb0f32c766", "time": "28.06.2021 20:50:57", "diff": "mmm a / app/Http/Controllers/Admin/PaymentCrudController.php <nl> ppp b / app/Http/Controllers/Admin/PaymentCrudController.php <nl>@@ -104,18 +104,11 @@ class PaymentCrudController extends CrudController <nl> abort(403); <nl> } <nl> - if (! $payment->invoice || ! $payment->invoice->enrollment) <nl> + if (! $payment->invoice) <nl> { <nl> abort(404, 'No enrollment found for this payment'); <nl> } <nl> - return view('enrollments.show', [ <nl> - 'enrollment' => $payment->invoice->enrollment->load('invoice')->load('invoice.payments'), <nl> - 'products' => $payment->invoice()->with('invoiceDetails')->get(), <nl> - 'comments' => $payment->invoice->enrollment->comments, <nl> - 'scholarships' => Scholarship::all(), <nl> - 'availablePaymentMethods' => Paymentmethod::all(), <nl> - 'writeaccess' => $payment->invoice->enrollment->status_id !== 2 && backpack_user()->can('enrollments.edit'), <nl> - ]); <nl> + return \\Redirect::route('invoice.show', ['id' => $payment->invoice_id]); <nl> } <nl> } <nl> ", "msg": "Make payment \"show\" action redirect to invoice instead of enrollment"}
{"diff_id": 3126, "repo": "academico-sis/academico", "sha": "522358692f687f567cf068c65ca6057f26ed0194", "time": "06.01.2022 18:37:16", "diff": "mmm a / app/Http/Controllers/EnrollmentController.php <nl> ppp b / app/Http/Controllers/EnrollmentController.php <nl>@@ -18,6 +18,7 @@ use App\\Models\\Student; <nl> use App\\Models\\Tax; <nl> use App\\Services\\AFSantiagoEnrollmentSheetService; <nl> use App\\Traits\\PeriodSelection; <nl> +use Carbon\\Carbon; <nl> use Illuminate\\Http\\Request; <nl> use Illuminate\\Support\\Facades\\App; <nl> use Illuminate\\Support\\Facades\\Gate; <nl> @@ -104,6 +105,15 @@ class EnrollmentController extends Controller <nl> // TODO delete grades and/or skills <nl> + // Create attendance in new course. <nl> + $events = $course->events->where('start', '<', (new Carbon())->toDateString()); <nl> + foreach ($events as $event) { <nl> + $event->attendance()->create([ <nl> + 'student_id' => $enrollment->student_id, <nl> + 'attendance_type_id' => 3, <nl> + ]); <nl> + } <nl> + <nl> // display a confirmation message and redirect to enrollment details <nl> Alert::success(__('The enrollment has been updated'))->flash(); <nl> ", "msg": "Apply default attendance when moving a student from a course to another"}
{"diff_id": 3140, "repo": "academico-sis/academico", "sha": "832b862038a325d4a473e0aa3fa86f8ac226b25f", "time": "16.03.2022 21:28:21", "diff": "mmm a / app/Http/Controllers/InvoiceController.php <nl> ppp b / app/Http/Controllers/InvoiceController.php <nl>@@ -251,7 +251,7 @@ class InvoiceController extends Controller <nl> } <nl> foreach ($invoice->enrollments as $enrollment) { <nl> - if ($invoice->totalPrice() == $invoice->paidTotal() && $enrollment->product->price == $enrollment->product->totalPaidPrice()) { <nl> + if ($invoice->totalPrice() == $invoice->paidTotal() && $enrollment->product->price <= $enrollment->product->totalPaidPrice()) { <nl> $enrollment->product->markAsPaid(); <nl> } <nl> } <nl> ", "msg": "allow to mark enrollment as paid if invoice global price is greater than enrollment price"}
{"diff_id": 3146, "repo": "academico-sis/academico", "sha": "f9bc1d105266e95ea9e1097e9fc85832ad6a7b42", "time": "28.05.2022 10:06:12", "diff": "mmm a / resources/views/results/show.blade.php <nl> ppp b / resources/views/results/show.blade.php <nl></a> <nl> @if (config('certificates-generation.supported') && $enrollment->result && backpack_user()->hasRole(['admin', 'secretary'])) <nl> - <a href=\"{{ route('enrollment-export-result', ['enrollment' => $enrollment->id]) }}\" class=\"btn btn-primary @if($enrollment->enrollmentStatus->id !== 1 && $enrollment->result->result_type_id !== 1) disabled @endif\">@lang('Generate grade report')</a> <nl> + <a href=\"{{ route('enrollment-export-result', ['enrollment' => $enrollment->id]) }}\" class=\"btn btn-primary @if($enrollment->enrollmentStatus->id !== 1) disabled @endif\">@lang('Generate grade report')</a> <nl> <a href=\"{{ route('enrollment-export-certificate', ['enrollment' => $enrollment->id]) }}\" class=\"btn btn-primary @if ($enrollment->enrollmentStatus->id !== 1 && $enrollment->result->result_type_id !== 1) disabled @endif\">@lang('Generate diploma')</a> <nl> @if ($enrollment->enrollmentStatus->id === 1) {{__('The enrollment is unpaid') }} @endif <nl> @if ($enrollment->result->result_type_id !== 1) {{__('The result is not validated') }} @endif <nl> ", "msg": "allow to export grades report even when the course is not validated"}
{"diff_id": 3163, "repo": "php-enqueue/enqueue-dev", "sha": "8c17183e875136511c7612a168601ce421c82b5a", "time": "23.05.2017 16:47:34", "diff": "mmm a / pkg/test/ClassExtensionTrait.php <nl> ppp b / pkg/test/ClassExtensionTrait.php <nl>@@ -10,7 +10,7 @@ trait ClassExtensionTrait <nl> $this->assertTrue( <nl> $rc->isSubclassOf($expected), <nl> - sprintf('Failed assert that class %s extends %s class.', $actual, $expected) <nl> + sprintf('Failed assert that class %s extends %s class', $actual, $expected) <nl> ); <nl> } <nl> ", "msg": "test new release command. It releases only packages with changes."}
{"diff_id": 3166, "repo": "php-enqueue/enqueue-dev", "sha": "779121158e38e64696f515ebf4b955d3d67f2b45", "time": "09.06.2017 20:59:56", "diff": "mmm a / pkg/stomp/Tests/Functional/StompCommonUseCasesTest.php <nl> ppp b / pkg/stomp/Tests/Functional/StompCommonUseCasesTest.php <nl>@@ -48,7 +48,7 @@ class StompCommonUseCasesTest extends \\PHPUnit\\Framework\\TestCase <nl> $this->assertNull($message); <nl> $this->assertGreaterThan(1.5, $endAt - $startAt); <nl> - $this->assertLessThan(2.5, $endAt - $startAt); <nl> + $this->assertLessThan(3, $endAt - $startAt); <nl> } <nl> public function testReturnNullImmediatelyOnReceiveNoWait() <nl> ", "msg": "[stomp] fix fragile test"}
{"diff_id": 3181, "repo": "php-enqueue/enqueue-dev", "sha": "321b01c52b5c10df7fecb95f23493570f85384f6", "time": "28.08.2017 12:14:44", "diff": "mmm a / pkg/enqueue-bundle/DependencyInjection/Compiler/BuildTopicMetaSubscribersPass.php <nl> ppp b / pkg/enqueue-bundle/DependencyInjection/Compiler/BuildTopicMetaSubscribersPass.php <nl>@@ -16,6 +16,10 @@ class BuildTopicMetaSubscribersPass implements CompilerPassInterface <nl> { <nl> $processorTagName = 'enqueue.client.processor'; <nl> + if (false == $container->hasDefinition('enqueue.client.meta.topic_meta_registry')) { <nl> + return; <nl> + } <nl> + <nl> $topicsSubscribers = []; <nl> foreach ($container->findTaggedServiceIds($processorTagName) as $serviceId => $tagAttributes) { <nl> $subscriptions = $this->extractSubscriptions($container, $serviceId, $tagAttributes); <nl> ", "msg": "[bundle] do not use client's related stuff if it is disabled"}
{"diff_id": 3185, "repo": "php-enqueue/enqueue-dev", "sha": "2f68d6d45cf1d165399a3b0f3cf4dde1a6e481d2", "time": "25.09.2017 11:49:13", "diff": "mmm a / pkg/redis/Tests/RedisConnectionFactoryTest.php <nl> ppp b / pkg/redis/Tests/RedisConnectionFactoryTest.php <nl>@@ -6,8 +6,9 @@ use Enqueue\\Redis\\RedisConnectionFactory; <nl> use Enqueue\\Redis\\RedisContext; <nl> use Enqueue\\Test\\ClassExtensionTrait; <nl> use Interop\\Queue\\PsrConnectionFactory; <nl> +use PHPUnit\\Framework\\TestCase; <nl> -class RedisConnectionFactoryTest extends \\PHPUnit\\Framework\\TestCase <nl> +class RedisConnectionFactoryTest extends TestCase <nl> { <nl> use ClassExtensionTrait; <nl> @@ -16,38 +17,6 @@ class RedisConnectionFactoryTest extends \\PHPUnit\\Framework\\TestCase <nl> $this->assertClassImplements(PsrConnectionFactory::class, RedisConnectionFactory::class); <nl> } <nl> - public function testCouldBeConstructedWithEmptyConfiguration() <nl> - { <nl> - $factory = new RedisConnectionFactory([]); <nl> - <nl> - $this->assertAttributeEquals([ <nl> - 'host' => null, <nl> - 'port' => null, <nl> - 'timeout' => null, <nl> - 'reserved' => null, <nl> - 'retry_interval' => null, <nl> - 'persisted' => false, <nl> - 'lazy' => true, <nl> - 'vendor' => 'phpredis', <nl> - ], 'config', $factory); <nl> - } <nl> - <nl> - public function testCouldBeConstructedWithCustomConfiguration() <nl> - { <nl> - $factory = new RedisConnectionFactory(['host' => 'theCustomHost']); <nl> - <nl> - $this->assertAttributeEquals([ <nl> - 'host' => 'theCustomHost', <nl> - 'port' => null, <nl> - 'timeout' => null, <nl> - 'reserved' => null, <nl> - 'retry_interval' => null, <nl> - 'persisted' => false, <nl> - 'lazy' => true, <nl> - 'vendor' => 'phpredis', <nl> - ], 'config', $factory); <nl> - } <nl> - <nl> public function testShouldCreateLazyContext() <nl> { <nl> $factory = new RedisConnectionFactory(['lazy' => true]); <nl> ", "msg": "[redis] remote duplicated tests."}
{"diff_id": 3240, "repo": "php-enqueue/enqueue-dev", "sha": "5c9af8de83c071fa2fa5f62dd32bcf5d772d41c7", "time": "15.02.2018 11:07:38", "diff": "mmm a / pkg/simple-client/SimpleClient.php <nl> ppp b / pkg/simple-client/SimpleClient.php <nl>@@ -26,14 +26,20 @@ use Enqueue\\Symfony\\RabbitMqAmqpTransportFactory; <nl> use Interop\\Queue\\PsrContext; <nl> use Interop\\Queue\\PsrProcessor; <nl> use Symfony\\Component\\DependencyInjection\\ContainerBuilder; <nl> +use Symfony\\Component\\DependencyInjection\\ContainerInterface; <nl> final class SimpleClient <nl> { <nl> /** <nl> - * @var ContainerBuilder <nl> + * @var ContainerInterface <nl> */ <nl> private $container; <nl> + /** <nl> + * @var array|string <nl> + */ <nl> + private $config; <nl> + <nl> /** <nl> * The config could be a transport DSN (string) or an array, here's an example of a few DSNs:. <nl> * <nl> @@ -74,10 +80,12 @@ final class SimpleClient <nl> * <nl> * <nl> * @param string|array $config <nl> + * @param ContainerBuilder|null $container <nl> */ <nl> - public function __construct($config) <nl> + public function __construct($config, ContainerBuilder $container = null) <nl> { <nl> - $this->container = $this->buildContainer($config); <nl> + $this->container = $this->buildContainer($config, $container ?: new ContainerBuilder()); <nl> + $this->config = $config; <nl> } <nl> /** <nl> @@ -253,15 +261,15 @@ final class SimpleClient <nl> /** <nl> * @param array|string $config <nl> + * @param ContainerBuilder $container <nl> * <nl> - * @return ContainerBuilder <nl> + * @return ContainerInterface <nl> */ <nl> - private function buildContainer($config) <nl> + private function buildContainer($config, ContainerBuilder $container) <nl> { <nl> $config = $this->buildConfig($config); <nl> $extension = $this->buildContainerExtension(); <nl> - $container = new ContainerBuilder(); <nl> $container->registerExtension($extension); <nl> $container->loadFromExtension($extension->getAlias(), $config); <nl> ", "msg": "[simple-client] Add ability to pass container builder."}
{"diff_id": 3277, "repo": "php-enqueue/enqueue-dev", "sha": "e4f9187cd668f0f10baaae11f1c2f3523fc3dcf2", "time": "02.09.2018 00:07:23", "diff": "mmm a / pkg/redis/RedisConnectionFactory.php <nl> ppp b / pkg/redis/RedisConnectionFactory.php <nl>@@ -50,11 +50,7 @@ class RedisConnectionFactory implements PsrConnectionFactory <nl> } <nl> $this->config = array_replace($this->defaultConfig(), $config); <nl> - if (isset($this->config['vendor'])) { <nl> $vendor = $this->config['vendor']; <nl> - } else { <nl> - $vendor = \"\"; <nl> - } <nl> $supportedVendors = ['predis', 'phpredis', 'custom']; <nl> if (false == in_array($vendor, $supportedVendors, true)) { <nl> ", "msg": "remove not required param check"}
{"diff_id": 3278, "repo": "php-enqueue/enqueue-dev", "sha": "b7046959675a61473a544a38feccb7d17b9d6287", "time": "07.09.2018 18:47:47", "diff": "mmm a / pkg/stomp/BufferedStompClient.php <nl> ppp b / pkg/stomp/BufferedStompClient.php <nl>namespace Enqueue\\Stomp; <nl> use Stomp\\Client; <nl> +use Stomp\\Transport\\Frame; <nl> class BufferedStompClient extends Client <nl> { <nl> @@ -47,12 +48,9 @@ class BufferedStompClient extends Client <nl> } <nl> /** <nl> - * @param string $subscriptionId <nl> - * @param int|float $timeout <nl> - * <nl> - * @return \\Stomp\\Transport\\Frame <nl> + * Timeout is in milliseconds. <nl> */ <nl> - public function readMessageFrame($subscriptionId, $timeout) <nl> + public function readMessageFrame(string $subscriptionId, int $timeout): ?Frame <nl> { <nl> // pop up frame from the buffer <nl> if (isset($this->buffer[$subscriptionId]) && ($frame = array_shift($this->buffer[$subscriptionId]))) { <nl> @@ -63,18 +61,18 @@ class BufferedStompClient extends Client <nl> // do nothing when buffer is full <nl> if ($this->currentBufferSize >= $this->bufferSize) { <nl> - return; <nl> + return null; <nl> } <nl> $startTime = microtime(true); <nl> - $remainingTimeout = $timeout * 1000000; <nl> + $remainingTimeout = $timeout * 1000; <nl> while (true) { <nl> $this->getConnection()->setReadTimeout(0, $remainingTimeout); <nl> // there is nothing to read <nl> if (false === $frame = $this->readFrame()) { <nl> - return; <nl> + return null; <nl> } <nl> if ('MESSAGE' !== $frame->getCommand()) { <nl> @@ -95,7 +93,7 @@ class BufferedStompClient extends Client <nl> $remainingTimeout -= (microtime(true) - $startTime) * 1000000; <nl> if ($remainingTimeout <= 0) { <nl> - return; <nl> + return null; <nl> } <nl> continue; <nl> ", "msg": "[stomp] Fix timeout issue. Use milliseconds."}
{"diff_id": 3281, "repo": "php-enqueue/enqueue-dev", "sha": "2991e07f1957ba767bd7b7a67961a37281d86afa", "time": "11.09.2018 16:29:35", "diff": "mmm a / pkg/stomp/Tests/StompConnectionFactoryConfigTest.php <nl> ppp b / pkg/stomp/Tests/StompConnectionFactoryConfigTest.php <nl>@@ -135,6 +135,22 @@ class StompConnectionFactoryConfigTest extends TestCase <nl> ], <nl> ]; <nl> + yield [ <nl> + ['dsn' => 'stomp:///%2f'], <nl> + [ <nl> + 'host' => 'localhost', <nl> + 'port' => 61613, <nl> + 'login' => 'guest', <nl> + 'password' => 'guest', <nl> + 'vhost' => '/', <nl> + 'buffer_size' => 1000, <nl> + 'connection_timeout' => 1, <nl> + 'sync' => false, <nl> + 'lazy' => true, <nl> + 'ssl_on' => false, <nl> + ], <nl> + ]; <nl> + <nl> yield [ <nl> ['host' => 'localhost', 'port' => 1234, 'foo' => 'bar'], <nl> [ <nl> ", "msg": "[stomp] Add test that ensure path is urldecoded."}
{"diff_id": 3283, "repo": "php-enqueue/enqueue-dev", "sha": "b04dea5058cbf43c9bddc0be03109e9a24861bd8", "time": "17.09.2018 16:30:45", "diff": "mmm a / pkg/amqp-tools/ConnectionConfig.php <nl> ppp b / pkg/amqp-tools/ConnectionConfig.php <nl>@@ -107,9 +107,10 @@ class ConnectionConfig <nl> /** <nl> * @param string[] $extensions <nl> */ <nl> - public function addSupportedScheme(string $schema, array $extensions = []): self <nl> + public function addSupportedScheme(string $schema): self <nl> { <nl> - $this->supportedSchemes[$schema] = $extensions; <nl> + $this->supportedSchemes[] = $schema; <nl> + $this->supportedSchemes = array_unique($this->supportedSchemes); <nl> return $this; <nl> } <nl> @@ -380,7 +381,7 @@ class ConnectionConfig <nl> { <nl> $dsn = new Dsn($dsn); <nl> - $supportedSchemes = array_keys($this->supportedSchemes); <nl> + $supportedSchemes = $this->supportedSchemes; <nl> if (false == in_array($dsn->getSchemeProtocol(), $supportedSchemes, true)) { <nl> throw new \\LogicException(sprintf( <nl> 'The given scheme protocol \"%s\" is not supported. It must be one of \"%s\".', <nl> ", "msg": "revert unrelevant changes"}
{"diff_id": 3295, "repo": "php-enqueue/enqueue-dev", "sha": "697d9513b6e21285a603fac02510ca3a8861a3a7", "time": "30.10.2018 16:34:01", "diff": "mmm a / pkg/dbal/DbalConsumer.php <nl> ppp b / pkg/dbal/DbalConsumer.php <nl>@@ -144,8 +144,12 @@ class DbalConsumer implements Consumer <nl> $this->deleteMessage($message->getDeliveryId()); <nl> } <nl> - private function deleteMessage(?string $deliveryId): void <nl> + private function deleteMessage(string $deliveryId): void <nl> { <nl> + if (empty($deliveryId)) { <nl> + throw new \\LogicException(sprintf('Expected record was removed but it is not. Delivery id: \"%s\"', $deliveryId)); <nl> + } <nl> + <nl> $this->getConnection()->delete( <nl> $this->getContext()->getTableName(), <nl> ['delivery_id' => $deliveryId], <nl> ", "msg": "Fixed message deleting in consumer"}
{"diff_id": 3296, "repo": "php-enqueue/enqueue-dev", "sha": "9a568b97660b08108be6d3e5a761407d8e3a0052", "time": "01.11.2018 10:10:54", "diff": "mmm a / pkg/amqp-lib/AmqpConnectionFactory.php <nl> ppp b / pkg/amqp-lib/AmqpConnectionFactory.php <nl>@@ -94,6 +94,7 @@ class AmqpConnectionFactory implements InteropAmqpConnectionFactory, DelayStrate <nl> 'verify_peer' => $this->config->isSslVerify(), <nl> 'verify_peer_name' => $this->config->isSslVerify(), <nl> 'passphrase' => $this->getConfig()->getSslPassPhrase(), <nl> + 'ciphers' => $this->config->getOption('ciphers', ''), <nl> ], function ($value) { return '' !== $value; }); <nl> $con = new AMQPSSLConnection( <nl> ", "msg": "Add 'ciphers' ssl option as defined in It can now be passed through driver_options"}
{"diff_id": 3299, "repo": "php-enqueue/enqueue-dev", "sha": "1b0c325e92657b740239499d4f7233fda754ebd2", "time": "05.11.2018 10:47:57", "diff": "mmm a / pkg/dbal/DbalConsumerHelperTrait.php <nl> ppp b / pkg/dbal/DbalConsumerHelperTrait.php <nl>@@ -84,9 +84,7 @@ trait DbalConsumerHelperTrait <nl> { <nl> if (null === $this->redeliverMessagesLastExecutedAt) { <nl> $this->redeliverMessagesLastExecutedAt = microtime(true); <nl> - } <nl> - <nl> - if ((microtime(true) - $this->redeliverMessagesLastExecutedAt) < 1) { <nl> + } elseif ((microtime(true) - $this->redeliverMessagesLastExecutedAt) < 1) { <nl> return; <nl> } <nl> @@ -109,15 +107,14 @@ trait DbalConsumerHelperTrait <nl> { <nl> if (null === $this->removeExpiredMessagesLastExecutedAt) { <nl> $this->removeExpiredMessagesLastExecutedAt = microtime(true); <nl> - } <nl> - <nl> - if ((microtime(true) - $this->removeExpiredMessagesLastExecutedAt) < 1) { <nl> + } elseif ((microtime(true) - $this->removeExpiredMessagesLastExecutedAt) < 1) { <nl> return; <nl> } <nl> $this->getConnection()->createQueryBuilder() <nl> ->delete($this->getContext()->getTableName()) <nl> ->andWhere('(time_to_live IS NOT NULL) AND (time_to_live < :now)') <nl> + ->andWhere('(redelivered = false OR delivery_id IS NULL)') <nl> ->setParameter(':now', (int) time(), Type::BIGINT) <nl> ->setParameter('redelivered', false, Type::BOOLEAN) <nl> ->execute() <nl> ", "msg": "[dbal] fix remove expired messages."}
{"diff_id": 3306, "repo": "php-enqueue/enqueue-dev", "sha": "eca749a38c3e7dfb0df1676e10e60702f8888f45", "time": "13.12.2018 16:54:03", "diff": "mmm a / pkg/job-queue/Test/DbalPersistedConnection.php <nl> ppp b / pkg/job-queue/Test/DbalPersistedConnection.php <nl>@@ -71,10 +71,16 @@ class DbalPersistedConnection extends Connection <nl> */ <nl> protected function setConnected($connected) <nl> { <nl> - $isConnected = new \\ReflectionProperty('Doctrine\\DBAL\\Connection', '_isConnected'); <nl> - $isConnected->setAccessible(true); <nl> - $isConnected->setValue($this, $connected); <nl> - $isConnected->setAccessible(false); <nl> + $rc = new \\ReflectionClass(Connection::class); <nl> + $rp = $rc->hasProperty('isConnected') ? <nl> + $rc->getProperty('isConnected') : <nl> + $rc->getProperty('_isConnected') <nl> + ; <nl> + <nl> + <nl> + $rp->setAccessible(true); <nl> + $rp->setValue($this, $connected); <nl> + $rp->setAccessible(false); <nl> } <nl> /** <nl> @@ -134,10 +140,15 @@ class DbalPersistedConnection extends Connection <nl> */ <nl> private function setTransactionNestingLevel($level) <nl> { <nl> - $prop = new \\ReflectionProperty('Doctrine\\DBAL\\Connection', '_transactionNestingLevel'); <nl> - $prop->setAccessible(true); <nl> - <nl> - return $prop->setValue($this, $level); <nl> + $rc = new \\ReflectionClass(Connection::class); <nl> + $rp = $rc->hasProperty('transactionNestingLevel') ? <nl> + $rc->getProperty('transactionNestingLevel') : <nl> + $rc->getProperty('_transactionNestingLevel') <nl> + ; <nl> + <nl> + $rp->setAccessible(true); <nl> + $rp->setValue($this, $level); <nl> + $rp->setAccessible(false); <nl> } <nl> /** <nl> ", "msg": "[job-queue] Fix tests on newer dbal versions."}
{"diff_id": 3316, "repo": "php-enqueue/enqueue-dev", "sha": "828127672a8a1a57723f83369adc9f5f8e2b6967", "time": "21.01.2019 10:23:16", "diff": "mmm a / pkg/dbal/DbalProducer.php <nl> ppp b / pkg/dbal/DbalProducer.php <nl>@@ -115,7 +115,7 @@ class DbalProducer implements Producer <nl> } <nl> try { <nl> - $this->context->getDbalConnection()->insert($this->context->getTableName(), $dbalMessage, [ <nl> + $rowsAffected = $this->context->getDbalConnection()->insert($this->context->getTableName(), $dbalMessage, [ <nl> 'id' => Type::GUID, <nl> 'published_at' => Type::INTEGER, <nl> 'body' => Type::TEXT, <nl> @@ -125,10 +125,14 @@ class DbalProducer implements Producer <nl> 'queue' => Type::STRING, <nl> 'time_to_live' => Type::INTEGER, <nl> 'delayed_until' => Type::INTEGER, <nl> - 'redelivered' => Type::BOOLEAN, <nl> + 'redelivered' => Type::SMALLINT, <nl> 'delivery_id' => Type::STRING, <nl> 'redeliver_after' => Type::BIGINT, <nl> ]); <nl> + <nl> + if ($rowsAffected !== 1) { <nl> + throw new Exception('The message was not enqueued. Dbal did not confirm that record inserted.'); <nl> + } <nl> } catch (\\Exception $e) { <nl> throw new Exception('The transport fails to send the message due to some internal error.', 0, $e); <nl> } <nl> ", "msg": "Exception on affected record !=1.\nadditional exception; avoid using Type::BOOLEAN."}
{"diff_id": 3339, "repo": "php-enqueue/enqueue-dev", "sha": "b7b6b8158950b116dbff65ade4ee579c3958105c", "time": "24.05.2019 17:07:00", "diff": "mmm a / pkg/enqueue/Symfony/Client/ConsumeCommand.php <nl> ppp b / pkg/enqueue/Symfony/Client/ConsumeCommand.php <nl>@@ -5,7 +5,6 @@ namespace Enqueue\\Symfony\\Client; <nl> use Enqueue\\Client\\DriverInterface; <nl> use Enqueue\\Consumption\\ChainExtension; <nl> use Enqueue\\Consumption\\Extension\\ExitStatusExtension; <nl> -use Enqueue\\Consumption\\Extension\\LoggerExtension; <nl> use Enqueue\\Consumption\\ExtensionInterface; <nl> use Enqueue\\Consumption\\QueueConsumerInterface; <nl> use Enqueue\\Symfony\\Consumption\\ChooseLoggerCommandTrait; <nl> @@ -18,7 +17,6 @@ use Symfony\\Component\\Console\\Command\\Command; <nl> use Symfony\\Component\\Console\\Input\\InputArgument; <nl> use Symfony\\Component\\Console\\Input\\InputInterface; <nl> use Symfony\\Component\\Console\\Input\\InputOption; <nl> -use Symfony\\Component\\Console\\Logger\\ConsoleLogger; <nl> use Symfony\\Component\\Console\\Output\\OutputInterface; <nl> class ConsumeCommand extends Command <nl> @@ -154,7 +152,7 @@ class ConsumeCommand extends Command <nl> protected function getRuntimeExtensions(InputInterface $input, OutputInterface $output): ExtensionInterface <nl> { <nl> - $extensions = [new LoggerExtension(new ConsoleLogger($output))]; <nl> + $extensions = []; <nl> $extensions = array_merge($extensions, $this->getLimitsExtensions($input, $output)); <nl> $driver = $this->getDriver($input->getOption('client')); <nl> ", "msg": "[client] Fix --logger option. Removed unintentionally set console logger."}
{"diff_id": 3373, "repo": "php-enqueue/enqueue-dev", "sha": "e8f20f6ebd2f8c56d4058fe6b52765a0e41058cf", "time": "05.10.2020 19:25:45", "diff": "mmm a / pkg/rdkafka/RdKafkaContext.php <nl> ppp b / pkg/rdkafka/RdKafkaContext.php <nl>@@ -184,20 +184,18 @@ class RdKafkaContext implements Context <nl> private function getConf(): Conf <nl> { <nl> if (null === $this->conf) { <nl> - $topicConf = new TopicConf(); <nl> + $this->conf = new Conf(); <nl> if (isset($this->config['topic']) && is_array($this->config['topic'])) { <nl> foreach ($this->config['topic'] as $key => $value) { <nl> - $topicConf->set($key, $value); <nl> + $this->conf->set($key, $value); <nl> } <nl> } <nl> if (isset($this->config['partitioner'])) { <nl> - $topicConf->setPartitioner($this->config['partitioner']); <nl> + $this->conf->set('partitioner', $this->config['partitioner']); <nl> } <nl> - $this->conf = new Conf(); <nl> - <nl> if (isset($this->config['global']) && is_array($this->config['global'])) { <nl> foreach ($this->config['global'] as $key => $value) { <nl> $this->conf->set($key, $value); <nl> @@ -219,8 +217,6 @@ class RdKafkaContext implements Context <nl> if (isset($this->config['stats_cb'])) { <nl> $this->conf->setStatsCb($this->config['stats_cb']); <nl> } <nl> - <nl> - $this->conf->setDefaultTopicConf($topicConf); <nl> } <nl> return $this->conf; <nl> ", "msg": "remove topic conf, deprecated"}
{"diff_id": 3452, "repo": "illuminate/auth", "sha": "639585cea5001765bee905311a145d456d99a800", "time": "25.05.2018 10:17:58", "diff": "mmm a / Access/Gate.php <nl> ppp b / Access/Gate.php <nl>@@ -108,7 +108,7 @@ class Gate implements GateContract <nl> { <nl> if (is_callable($callback)) { <nl> $this->abilities[$ability] = $callback; <nl> - } elseif (is_string($callback) && Str::contains($callback, '@')) { <nl> + } elseif (is_string($callback)) { <nl> $this->abilities[$ability] = $this->buildAbilityCallback($ability, $callback); <nl> } else { <nl> throw new InvalidArgumentException(\"Callback must be a callable or a 'Class@method' string.\"); <nl> @@ -151,7 +151,11 @@ class Gate implements GateContract <nl> protected function buildAbilityCallback($ability, $callback) <nl> { <nl> return function () use ($ability, $callback) { <nl> + if (Str::contains($callback, '@')) { <nl> list($class, $method) = Str::parseCallback($callback); <nl> + } else { <nl> + $class = $callback; <nl> + } <nl> $policy = $this->resolvePolicy($class); <nl> @@ -167,7 +171,9 @@ class Gate implements GateContract <nl> return $result; <nl> } <nl> - return $policy->{$method}(...func_get_args()); <nl> + return isset($method) ? <nl> + $policy->{$method}(...func_get_args()) <nl> + : $policy(...func_get_args()); <nl> }; <nl> } <nl> ", "msg": "Add support for Gate::define() callback to be the name of an invokable class"}
{"diff_id": 3454, "repo": "illuminate/auth", "sha": "772b8787f97677f1b5baa468c3464c498d23e454", "time": "28.05.2018 22:24:23", "diff": "mmm a / SessionGuard.php <nl> ppp b / SessionGuard.php <nl>@@ -91,7 +91,7 @@ class SessionGuard implements StatefulGuard, SupportsBasicAuth <nl> * @param string $name <nl> * @param \\Illuminate\\Contracts\\Auth\\UserProvider $provider <nl> * @param \\Illuminate\\Contracts\\Session\\Session $session <nl> - * @param \\Symfony\\Component\\HttpFoundation\\Request $request <nl> + * @param \\Symfony\\Component\\HttpFoundation\\Request|null $request <nl> * @return void <nl> */ <nl> public function __construct($name, <nl> ", "msg": "Add null value to php doc in Illuminate/Auth/SessionGuard:__construct [$request] parameter.\n- Actually this class already used without last parameter in AuthManager."}
{"diff_id": 3472, "repo": "illuminate/auth", "sha": "ce6d0b2d5d4f683efab91778f419a9c5e837b36b", "time": "05.09.2018 04:10:27", "diff": "mmm a / Middleware/EnsureEmailIsVerified.php <nl> ppp b / Middleware/EnsureEmailIsVerified.php <nl>@@ -23,6 +23,7 @@ class EnsureEmailIsVerified <nl> if ($request->expectsJson()) { <nl> abort(403, 'Your email address is not verified.'); <nl> } <nl> + <nl> return Redirect::route('verification.notice'); <nl> } <nl> ", "msg": "Applied StyleCI fix"}
{"diff_id": 3473, "repo": "illuminate/auth", "sha": "f58b835c7b4e9a5c30e4e52223505055f0c1c142", "time": "10.09.2018 03:26:35", "diff": "mmm a / Access/Response.php <nl> ppp b / Access/Response.php <nl>@@ -35,10 +35,10 @@ class Response <nl> /** <nl> * Get the string representation of the message. <nl> * <nl> - * @return string|null <nl> + * @return string <nl> */ <nl> public function __toString() <nl> { <nl> - return $this->message(); <nl> + return (string) $this->message(); <nl> } <nl> } <nl> ", "msg": "[5.7] Auth/Access/Response::__toString method always should return string.\n__toString should return string, in other case it will emit the FatalError."}
{"diff_id": 3477, "repo": "illuminate/auth", "sha": "77e0af6d5a90d82d9f39016e7aea2996035396fc", "time": "28.09.2018 11:47:15", "diff": "mmm a / Access/Gate.php <nl> ppp b / Access/Gate.php <nl>@@ -332,7 +332,7 @@ class Gate implements GateContract <nl> * Determine whether the callback/method can be called with the given user. <nl> * <nl> * @param \\Illuminate\\Contracts\\Auth\\Authenticatable|null $user <nl> - * @param \\Closure|string $class <nl> + * @param \\Closure|string|array $class <nl> * @param string|null $method <nl> * @return bool <nl> */ <nl> @@ -346,6 +346,15 @@ class Gate implements GateContract <nl> return $this->methodAllowsGuests($class, $method); <nl> } <nl> + // If the \"class\" is actually a callable array, it may be either <nl> + // two strings (when using a static method), or it could be a <nl> + // concrete instance of an object, plus the method's name. <nl> + if (is_array($class)) { <nl> + $className = is_string($class[0]) ? $class[0] : get_class($class[0]); <nl> + <nl> + return $this->methodAllowsGuests($className, $class[1]); <nl> + } <nl> + <nl> return $this->callbackAllowsGuests($class); <nl> } <nl> ", "msg": "Allow array callables to be passed to Gate::before()"}
{"diff_id": 3482, "repo": "illuminate/auth", "sha": "812ca708a05c8c624ae40bc276dddc1ca4695d7a", "time": "07.11.2018 12:29:00", "diff": "mmm a / Middleware/Authorize.php <nl> ppp b / Middleware/Authorize.php <nl>@@ -72,7 +72,12 @@ class Authorize <nl> */ <nl> protected function getModel($request, $model) <nl> { <nl> - return $this->isClassName($model) ? trim($model) : $request->route($model, $model); <nl> + if ($this->isClassName($model)) { <nl> + return trim($model); <nl> + } else { <nl> + return $request->route($model, null) ?: <nl> + ((preg_match(\"/^['\\\"](.*)['\\\"]$/\", trim($model), $matches)) ? $matches[1] : null); <nl> + } <nl> } <nl> /** <nl> ", "msg": "Allow for explicit text parameters on Authorize middleware\nOtherwise the previous (before PR behaviour should take place\nand return a null value to the gate when there's no bind to the route\nwith that key."}
{"diff_id": 3487, "repo": "illuminate/auth", "sha": "610f3d8a9a5cb555d5493475c643fa5481567ae9", "time": "23.01.2019 09:18:02", "diff": "mmm a / Notifications/VerifyEmail.php <nl> ppp b / Notifications/VerifyEmail.php <nl>@@ -59,7 +59,7 @@ class VerifyEmail extends Notification <nl> protected function verificationUrl($notifiable) <nl> { <nl> return URL::temporarySignedRoute( <nl> - 'verification.verify', Carbon::now()->addMinutes(60), ['id' => $notifiable->getKey()] <nl> + 'verification.verify', Carbon::now()->addMinutes(config('auth.verification.expire', 60)), ['id' => $notifiable->getKey()] <nl> ); <nl> } <nl> ", "msg": "Use config for verification expiry time"}
{"diff_id": 3496, "repo": "illuminate/auth", "sha": "f907f1b17c0817cec6007224c43e3650f858d360", "time": "19.02.2019 23:18:10", "diff": "mmm a / AuthManager.php <nl> ppp b / AuthManager.php <nl>@@ -154,7 +154,9 @@ class AuthManager implements FactoryContract <nl> // user in the database or another persistence layer where users are. <nl> $guard = new TokenGuard( <nl> $this->createUserProvider($config['provider'] ?? null), <nl> - $this->app['request'] <nl> + $this->app['request'], <nl> + $config['input_key'] ?? 'api_token', <nl> + $config['storage_key'] ?? 'api_token' <nl> ); <nl> $this->app->refresh('request', $guard, 'setRequest'); <nl> ", "msg": "Allow configuration of token guard keys\nThis change allows users to configure the token guard input and storage keys in the auth guard configuration. It's useful they want something else than the default `api_token` name."}
{"diff_id": 3521, "repo": "illuminate/auth", "sha": "d15bec1414e4691e62ad571ef47c825bc5140e78", "time": "30.05.2019 14:51:03", "diff": "mmm a / Access/Gate.php <nl> ppp b / Access/Gate.php <nl>@@ -150,6 +150,7 @@ class Gate implements GateContract <nl> public function resource($name, $class, array $abilities = null) <nl> { <nl> $abilities = $abilities ?: [ <nl> + 'viewAny' => 'viewAny', <nl> 'view' => 'view', <nl> 'create' => 'create', <nl> 'update' => 'update', <nl> ", "msg": "update Gate `resource` method\nthis goes along with PR"}
{"diff_id": 3547, "repo": "illuminate/auth", "sha": "50edb84334d879decaedf58d0471ae063665e418", "time": "30.06.2020 15:38:39", "diff": "mmm a / Access/Gate.php <nl> ppp b / Access/Gate.php <nl>@@ -6,6 +6,7 @@ use Exception; <nl> use Illuminate\\Contracts\\Auth\\Access\\Gate as GateContract; <nl> use Illuminate\\Contracts\\Container\\Container; <nl> use Illuminate\\Support\\Arr; <nl> +use Illuminate\\Support\\Collection; <nl> use Illuminate\\Support\\Str; <nl> use InvalidArgumentException; <nl> use ReflectionClass; <nl> @@ -599,7 +600,15 @@ class Gate implements GateContract <nl> $classDirname = str_replace('/', '\\\\', dirname(str_replace('\\\\', '/', $class))); <nl> - return [$classDirname.'\\\\Policies\\\\'.class_basename($class).'Policy']; <nl> + $classDirnameSegments = explode('\\\\', $classDirname); <nl> + <nl> + return Arr::wrap(Collection::times(count($classDirnameSegments), function ($index) use ($class, $classDirnameSegments) { <nl> + $classDirname = implode('\\\\', array_slice($classDirnameSegments, 0, $index)); <nl> + <nl> + return $classDirname.'\\\\Policies\\\\'.class_basename($class).'Policy'; <nl> + })->reverse()->values()->first(function ($class) { <nl> + return class_exists($class); <nl> + }) ?: [$classDirname.'\\\\Policies\\\\'.class_basename($class).'Policy']); <nl> } <nl> /** <nl> ", "msg": "make policy location more intelligent"}
{"diff_id": 3549, "repo": "illuminate/auth", "sha": "e246e20a8712a5c1e9e8ddb26e09e4c2c0ab79e6", "time": "29.09.2020 11:47:12", "diff": "mmm a / Notifications/VerifyEmail.php <nl> ppp b / Notifications/VerifyEmail.php <nl>@@ -11,6 +11,13 @@ use Illuminate\\Support\\Facades\\URL; <nl> class VerifyEmail extends Notification <nl> { <nl> + /** <nl> + * The callback that should be used to create the reset password URL. <nl> + * <nl> + * @var \\Closure|null <nl> + */ <nl> + public static $createUrlCallback; <nl> + <nl> /** <nl> * The callback that should be used to build the mail message. <nl> * <nl> @@ -58,6 +65,9 @@ class VerifyEmail extends Notification <nl> */ <nl> protected function verificationUrl($notifiable) <nl> { <nl> + if (static::$createUrlCallback) { <nl> + return call_user_func(static::$createUrlCallback, $notifiable); <nl> + } else { <nl> return URL::temporarySignedRoute( <nl> 'verification.verify', <nl> Carbon::now()->addMinutes(Config::get('auth.verification.expire', 60)), <nl> @@ -67,6 +77,18 @@ class VerifyEmail extends Notification <nl> ] <nl> ); <nl> } <nl> + } <nl> + <nl> + /** <nl> + * Set a callback that should be used when creating the reset password button URL. <nl> + * <nl> + * @param \\Closure $callback <nl> + * @return void <nl> + */ <nl> + public static function createUrlUsing($callback) <nl> + { <nl> + static::$createUrlCallback = $callback; <nl> + } <nl> /** <nl> * Set a callback that should be used when building the notification mail message. <nl> ", "msg": "Provide a mechanism to create URLs in `VerifyEmail` similar to the mechanism in `ResetPassword`. This change increases interface consistency in the Notifications namespace. This change does not break compatability, as it adds a way to overwrite URL generation. If the developer does not provide a callback, the current URL generation is still used."}
{"diff_id": 3583, "repo": "illuminate/auth", "sha": "a5b7ce8f193283adac1b75e63111268191e06c22", "time": "17.01.2023 09:39:27", "diff": "mmm a / Access/HandlesAuthorization.php <nl> ppp b / Access/HandlesAuthorization.php <nl>@@ -32,8 +32,8 @@ trait HandlesAuthorization <nl> * Deny with a HTTP status code. <nl> * <nl> * @param int $status <nl> - * @param ?string $message <nl> - * @param ?int $code <nl> + * @param string|null $message <nl> + * @param int|null $code <nl> * @return \\Illuminate\\Auth\\Access\\Response <nl> */ <nl> public function denyWithStatus($status, $message = null, $code = null) <nl> @@ -44,8 +44,8 @@ trait HandlesAuthorization <nl> /** <nl> * Deny with a 404 HTTP status code. <nl> * <nl> - * @param ?string $message <nl> - * @param ?int $code <nl> + * @param string|null $message <nl> + * @param int|null $code <nl> * @return \\Illuminate\\Auth\\Access\\Response <nl> */ <nl> public function denyAsNotFound($message = null, $code = null) <nl> ", "msg": "Use proper docblock types"}
{"diff_id": 3586, "repo": "friendsofphp/proxy-manager-lts", "sha": "489345d388f60089d0e79f136f51731959751e93", "time": "09.01.2017 08:58:01", "diff": "mmm a / src/ProxyManager/Generator/MethodGenerator.php <nl> ppp b / src/ProxyManager/Generator/MethodGenerator.php <nl>@@ -36,6 +36,7 @@ class MethodGenerator extends ZendMethodGenerator <nl> */ <nl> public static function fromReflection(MethodReflection $reflectionMethod) : self <nl> { <nl> + /* @var $method self */ <nl> $method = parent::fromReflection($reflectionMethod); <nl> $method->setInterface(false); <nl> ", "msg": "Corrected instantiated type - we know that `parent::fromReflection()` returns `static`"}
{"diff_id": 3587, "repo": "friendsofphp/proxy-manager-lts", "sha": "ea3a9c702ea54d01f4b9344054ba124cbb90d859", "time": "09.01.2017 09:00:21", "diff": "mmm a / src/ProxyManager/FileLocator/FileLocator.php <nl> ppp b / src/ProxyManager/FileLocator/FileLocator.php <nl>@@ -42,11 +42,13 @@ class FileLocator implements FileLocatorInterface <nl> */ <nl> public function __construct(string $proxiesDirectory) <nl> { <nl> - $this->proxiesDirectory = realpath($proxiesDirectory); <nl> + $absolutePath = realpath($proxiesDirectory); <nl> - if (false === $this->proxiesDirectory) { <nl> + if (false === $absolutePath) { <nl> throw InvalidProxyDirectoryException::proxyDirectoryNotFound($proxiesDirectory); <nl> } <nl> + <nl> + $this->proxiesDirectory = $absolutePath; <nl> } <nl> /** <nl> ", "msg": "Avoiding overwriting an instance `string` property with a possible `string|bool`"}
{"diff_id": 3599, "repo": "friendsofphp/proxy-manager-lts", "sha": "c63d1ffd346b4d03c4fc238ee3441822b8316eeb", "time": "31.07.2017 13:13:07", "diff": "mmm a / None <nl> ppp b / tests/ProxyManagerTest/Generator/Util/IdentifierSuffixerTest.php <nl>+<?php <nl> +/* <nl> + * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS <nl> + * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT <nl> + * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR <nl> + * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT <nl> + * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, <nl> + * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT <nl> + * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, <nl> + * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY <nl> + * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT <nl> + * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE <nl> + * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. <nl> + * <nl> + * This software consists of voluntary contributions made by many individuals <nl> + * and is licensed under the MIT license. <nl> + */ <nl> + <nl> +declare(strict_types=1); <nl> + <nl> +namespace ProxyManagerTest\\Generator\\Util; <nl> + <nl> +use PHPUnit_Framework_TestCase; <nl> +use ProxyManager\\Generator\\Util\\IdentifierSuffixer; <nl> + <nl> +/** <nl> + * Tests for {@see \\ProxyManager\\Generator\\Util\\IdentifierSuffixer} <nl> + * <nl> + * @author Marco Pivetta <ocramius@gmail.com> <nl> + * @license MIT <nl> + * <nl> + * @group Coverage <nl> + * @covers \\ProxyManager\\Generator\\Util\\IdentifierSuffixer <nl> + */ <nl> +class IdentifierSuffixerTest extends PHPUnit_Framework_TestCase <nl> +{ <nl> + /** <nl> + * @dataProvider getBaseIdentifierNames <nl> + * <nl> + * @param string $name <nl> + */ <nl> + public function testGeneratesSuffixedIdentifiers(string $name) : void <nl> + { <nl> + self::assertSame( <nl> + IdentifierSuffixer::getIdentifier($name), <nl> + IdentifierSuffixer::getIdentifier($name) <nl> + ); <nl> + } <nl> + <nl> + /** <nl> + * @dataProvider getBaseIdentifierNames <nl> + * <nl> + * @param string $name <nl> + */ <nl> + public function testGeneratesValidIdentifiers(string $name) : void <nl> + { <nl> + self::assertRegExp( <nl> + '/^[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]+$/', <nl> + IdentifierSuffixer::getIdentifier($name) <nl> + ); <nl> + } <nl> + <nl> + /** <nl> + * @dataProvider getBaseIdentifierNames <nl> + * <nl> + * @param string $name <nl> + */ <nl> + public function testGeneratedIdentifierSuffix(string $name) : void <nl> + { <nl> + // 5 generated characters are enough to keep idiots from tampering with these properties \"the easy way\" <nl> + self::assertGreaterThan(5, strlen(IdentifierSuffixer::getIdentifier($name))); <nl> + } <nl> + <nl> + /** <nl> + * Data provider generating identifier names to be checked <nl> + * <nl> + * @return string[][] <nl> + */ <nl> + public function getBaseIdentifierNames() : array <nl> + { <nl> + return [ <nl> + [''], <nl> + ['1'], <nl> + ['foo'], <nl> + ['Foo'], <nl> + ['bar'], <nl> + ['Bar'], <nl> + ['foo_bar'], <nl> + ]; <nl> + } <nl> +} <nl> ", "msg": "#367 specification for a class that generates suffixes for identifiers in a deterministic way"}
{"diff_id": 3609, "repo": "friendsofphp/proxy-manager-lts", "sha": "05a731e4f308e53e35f7547b32162f317b216b14", "time": "16.11.2017 23:41:51", "diff": "mmm a / tests/ProxyManagerTestAsset/ObjectTypeHintClass.php <nl> ppp b / tests/ProxyManagerTestAsset/ObjectTypeHintClass.php <nl>@@ -33,7 +33,7 @@ class ObjectTypeHintClass <nl> * <nl> * @return object <nl> */ <nl> - public function iterableTypeHintMethod(object $parameter) <nl> + public function objectTypeHintMethod(object $parameter) <nl> { <nl> return $parameter; <nl> } <nl> ", "msg": "Test asset method name correction - method name was mismatching the purpose (using an `object` hint)"}
{"diff_id": 3637, "repo": "friendsofphp/proxy-manager-lts", "sha": "f9740b06221b29b3d183d59348f81eebf18ffbc5", "time": "25.08.2018 22:40:38", "diff": "mmm a / src/ProxyManager/ProxyGenerator/AccessInterceptorValueHolder/MethodGenerator/MagicClone.php <nl> ppp b / src/ProxyManager/ProxyGenerator/AccessInterceptorValueHolder/MethodGenerator/MagicClone.php <nl>@@ -14,6 +14,18 @@ use Zend\\Code\\Generator\\PropertyGenerator; <nl> */ <nl> class MagicClone extends MagicMethodGenerator <nl> { <nl> + private const TEMPLATE = <<<'PHP' <nl> +$this->{{$valueHolder}} = clone $this->{{$valueHolder}}; <nl> + <nl> +foreach ($this->{{$prefix}} as $key => $value) { <nl> + $this->{{$prefix}}[$key] = clone $value; <nl> +} <nl> + <nl> +foreach ($this->{{$suffix}} as $key => $value) { <nl> + $this->{{$suffix}}[$key] = clone $value; <nl> +} <nl> +PHP; <nl> + <nl> /** <nl> * Constructor <nl> * <nl> @@ -30,14 +42,16 @@ class MagicClone extends MagicMethodGenerator <nl> $prefix = $prefixInterceptors->getName(); <nl> $suffix = $suffixInterceptors->getName(); <nl> - $this->setBody( <nl> - \"\\$this->$valueHolder = clone \\$this->$valueHolder;\\n\\n\" <nl> - . \"foreach (\\$this->$prefix as \\$key => \\$value) {\\n\" <nl> - . \" \\$this->$prefix\" . \"[\\$key] = clone \\$value;\\n\" <nl> - . \"}\\n\\n\" <nl> - . \"foreach (\\$this->$suffix as \\$key => \\$value) {\\n\" <nl> - . \" \\$this->$suffix\" . \"[\\$key] = clone \\$value;\\n\" <nl> - . '}' <nl> - ); <nl> + $replacements = [ <nl> + '{{$valueHolder}}' => $valueHolder, <nl> + '{{$prefix}}' => $prefix, <nl> + '{{$suffix}}' => $suffix, <nl> + ]; <nl> + <nl> + $this->setBody(str_replace( <nl> + array_keys($replacements), <nl> + $replacements, <nl> + self::TEMPLATE <nl> + )); <nl> } <nl> } <nl> ", "msg": "Removed string interpolation, replaced by decent templating instead"}
{"diff_id": 3645, "repo": "friendsofphp/proxy-manager-lts", "sha": "67a42a86aa32ca322ea291f8229f7131bbaf76cf", "time": "26.08.2018 15:51:51", "diff": "mmm a / tests/ProxyManagerTest/Functional/LazyLoadingValueHolderFunctionalTest.php <nl> ppp b / tests/ProxyManagerTest/Functional/LazyLoadingValueHolderFunctionalTest.php <nl>@@ -387,6 +387,8 @@ class LazyLoadingValueHolderFunctionalTest extends TestCase <nl> ); <nl> } <nl> + self::assertInternalType('callable', $initializerMatcher); <nl> + <nl> return function ( <nl> & $wrappedObject, <nl> VirtualProxyInterface $proxy, <nl> @@ -554,12 +556,12 @@ class LazyLoadingValueHolderFunctionalTest extends TestCase <nl> string $expectedValue <nl> ) : void { <nl> $proxyName = $this->generateProxy(get_class($realInstance)); <nl> - /** @var OtherObjectAccessClass|LazyLoadingInterface $proxy */ <nl> + /** @var LazyLoadingInterface $proxy */ <nl> $proxy = $proxyName::staticProxyConstructor($this->createInitializer(get_class($realInstance), $realInstance)); <nl> - /** @var callable $accessor */ <nl> $accessor = [$callerObject, $method]; <nl> + self::assertInternalType('callable', $accessor); <nl> self::assertFalse($proxy->isProxyInitialized()); <nl> self::assertSame($expectedValue, $accessor($proxy)); <nl> self::assertTrue($proxy->isProxyInitialized()); <nl> @@ -578,7 +580,7 @@ class LazyLoadingValueHolderFunctionalTest extends TestCase <nl> string $expectedValue <nl> ) : void { <nl> $proxyName = $this->generateProxy(get_class($realInstance)); <nl> - /** @var OtherObjectAccessClass|LazyLoadingInterface $proxy */ <nl> + /** @var LazyLoadingInterface $proxy */ <nl> $proxy = unserialize(serialize( <nl> $proxyName::staticProxyConstructor($this->createInitializer(get_class($realInstance), $realInstance)) <nl> )); <nl> @@ -603,7 +605,7 @@ class LazyLoadingValueHolderFunctionalTest extends TestCase <nl> string $expectedValue <nl> ) : void { <nl> $proxyName = $this->generateProxy(get_class($realInstance)); <nl> - /** @var OtherObjectAccessClass|LazyLoadingInterface $proxy */ <nl> + /** @var LazyLoadingInterface $proxy */ <nl> $proxy = clone $proxyName::staticProxyConstructor( <nl> $this->createInitializer(get_class($realInstance), $realInstance) <nl> ); <nl> ", "msg": "Removing ambiguity on method calls on proxies with multiple possible types"}
{"diff_id": 3647, "repo": "friendsofphp/proxy-manager-lts", "sha": "93e4432b92b5537d0af45fcc6ebfacee53fd6d22", "time": "26.08.2018 15:59:40", "diff": "mmm a / tests/ProxyManagerTest/Functional/LazyLoadingGhostFunctionalTest.php <nl> ppp b / tests/ProxyManagerTest/Functional/LazyLoadingGhostFunctionalTest.php <nl>@@ -324,7 +324,7 @@ class LazyLoadingGhostFunctionalTest extends TestCase <nl> $initializer = null; <nl> $proxy->publicProperty = 'newValue'; <nl> }; <nl> - /** @var GhostObjectInterface|BaseClass $proxy */ <nl> + /** @var GhostObjectInterface&BaseClass $proxy */ <nl> $proxy = $proxyName::staticProxyConstructor($initializer); <nl> $proxy->initializeProxy(); <nl> @@ -719,6 +719,8 @@ class LazyLoadingGhostFunctionalTest extends TestCase <nl> )); <nl> } <nl> + self::assertInternalType('callable', $initializerMatcher); <nl> + <nl> return function ( <nl> GhostObjectInterface $proxy, <nl> $method, <nl> @@ -1065,9 +1067,12 @@ class LazyLoadingGhostFunctionalTest extends TestCase <nl> } <nl> ); <nl> - /** @var callable $accessor */ <nl> + self::assertInstanceOf(LazyLoadingInterface::class, $proxy); <nl> + <nl> $accessor = [$callerObject, $method]; <nl> + self::assertInternalType('callable', $accessor); <nl> + <nl> self::assertFalse($proxy->isProxyInitialized()); <nl> self::assertSame($expectedValue, $accessor($proxy)); <nl> self::assertTrue($proxy->isProxyInitialized()); <nl> @@ -1095,9 +1100,13 @@ class LazyLoadingGhostFunctionalTest extends TestCase <nl> } <nl> ))); <nl> - /** @var callable $accessor */ <nl> + <nl> + self::assertInstanceOf(LazyLoadingInterface::class, $proxy); <nl> + <nl> $accessor = [$callerObject, $method]; <nl> + self::assertInternalType('callable', $accessor); <nl> + <nl> self::assertTrue($proxy->isProxyInitialized()); <nl> self::assertSame($expectedValue, $accessor($proxy)); <nl> } <nl> @@ -1124,9 +1133,12 @@ class LazyLoadingGhostFunctionalTest extends TestCase <nl> } <nl> ); <nl> - /** @var callable $accessor */ <nl> + self::assertInstanceOf(LazyLoadingInterface::class, $proxy); <nl> + <nl> $accessor = [$callerObject, $method]; <nl> + self::assertInternalType('callable', $accessor); <nl> + <nl> self::assertTrue($proxy->isProxyInitialized()); <nl> self::assertSame($expectedValue, $accessor($proxy)); <nl> } <nl> @@ -1203,6 +1215,9 @@ class LazyLoadingGhostFunctionalTest extends TestCase <nl> throw new \\BadMethodCallException('The proxy should never be initialized, as all properties are skipped'); <nl> }); <nl> + self::assertInstanceOf(OtherObjectAccessClass::class, $proxy); <nl> + self::assertInstanceOf(LazyLoadingInterface::class, $proxy); <nl> + <nl> $privatePropertyValue = uniqid('', true); <nl> $protectedPropertyValue = uniqid('', true); <nl> $publicPropertyValue = uniqid('', true); <nl> @@ -1251,6 +1266,9 @@ class LazyLoadingGhostFunctionalTest extends TestCase <nl> $proxy->setProxyInitializer(null); <nl> }); <nl> + self::assertInstanceOf(BaseClass::class, $proxy); <nl> + self::assertInstanceOf(LazyLoadingInterface::class, $proxy); <nl> + <nl> $reflectionPrivate = new \\ReflectionProperty(BaseClass::class, 'privateProperty'); <nl> $reflectionProtected = new \\ReflectionProperty(BaseClass::class, 'protectedProperty'); <nl> @@ -1300,6 +1318,9 @@ class LazyLoadingGhostFunctionalTest extends TestCase <nl> } <nl> ); <nl> + self::assertInstanceOf(VoidCounter::class, $proxy); <nl> + self::assertInstanceOf(LazyLoadingInterface::class, $proxy); <nl> + <nl> $increment = random_int(1001, 10000); <nl> $proxy->increment($increment); <nl> ", "msg": "Verifying that all proxies involved in the `LazyLoadingGhostFunctionalTest` match expectations"}
{"diff_id": 3668, "repo": "friendsofphp/proxy-manager-lts", "sha": "d19d38b695f5307926b53d31c014164144338b76", "time": "20.03.2019 15:28:19", "diff": "mmm a / src/ProxyManager/Inflector/ClassNameInflector.php <nl> ppp b / src/ProxyManager/Inflector/ClassNameInflector.php <nl>@@ -16,6 +16,7 @@ use function substr; <nl> final class ClassNameInflector implements ClassNameInflectorInterface <nl> { <nl> protected string $proxyNamespace; <nl> + /** @var int @TODO annotation still needed for phpstan to understand this */ <nl> private int $proxyMarkerLength; <nl> private string $proxyMarker; <nl> private ParameterHasher $parameterHasher; <nl> ", "msg": "Added type declaration to allow PHPStan to still understand property types"}
{"diff_id": 3674, "repo": "friendsofphp/proxy-manager-lts", "sha": "15b12bc10b891ac89e3af2d7164ec55a1168e765", "time": "03.06.2019 11:31:42", "diff": "mmm a / tests/static-analysis/null-object.php <nl> ppp b / tests/static-analysis/null-object.php <nl>@@ -10,7 +10,8 @@ require_once __DIR__ . '/../../vendor/autoload.php'; <nl> class MyProxiedClass <nl> { <nl> - public function sayHello() : ?string <nl> + /** @return string|null return type cannot be enforced on a null object - nothing is ever returned */ <nl> + public function sayHello() <nl> { <nl> return 'Hello!'; <nl> } <nl> ", "msg": "Corrected null object original class return type"}
{"diff_id": 3695, "repo": "friendsofphp/proxy-manager-lts", "sha": "c920683be0e70d674dbd1ac5c61a8d4d836f3242", "time": "02.12.2019 10:33:56", "diff": "mmm a / tests/ProxyManagerTest/Exception/FileNotWritableExceptionTest.php <nl> ppp b / tests/ProxyManagerTest/Exception/FileNotWritableExceptionTest.php <nl>@@ -18,14 +18,14 @@ final class FileNotWritableExceptionTest extends TestCase <nl> { <nl> public function testFromPrevious() : void <nl> { <nl> - $previous = $this->getMockBuilder(FileWriterException::class) <nl> - ->enableOriginalConstructor() <nl> - ->setConstructorArgs(['Previous exception message']) <nl> - ->getMock(); <nl> + $previousExceptionMock = $this->getMockBuilder(FileWriterException::class); <nl> + $previousExceptionMock->enableOriginalConstructor(); <nl> + $previousExceptionMock->setConstructorArgs(['Previous exception message']); <nl> + $previousException = $previousExceptionMock->getMock(); <nl> - $exception = FileNotWritableException::fromPrevious($previous); <nl> + $exception = FileNotWritableException::fromPrevious($previousException); <nl> self::assertSame('Previous exception message', $exception->getMessage()); <nl> - self::assertSame($previous, $exception->getPrevious()); <nl> + self::assertSame($previousException, $exception->getPrevious()); <nl> } <nl> } <nl> ", "msg": "Drop usageof fluent interface on mocking\nPsalm is not failing now !"}
{"diff_id": 3708, "repo": "friendsofphp/proxy-manager-lts", "sha": "6f18b5b1d9f720d7497fb3961b6c59410d95b7d9", "time": "17.12.2020 17:33:37", "diff": "mmm a / tests/ProxyManagerTest/ProxyGenerator/Util/PropertiesTest.php <nl> ppp b / tests/ProxyManagerTest/ProxyGenerator/Util/PropertiesTest.php <nl>@@ -126,7 +126,6 @@ final class PropertiesTest extends TestCase <nl> public function testOnlyPropertiesThatCanBeUnset(): void <nl> { <nl> $nonReferenceableProperties = Properties::fromReflectionClass(new ReflectionClass(ClassWithMixedTypedProperties::class)) <nl> - ->onlyPropertiesThatCanBeUnset() <nl> ->getInstanceProperties(); <nl> self::assertSame( <nl> ", "msg": "Remove usage of deprecated method"}
{"diff_id": 3711, "repo": "friendsofphp/proxy-manager-lts", "sha": "76cb45df1395bb72b3cb5439d7ba571de544aeec", "time": "30.12.2020 13:52:18", "diff": "mmm a / src/ProxyManager/ProxyGenerator/Util/PublicScopeSimulator.php <nl> ppp b / src/ProxyManager/ProxyGenerator/Util/PublicScopeSimulator.php <nl>@@ -37,9 +37,9 @@ class PublicScopeSimulator <nl> * the operation. Return directly if none provided <nl> * @param string|null $interfaceName name of the proxified interface if any <nl> * <nl> - * @psalm-param $operationType self::OPERATION_* <nl> - * <nl> * @throws InvalidArgumentException <nl> + * <nl> + * @psalm-param $operationType self::OPERATION_* <nl> */ <nl> public static function getPublicAccessSimulationCode( <nl> string $operationType, <nl> @@ -61,8 +61,7 @@ class PublicScopeSimulator <nl> ? 'new \\\\ReflectionClass(get_parent_class($this))' <nl> : 'new \\\\ReflectionClass(' . var_export($originalClass->getName(), true) . ')'; <nl> - $returnPropertyName = $returnPropertyName <nl> - ?? ($operationType === self::OPERATION_UNSET ? 'unset' : $returnPropertyName); <nl> + $returnPropertyName ??= ($operationType === self::OPERATION_UNSET ? 'unset' : $returnPropertyName); <nl> return '$realInstanceReflection = ' . $originalClassReflection . ';' . \"\\n\\n\" <nl> . 'if (! $realInstanceReflection->hasProperty($' . $nameParameter . ')) {' . \"\\n\" <nl> ", "msg": "#645 applied automated CS fixes via phpcbf (mostly docblock positioning, indentation)"}
{"diff_id": 3712, "repo": "friendsofphp/proxy-manager-lts", "sha": "72809ac847c7fe60f03eb95c2a24ff1216b1b2aa", "time": "30.12.2020 15:56:19", "diff": "mmm a / tests/ProxyManagerTest/Factory/AbstractBaseFactoryTest.php <nl> ppp b / tests/ProxyManagerTest/Factory/AbstractBaseFactoryTest.php <nl>@@ -31,7 +31,7 @@ final class AbstractBaseFactoryTest extends TestCase <nl> /** <nl> * Note: we mock the class in order to assert on the abstract method usage <nl> * <nl> - * @var AbstractBaseFactory|MockObject <nl> + * @var AbstractBaseFactory&MockObject <nl> */ <nl> private AbstractBaseFactory $factory; <nl> ", "msg": "corrected mock property type in `AbstractBaseFactoryTest`"}
{"diff_id": 3736, "repo": "tighten/jigsaw", "sha": "f9eed8353c7d2975df7249339cae8cd0bb259e06", "time": "11.03.2017 11:20:22", "diff": "mmm a / src/IterableObject.php <nl> ppp b / src/IterableObject.php <nl>use ArrayAccess; <nl> use Exception; <nl> use Illuminate\\Support\\Collection as BaseCollection; <nl> +use Illuminate\\Support\\HigherOrderCollectionProxy; <nl> class IterableObject extends BaseCollection implements ArrayAccess <nl> { <nl> public function __get($key) <nl> { <nl> + if (! $this->offsetExists($key) && in_array($key, static::$proxies)) { <nl> + return new HigherOrderCollectionProxy($this, $key); <nl> + } <nl> + <nl> return $this->get($key); <nl> } <nl> ", "msg": "Add support for higher order collection messages from 5.4"}
{"diff_id": 3760, "repo": "tighten/jigsaw", "sha": "785af8b1ec925735f7469c52bae4cf605ef159b6", "time": "30.08.2017 10:16:30", "diff": "mmm a / tests/rebuild.php <nl> ppp b / tests/rebuild.php <nl>@@ -10,6 +10,10 @@ rename('tests/build-testing', 'tests/snapshots'); <nl> function removeDirectory($path) <nl> { <nl> + if (! $path) { <nl> + exit (\"Path to the 'tests/snapshots' directory is missing\"); <nl> + } <nl> + <nl> $files = glob($path . '/{,.}[!.,!..]*', GLOB_MARK|GLOB_BRACE); <nl> foreach ($files as $file) { <nl> ", "msg": "Add safety check to prevent `removeDirectory` from doing bad things"}
{"diff_id": 3767, "repo": "tighten/jigsaw", "sha": "1f532be687ef0ca6bd3080169a8305e207b44f69", "time": "21.10.2017 23:09:43", "diff": "mmm a / src/Handlers/MarkdownHandler.php <nl> ppp b / src/Handlers/MarkdownHandler.php <nl>@@ -77,7 +77,7 @@ class MarkdownHandler <nl> { <nl> $replacements = [\"<?php\" => \"<{{'?php'}}\"]; <nl> - if ($file->getFullExtension() == 'md' || $file->getFullExtension() == 'mdown') { <nl> + if (in_array($file->getFullExtension(), ['markdown', 'md', 'mdown'])) { <nl> $replacements = array_merge([ <nl> \"@\" => \"{{'@'}}\", <nl> \"{{\" => \"@{{\", <nl> ", "msg": "Include `markdown` as type requiring escaped content for Blade processing"}
{"diff_id": 3787, "repo": "tighten/jigsaw", "sha": "671408b0d38daaaba178fb743e4353f1a391bbf1", "time": "04.03.2018 16:00:38", "diff": "mmm a / src/PageVariable.php <nl> ppp b / src/PageVariable.php <nl>@@ -30,6 +30,11 @@ class PageVariable extends IterableObject <nl> return $this->_meta->path->get($key ?: $this->getExtending()); <nl> } <nl> + return (String) $this->_meta->path; <nl> + } <nl> + <nl> + public function getPaths() <nl> + { <nl> return $this->_meta->path; <nl> } <nl> @@ -39,6 +44,11 @@ class PageVariable extends IterableObject <nl> return $this->_meta->url->get($key ?: $this->getExtending()); <nl> } <nl> + return (String) $this->_meta->url; <nl> + } <nl> + <nl> + public function getUrls() <nl> + { <nl> return $this->_meta->url; <nl> } <nl> ", "msg": "Add getPaths/getUrls to PageVariable to specifically get path/url arrays"}
{"diff_id": 3821, "repo": "tighten/jigsaw", "sha": "4ba1668f94a31768e36da83f6a6851f4d562ae23", "time": "26.08.2018 17:39:54", "diff": "mmm a / src/File/InputFile.php <nl> ppp b / src/File/InputFile.php <nl>@@ -43,7 +43,12 @@ class InputFile <nl> return $this->isBladeFile() && in_array($this->getExtension(), $this->extraBladeExtensions) ? $this->getExtension() : ''; <nl> } <nl> - protected function isBladeFile() <nl> + public function getLastModifiedTime() <nl> + { <nl> + return $this->file->getMTime(); <nl> + } <nl> + <nl> + public function isBladeFile() <nl> { <nl> return strpos($this->getBasename(), '.blade.' . $this->getExtension()) > 0; <nl> } <nl> ", "msg": "Add getLastModifiedTime to InputFile for cache validation"}
{"diff_id": 3822, "repo": "tighten/jigsaw", "sha": "86b81cb760551f9d44ab38d0017a2ca4073c4776", "time": "26.08.2018 17:40:31", "diff": "mmm a / jigsaw-core.php <nl> ppp b / jigsaw-core.php <nl>@@ -80,10 +80,11 @@ $container->bind(FrontMatterParser::class, function ($c) { <nl> return new FrontMatterParser($c[Parser::class]); <nl> }); <nl> -$container->bind(Factory::class, function ($c) use ($cachePath) { <nl> +$bladeCompiler = new BladeCompiler(new Filesystem, $cachePath); <nl> + <nl> +$container->bind(Factory::class, function ($c) use ($cachePath, $bladeCompiler) { <nl> $resolver = new EngineResolver; <nl> - $bladeCompiler = new BladeCompiler(new Filesystem, $cachePath); <nl> $compilerEngine = new CompilerEngine($bladeCompiler, new Filesystem); <nl> $resolver->register('blade', function () use ($compilerEngine) { <nl> @@ -109,8 +110,8 @@ $container->bind(Factory::class, function ($c) use ($cachePath) { <nl> return new Factory($resolver, $finder, new FakeDispatcher()); <nl> }); <nl> -$container->bind(ViewRenderer::class, function ($c) { <nl> - return new ViewRenderer($c[Factory::class]); <nl> +$container->bind(ViewRenderer::class, function ($c) use ($bladeCompiler) { <nl> + return new ViewRenderer($c[Factory::class], $bladeCompiler); <nl> }); <nl> $container->bind(BladeHandler::class, function ($c) { <nl> ", "msg": "Update jigsaw-core, inject BladeCompiler to ViewRenderer"}
{"diff_id": 3823, "repo": "tighten/jigsaw", "sha": "18d0a12e2e3ccf41916f94e439ddd2750970aa2e", "time": "26.08.2018 20:41:53", "diff": "mmm a / src/SiteBuilder.php <nl> ppp b / src/SiteBuilder.php <nl>@@ -36,12 +36,12 @@ class SiteBuilder <nl> return $this; <nl> } <nl> - public function build($source, $dest, $siteData) <nl> + public function build($source, $destination, $siteData) <nl> { <nl> $this->prepareDirectory($this->cachePath, ! $this->useCache); <nl> $generatedFiles = $this->generateFiles($source, $siteData); <nl> - $this->prepareDirectory($dest); <nl> - $outputFiles = $this->writeFiles($dest, $generatedFiles); <nl> + $this->prepareDirectory($destination); <nl> + $outputFiles = $this->writeFiles($generatedFiles, $destination); <nl> $this->cleanup(); <nl> return $outputFiles; <nl> @@ -99,7 +99,7 @@ class SiteBuilder <nl> return $files; <nl> } <nl> - private function writeFiles($destination, $files) <nl> + private function writeFiles($files, $destination) <nl> { <nl> $this->consoleOutput->writeln('<comment>Writing files to destination ...</comment>'); <nl> @@ -108,20 +108,20 @@ class SiteBuilder <nl> }); <nl> } <nl> - private function handle($file, $siteData) <nl> + private function writeFile($file, $destination) <nl> { <nl> - $meta = $this->getMetaData($file, $siteData->page->baseUrl); <nl> + $directory = $this->getOutputDirectory($file); <nl> + $this->prepareDirectory(\"{$destination}/{$directory}\"); <nl> + $file->putContents(\"{$destination}/{$this->getOutputPath($file)}\"); <nl> - return $this->getHandler($file)->handle($file, PageData::withPageMetaData($siteData, $meta)); <nl> + return $this->getOutputLink($file); <nl> } <nl> - private function writeFile($file, $dest) <nl> + private function handle($file, $siteData) <nl> { <nl> - $directory = $this->getOutputDirectory($file); <nl> - $this->prepareDirectory(\"{$dest}/{$directory}\"); <nl> - $file->putContents(\"{$dest}/{$this->getOutputPath($file)}\"); <nl> + $meta = $this->getMetaData($file, $siteData->page->baseUrl); <nl> - return $this->getOutputLink($file); <nl> + return $this->getHandler($file)->handle($file, PageData::withPageMetaData($siteData, $meta)); <nl> } <nl> private function getHandler($file) <nl> ", "msg": "Move handle method in SiteBuilder, fix destination variable name/order"}
{"diff_id": 3829, "repo": "tighten/jigsaw", "sha": "e206699d2c3b760a7dadc31ad1667321f9faaa68", "time": "04.09.2018 17:49:54", "diff": "mmm a / None <nl> ppp b / src/Scaffold/DefaultInstaller.php <nl>+<?php <nl> + <nl> +namespace TightenCo\\Jigsaw\\Scaffold; <nl> + <nl> +class DefaultInstaller <nl> +{ <nl> + const ALWAYS_IGNORE = [ <nl> + 'build_*', <nl> + 'init.php', <nl> + 'node_modules', <nl> + 'vendor', <nl> + ]; <nl> + const DEFAULT_COMMANDS = [ <nl> + 'composer install', <nl> + 'npm install', <nl> + 'npm run dev', <nl> + ]; <nl> + protected $commands; <nl> + protected $delete; <nl> + protected $ignore; <nl> + protected $builder; <nl> + <nl> + public function install(ScaffoldBuilder $builder, $settings = []) <nl> + { <nl> + $this->builder = $builder; <nl> + $this->delete = array_get($settings, 'delete', []); <nl> + $this->ignore = array_merge(self::ALWAYS_IGNORE, array_get($settings, 'ignore', [])); <nl> + $commands = array_get($settings, 'commands'); <nl> + $this->commands = $commands !== null ? $commands : self::DEFAULT_COMMANDS; <nl> + $this->execute(); <nl> + } <nl> + <nl> + public function execute() <nl> + { <nl> + return $this->builder <nl> + ->buildBasicScaffold() <nl> + ->cacheComposerDotJson() <nl> + ->deleteSiteFiles($this->delete) <nl> + ->copyPresetFiles($this->ignore) <nl> + ->mergeComposerDotJson() <nl> + ->runCommands($this->commands); <nl> + } <nl> +} <nl> ", "msg": "Add DefaultInstaller to handle array-type init.php install files"}
{"diff_id": 3830, "repo": "tighten/jigsaw", "sha": "47382243b3cdbdf5c9f3c7389989bf0995b0b651", "time": "04.09.2018 17:51:09", "diff": "mmm a / None <nl> ppp b / src/Scaffold/CustomInstaller.php <nl>+<?php <nl> + <nl> +namespace TightenCo\\Jigsaw\\Scaffold; <nl> + <nl> +class CustomInstaller <nl> +{ <nl> + public $ignore = []; <nl> + protected $builder; <nl> + <nl> + public function install(ScaffoldBuilder $builder) <nl> + { <nl> + $this->builder = $builder; <nl> + <nl> + return $this; <nl> + } <nl> + <nl> + public function ask() <nl> + { <nl> + // <nl> + } <nl> + <nl> + public function clean() <nl> + { <nl> + // <nl> + } <nl> + <nl> + public function copy() <nl> + { <nl> + // <nl> + } <nl> + <nl> + public function delete($files = null) <nl> + { <nl> + $this->builder->deleteSiteFiles($files); <nl> + } <nl> + <nl> + public function from() <nl> + { <nl> + // <nl> + } <nl> + <nl> + public function ignore($files) <nl> + { <nl> + $this->ignore = array_merge($this->ignore, collect($files)->toArray()); <nl> + } <nl> + <nl> + public function output() <nl> + { <nl> + // <nl> + } <nl> + <nl> + public function run($commands = null) <nl> + { <nl> + // <nl> + } <nl> +} <nl> ", "msg": "Add CustomInstaller (prelim) to handle customized init.php install files"}
{"diff_id": 3852, "repo": "tighten/jigsaw", "sha": "bb99deee6de6765e6e1852128ed3a95f88bc862d", "time": "21.02.2019 21:21:00", "diff": "mmm a / src/File/Filesystem.php <nl> ppp b / src/File/Filesystem.php <nl>@@ -19,7 +19,7 @@ class Filesystem extends BaseFilesystem <nl> { <nl> $directory_path = collect(explode('/', $file_path)); <nl> $directory_path->pop(); <nl> - $directory_path = trimPath($directory_path->implode('/')); <nl> + $directory_path = rightTrimPath($directory_path->implode('/')); <nl> if (! $this->isDirectory($directory_path)) { <nl> $this->makeDirectory($directory_path, 0755, true); <nl> ", "msg": "Switch to righTrim directory path\nFixes"}
{"diff_id": 3869, "repo": "tighten/jigsaw", "sha": "877fa65168f38ce35d86fcc6293a2db276edc216", "time": "24.02.2020 17:24:21", "diff": "mmm a / src/Parsers/JigsawMarkdownParser.php <nl> ppp b / src/Parsers/JigsawMarkdownParser.php <nl>@@ -6,6 +6,12 @@ use Michelf\\MarkdownExtra; <nl> class JigsawMarkdownParser extends MarkdownExtra <nl> { <nl> + public function __construct() <nl> + { <nl> + parent::__construct(); <nl> + $this->code_class_prefix = 'language_'; <nl> + } <nl> + <nl> public function text($text) <nl> { <nl> return $this->transform($text); <nl> ", "msg": "Restore `language_` default prefix to class names for fenced code blocks"}
{"diff_id": 3871, "repo": "tighten/jigsaw", "sha": "702c9766472dd403992a98850d10e5d227a37cf0", "time": "25.02.2020 17:15:53", "diff": "mmm a / src/Parsers/JigsawMarkdownParser.php <nl> ppp b / src/Parsers/JigsawMarkdownParser.php <nl>@@ -10,6 +10,9 @@ class JigsawMarkdownParser extends MarkdownExtra <nl> { <nl> parent::__construct(); <nl> $this->code_class_prefix = 'language-'; <nl> + $this->url_filter_func = function ($url) { <nl> + return str_replace(\"{{'@'}}\", '@', $url); <nl> + }; <nl> } <nl> public function text($text) <nl> ", "msg": "Restore `@` in mailto links that have been converted by MarkdownHandler"}
{"diff_id": 3885, "repo": "tighten/jigsaw", "sha": "2ff463d129113ab69eec6945f8847545f9656f3b", "time": "05.04.2020 18:39:03", "diff": "mmm a / src/Collection/Collection.php <nl> ppp b / src/Collection/Collection.php <nl>@@ -26,6 +26,7 @@ class Collection extends BaseCollection <nl> $sortedItems = $this <nl> ->defaultSort($items) <nl> ->filter($this->getFilter()) <nl> + ->map($this->getMap()) <nl> ->keyBy(function ($item) { <nl> return $item->getFilename(); <nl> }); <nl> @@ -67,6 +68,19 @@ class Collection extends BaseCollection <nl> }; <nl> } <nl> + private function getMap() <nl> + { <nl> + $map = Arr::get($this->settings, 'map'); <nl> + <nl> + if ($map) { <nl> + return $map; <nl> + } <nl> + <nl> + return function ($item) { <nl> + return $item; <nl> + }; <nl> + } <nl> + <nl> private function defaultSort($items) <nl> { <nl> $sortSettings = collect(Arr::get($this->settings, 'sort'))->map(function ($setting) { <nl> ", "msg": "Add support for mapping over collection inside of config"}
{"diff_id": 3899, "repo": "tighten/jigsaw", "sha": "05c5b10ab1f0a5738453f4e46ca63e83f014f5c2", "time": "14.08.2020 11:44:15", "diff": "mmm a / src/Loaders/CollectionDataLoader.php <nl> ppp b / src/Loaders/CollectionDataLoader.php <nl>@@ -61,6 +61,8 @@ class CollectionDataLoader <nl> return collect($this->filesystem->files($path)) <nl> ->reject(function ($file) { <nl> return Str::startsWith($file->getFilename(), '_'); <nl> + })->filter(function ($file) { <nl> + return $this->hasHandler($file); <nl> })->tap(function ($files) { <nl> $this->consoleOutput->progressBar('collections')->addSteps($files->count()); <nl> })->map(function ($file) { <nl> @@ -96,18 +98,18 @@ class CollectionDataLoader <nl> return $item; <nl> } <nl> - private function getHandler($file) <nl> + private function hasHandler($file): bool <nl> { <nl> - $handler = $this->handlers->first(function ($handler) use ($file) { <nl> + return $this->handlers->contains(function ($handler) use ($file) { <nl> return $handler->shouldHandle($file); <nl> }); <nl> - <nl> - if (! $handler) { <nl> - throw new Exception('No matching collection item handler for file: ' <nl> - . $file->getFilenameWithoutExtension() . \".\" . $file->getExtension() ); <nl> } <nl> - return $handler; <nl> + private function getHandler($file) <nl> + { <nl> + return $this->handlers->first(function ($handler) use ($file) { <nl> + return $handler->shouldHandle($file); <nl> + }); <nl> } <nl> private function getMetaData($file, $collection, $data) <nl> ", "msg": "Update CollectionDataLoader to filter out files without a matching handler"}
{"diff_id": 3901, "repo": "tighten/jigsaw", "sha": "ea5dbb0747af5e4b6735c0473da58eff7b0d8be1", "time": "20.12.2020 14:36:23", "diff": "mmm a / tests/SnapshotTest.php <nl> ppp b / tests/SnapshotTest.php <nl>@@ -25,7 +25,7 @@ class SnapshotTest extends SnapshotTestCase <nl> */ <nl> public function ds_store_files_are_not_built() <nl> { <nl> - $this->assertFileDoesNotExist('tests/build-testing/.DS_Store', 'DS_Store was built'); <nl> + $this->assertFileNotExists('tests/build-testing/.DS_Store', 'DS_Store was built'); <nl> } <nl> /** <nl> ", "msg": "use assertFileNotExists for backwards compatability"}
{"diff_id": 3928, "repo": "tighten/jigsaw", "sha": "b397b00facc759e733849d2bc2d8acf647b6c582", "time": "12.08.2022 15:54:25", "diff": "mmm a / src/Console/BuildCommand.php <nl> ppp b / src/Console/BuildCommand.php <nl>@@ -75,9 +75,21 @@ class BuildCommand extends Command <nl> $environmentConfigPath = $this->getAbsolutePath(\"config.{$env}.php\"); <nl> $environmentConfig = (new ConfigFile($environmentConfigPath))->config; <nl> - $this->app->config = collect( <nl> - ConfigFile::mergeConfigs($this->app->config, $environmentConfig) <nl> - ); <nl> + $baseConfig = $this->app->config; <nl> + <nl> + $this->app->config = collect($baseConfig) <nl> + ->merge(collect($environmentConfig)) <nl> + ->filter(function ($item) { <nl> + return $item !== null; <nl> + }); <nl> + <nl> + if ($this->app->config['merge_collections']) { <nl> + $this->app->config->put('collections', $this->app->config->get('collections')->map( <nl> + function ($envConfig, $key) use ($baseConfig) { <nl> + return array_merge($baseConfig->get('collections')->get($key), $envConfig); <nl> + } <nl> + )); <nl> + } <nl> } <nl> private function updateBuildPaths($env) <nl> ", "msg": "Simplify merge and hide behind config flag"}
{"diff_id": 4006, "repo": "dereuromark/cakephp-ide-helper", "sha": "3785df480407f0218e48727c8ce38f8fc33ddd6c", "time": "19.09.2018 14:21:06", "diff": "mmm a / src/Annotator/ModelAnnotator.php <nl> ppp b / src/Annotator/ModelAnnotator.php <nl>@@ -3,6 +3,7 @@ namespace IdeHelper\\Annotator; <nl> use Cake\\Core\\App; <nl> use Cake\\Database\\Schema\\TableSchema; <nl> +use Cake\\ORM\\Association\\HasMany; <nl> use Cake\\ORM\\AssociationCollection; <nl> use Cake\\ORM\\Association\\BelongsToMany; <nl> use Cake\\ORM\\Table; <nl> @@ -217,6 +218,7 @@ class ModelAnnotator extends AbstractAnnotator { <nl> $className = App::className($through, 'Model/Table', 'Table') ?: static::CLASS_TABLE; <nl> + $type = HasMany::class; <nl> $associations[$type][$through] = $className; <nl> } <nl> ", "msg": "Fix belongsToMany join table relation to be hasMany."}
{"diff_id": 4013, "repo": "dereuromark/cakephp-ide-helper", "sha": "123b263f71bc9653250bf446006775bfe34a26f8", "time": "06.02.2019 13:40:29", "diff": "mmm a / src/Generator/Task/TableFinderTask.php <nl> ppp b / src/Generator/Task/TableFinderTask.php <nl>@@ -7,7 +7,7 @@ use Cake\\ORM\\Association; <nl> use Cake\\ORM\\Query; <nl> use Cake\\ORM\\Table; <nl> use Cake\\ORM\\TableRegistry; <nl> -use Exception; <nl> +use Throwable; <nl> use ReflectionClass; <nl> class TableFinderTask extends ModelTask { <nl> @@ -75,7 +75,7 @@ class TableFinderTask extends ModelTask { <nl> $finderMap = $this->invokeProperty($behaviors, '_finderMap'); <nl> $customFinders = array_merge($customFinders, array_keys($finderMap)); <nl> - } catch (Exception $exception) { <nl> + } catch (Throwable $exception) { <nl> } <nl> $allFinders = array_merge($allFinders, $customFinders); <nl> ", "msg": "Allow TableFinderTask to work with abstract models"}
{"diff_id": 4067, "repo": "yiisoft/yii2-bootstrap4", "sha": "1f4d919f58fce6936de3105510bf78cf637966cf", "time": "20.01.2019 17:30:31", "diff": "mmm a / src/ActiveField.php <nl> ppp b / src/ActiveField.php <nl>@@ -203,18 +203,19 @@ class ActiveField extends \\yii\\widgets\\ActiveField <nl> Html::addCssClass($options, 'form-check-input'); <nl> Html::addCssClass($this->labelOptions, 'form-check-label'); <nl> - if (!isset($options['template'])) { <nl> - $this->template = ($enclosedByLabel) ? $this->checkEnclosedTemplate : $this->checkTemplate; <nl> - } else { <nl> - $this->template = $options['template']; <nl> - unset($options['template']); <nl> - } <nl> if ($this->form->layout === ActiveForm::LAYOUT_HORIZONTAL) { <nl> if (!isset($options['template'])) { <nl> $this->template = $this->checkHorizontalTemplate; <nl> } <nl> Html::removeCssClass($this->labelOptions, $this->horizontalCssClasses['label']); <nl> Html::addCssClass($this->wrapperOptions, $this->horizontalCssClasses['offset']); <nl> + } else { <nl> + if (!isset($options['template'])) { <nl> + $this->template = ($enclosedByLabel) ? $this->checkEnclosedTemplate : $this->checkTemplate; <nl> + } else { <nl> + $this->template = $options['template']; <nl> + unset($options['template']); <nl> + } <nl> } <nl> if ($enclosedByLabel) { <nl> @@ -235,18 +236,19 @@ class ActiveField extends \\yii\\widgets\\ActiveField <nl> Html::addCssClass($options, 'form-check-input'); <nl> Html::addCssClass($this->labelOptions, 'form-check-label'); <nl> - if (!isset($options['template'])) { <nl> - $this->template = ($enclosedByLabel) ? $this->checkEnclosedTemplate : $this->checkTemplate; <nl> - } else { <nl> - $this->template = $options['template']; <nl> - unset($options['template']); <nl> - } <nl> if ($this->form->layout === ActiveForm::LAYOUT_HORIZONTAL) { <nl> if (!isset($options['template'])) { <nl> $this->template = $this->checkHorizontalTemplate; <nl> } <nl> Html::removeCssClass($this->labelOptions, $this->horizontalCssClasses['label']); <nl> Html::addCssClass($this->wrapperOptions, $this->horizontalCssClasses['offset']); <nl> + } else { <nl> + if (!isset($options['template'])) { <nl> + $this->template = ($enclosedByLabel) ? $this->checkEnclosedTemplate : $this->checkTemplate; <nl> + } else { <nl> + $this->template = $options['template']; <nl> + unset($options['template']); <nl> + } <nl> } <nl> if ($enclosedByLabel) { <nl> ", "msg": "Added possibility of template override in horizontal layout forms of checkboxes and radios"}
{"diff_id": 4072, "repo": "yiisoft/yii2-bootstrap4", "sha": "e7021f30f1ff7c66686b661ed81bcad28173a714", "time": "02.07.2019 13:21:52", "diff": "mmm a / src/ActiveField.php <nl> ppp b / src/ActiveField.php <nl>@@ -137,6 +137,7 @@ class ActiveField extends \\yii\\widgets\\ActiveField <nl> public $checkTemplate = \"<div class=\\\"custom-control custom-checkbox\\\">\\n{input}\\n{label}\\n{error}\\n{hint}\\n</div>\"; <nl> /** <nl> * @var string the template for radios in default layout <nl> + * @since 2.0.5 <nl> */ <nl> public $radioTemplate = \"<div class=\\\"custom-control custom-radio\\\">\\n{input}\\n{label}\\n{error}\\n{hint}\\n</div>\"; <nl> /** <nl> @@ -145,6 +146,7 @@ class ActiveField extends \\yii\\widgets\\ActiveField <nl> public $checkHorizontalTemplate = \"{beginWrapper}\\n<div class=\\\"custom-control custom-checkbox\\\">\\n{input}\\n{label}\\n{error}\\n{hint}\\n</div>\\n{endWrapper}\"; <nl> /** <nl> * @var string the template for checkboxes and radios in horizontal layout <nl> + * @since 2.0.5 <nl> */ <nl> public $radioHorizontalTemplate = \"{beginWrapper}\\n<div class=\\\"custom-control custom-radio\\\">\\n{input}\\n{label}\\n{error}\\n{hint}\\n</div>\\n{endWrapper}\"; <nl> /** <nl> @@ -253,7 +255,7 @@ class ActiveField extends \\yii\\widgets\\ActiveField <nl> Html::addCssClass($this->labelOptions, 'custom-control-label'); <nl> if (!isset($options['template'])) { <nl> - $this->template = ($enclosedByLabel) ? $this->checkEnclosedTemplate : $this->radioTemplate; <nl> + $this->template = $enclosedByLabel ? $this->checkEnclosedTemplate : $this->radioTemplate; <nl> } else { <nl> $this->template = $options['template']; <nl> } <nl> @@ -266,11 +268,9 @@ class ActiveField extends \\yii\\widgets\\ActiveField <nl> } <nl> unset($options['template']); <nl> - if ($enclosedByLabel) { <nl> - if (isset($options['label'])) { <nl> + if ($enclosedByLabel && isset($options['label'])) { <nl> $this->parts['{labelTitle}'] = $options['label']; <nl> } <nl> - } <nl> return parent::radio($options, false); <nl> } <nl> ", "msg": "Add since tags, style adjustments"}
{"diff_id": 4073, "repo": "yiisoft/yii2-bootstrap4", "sha": "9f2da04db535834d8a97fe83e1813d8354db2529", "time": "10.08.2019 17:37:27", "diff": "mmm a / src/LinkPager.php <nl> ppp b / src/LinkPager.php <nl>@@ -18,6 +18,16 @@ use yii\\helpers\\ArrayHelper; <nl> * LinkPager works with a [[\\yii\\widget\\Pagination]] object which specifies the total number <nl> * of pages and the current page number. <nl> * <nl> + * To apply LinkPager globally e.g. in all GridViews, set in configuration DI: <nl> + * <nl> + * ```php <nl> + * 'container' => [ <nl> + * 'definitions' => [ <nl> + * \\yii\\widgets\\LinkPager::class => \\yii\\bootstrap4\\LinkPager::class, <nl> + * ], <nl> + * ], <nl> + * ``` <nl> + * <nl> * @see https://getbootstrap.com/docs/4.1/components/pagination/ <nl> * @author Simon Karlen <simi.albi@outlook.com> <nl> * @since 2.0.2 <nl> ", "msg": "Documentation - added example of how to apply LinkPager globally"}
{"diff_id": 4076, "repo": "yiisoft/yii2-bootstrap4", "sha": "0e7d8acf8fe665a5f8cb2e8ccc9bc928be7bc06a", "time": "06.02.2020 11:30:02", "diff": "mmm a / src/ActiveForm.php <nl> ppp b / src/ActiveForm.php <nl>@@ -130,7 +130,7 @@ class ActiveForm extends \\yii\\widgets\\ActiveForm <nl> /** <nl> * {@inheritdoc} <nl> - * @return \\yii\\widgets\\ActiveField <nl> + * @return \\yii\\bootstrap4\\ActiveField <nl> */ <nl> public function field($model, $attribute, $options = []) <nl> { <nl> ", "msg": "Update docblock with proper return type on field()"}
{"diff_id": 4084, "repo": "vaimo/composer-patches", "sha": "d1f8413d5effbd65be1c4c7a6db6c5e127240798", "time": "07.03.2017 13:05:16", "diff": "mmm a / src/Patches.php <nl> ppp b / src/Patches.php <nl>@@ -88,10 +88,27 @@ class Patches implements PluginInterface, EventSubscriberInterface { <nl> public static function getSubscribedEvents() { <nl> return array( <nl> PackageEvents::POST_PACKAGE_UNINSTALL => \"removePatches\", <nl> + PackageEvents::PRE_PACKAGE_INSTALL => \"resetAppliedPatches\", <nl> + PackageEvents::PRE_PACKAGE_UPDATE => \"resetAppliedPatches\", <nl> ScriptEvents::PRE_AUTOLOAD_DUMP => \"postInstall\" <nl> ); <nl> } <nl> + public function resetAppliedPatches(\\Composer\\Installer\\PackageEvent $event) { <nl> + foreach ($event->getOperations() as $operation) { <nl> + if ($operation->getJobType() != 'install') { <nl> + continue; <nl> + } <nl> + <nl> + $package = $this->getPackageFromOperation($operation); <nl> + $extra = $package->getExtra(); <nl> + <nl> + unset($extra['patches_applied']); <nl> + <nl> + $package->setExtra($extra); <nl> + } <nl> + } <nl> + <nl> protected function preparePatchDefinitions($patches, $ownerPackage = null) { <nl> $_patches = array(); <nl> ", "msg": "Re-introduced a reset mechanism to make sure that when package is installed, all patches are re-applied"}
{"diff_id": 4088, "repo": "vaimo/composer-patches", "sha": "afcf32276f89dee714258ee52e23e2a089837f71", "time": "12.03.2017 20:04:09", "diff": "mmm a / src/Patches.php <nl> ppp b / src/Patches.php <nl>@@ -544,34 +544,28 @@ class Patches implements \\Composer\\Plugin\\PluginInterface, \\Composer\\EventDispat <nl> protected function applyPatch($filename, $cwd) <nl> { <nl> - $patchAppliedSuccessfully = false; <nl> + $patchApplied = false; <nl> $patchLevelSequence = array('-p1', '-p0', '-p2'); <nl> foreach ($patchLevelSequence as $patchLevel) { <nl> - $patchValidated = $this->executeCommand( <nl> - 'cd %s && GIT_DIR=. git apply --check %s %s', $cwd, $patchLevel, $filename <nl> - ); <nl> + $patchValidated = $this->executeCommand('git apply --check %s %s', [$patchLevel, $filename], $cwd); <nl> if (!$patchValidated) { <nl> continue; <nl> } <nl> - $patchAppliedSuccessfully = $this->executeCommand( <nl> - 'cd %s && GIT_DIR=. git apply %s %s', $cwd, $patchLevel, $filename <nl> - ); <nl> + $patchApplied = $this->executeCommand('git apply %s %s', [$patchLevel, $filename], $cwd); <nl> - if ($patchAppliedSuccessfully) { <nl> + if ($patchApplied) { <nl> break; <nl> } <nl> } <nl> - if (!$patchAppliedSuccessfully) { <nl> + if (!$patchApplied) { <nl> foreach ($patchLevelSequence as $patchLevel) { <nl> - $patchAppliedSuccessfully = $this->executeCommand( <nl> - 'patch %s --no-backup-if-mismatch -d %s < %s', $patchLevel, $cwd, $filename <nl> - ); <nl> + $patchApplied = $this->executeCommand('patch %s --no-backup-if-mismatch < %s', [$patchLevel, $filename], $cwd); <nl> - if ($patchAppliedSuccessfully) { <nl> + if ($patchApplied) { <nl> break; <nl> } <nl> } <nl> @@ -581,19 +575,19 @@ class Patches implements \\Composer\\Plugin\\PluginInterface, \\Composer\\EventDispat <nl> unlink($filename); <nl> } <nl> - if (!$patchAppliedSuccessfully) { <nl> + if (!$patchApplied) { <nl> throw new \\Exception(sprintf('Cannot apply patch %s', $filename)); <nl> } <nl> } <nl> - protected function executeCommand() <nl> + protected function executeCommand($commandTemplate, array $arguments, $cwd = null) <nl> { <nl> - $arguments = func_get_args(); <nl> - <nl> - foreach (array_slice($arguments, 1, null, true) as $index => $argument) { <nl> + foreach ($arguments as $index => $argument) { <nl> $arguments[$index] = escapeshellarg($argument); <nl> } <nl> + $command = vsprintf($commandTemplate, $arguments); <nl> + <nl> $outputHandler = ''; <nl> if ($this->io->isVerbose()) { <nl> @@ -608,8 +602,6 @@ class Patches implements \\Composer\\Plugin\\PluginInterface, \\Composer\\EventDispat <nl> }; <nl> } <nl> - $result = $this->executor->execute(call_user_func_array('sprintf', $arguments), $outputHandler) == 0; <nl> - <nl> - return $result === true; <nl> + return $this->executor->execute($command, $outputHandler, $cwd) == 0; <nl> } <nl> } <nl> ", "msg": "Switched to using CWD setting of composer proxess executor instead of doing system level CD"}
{"diff_id": 4098, "repo": "vaimo/composer-patches", "sha": "6c52f51a5fe84522102ee2e13e5ed6c39b6cfa2a", "time": "08.02.2018 14:39:13", "diff": "mmm a / src/Package/Collector.php <nl> ppp b / src/Package/Collector.php <nl>@@ -33,6 +33,7 @@ class Collector <nl> { <nl> $targets = array(); <nl> + /** @var \\Composer\\Package\\CompletePackageInterface[] $packages */ <nl> $packages = $repository->getPackages(); <nl> foreach ($packages as $package) { <nl> ", "msg": "Added type comment to enable IDE auto-complete"}
{"diff_id": 4100, "repo": "vaimo/composer-patches", "sha": "daff71a3b3a2b2bdf130b539cecc1084fc23b470", "time": "12.02.2018 19:53:22", "diff": "mmm a / src/Repository/PatchesApplier.php <nl> ppp b / src/Repository/PatchesApplier.php <nl>@@ -181,9 +181,6 @@ class PatchesApplier <nl> ); <nl> $this->installationManager->install($repository->getSource(), $operation); <nl> - <nl> -// \\Composer\\Script\\ScriptEvents::POST_INSTALL_CMD <nl> -// $resetTarget->getDeployStrategy()->deploy(); <nl> } finally { <nl> OutputUtils::resetVerbosity($output, $verbosityLevel); <nl> } <nl> ", "msg": "remove tmp added code while gathering information on how certain post-install events trigger deploy"}
{"diff_id": 4107, "repo": "vaimo/composer-patches", "sha": "afa959de4c3d47ded530dbc190363a1b794d9cae", "time": "12.08.2018 03:23:20", "diff": "mmm a / src/Composer/Commands/ValidateCommand.php <nl> ppp b / src/Composer/Commands/ValidateCommand.php <nl>@@ -149,16 +149,16 @@ class ValidateCommand extends \\Composer\\Command\\BaseCommand <nl> } <nl> if ($groups = array_filter($groups)) { <nl> - $output->writeln('<error>Orphans found!</error>'); <nl> - <nl> foreach ($groups as $packageName => $paths) { <nl> - $output->writeln(sprintf('<info>%s</info>', $packageName)); <nl> + $output->writeln(sprintf('- <info>%s</info>', $packageName)); <nl> foreach ($paths as $path) { <nl> - $output->writeln(sprintf('- %s', $path)); <nl> + $output->writeln(sprintf(' ~ %s', $path)); <nl> } <nl> } <nl> + $output->writeln('<error>Orphans found!</error>'); <nl> + <nl> exit(1); <nl> } else { <nl> $output->writeln('<info>Done</info>'); <nl> ", "msg": "moved error message as the last message before exit"}
{"diff_id": 4109, "repo": "vaimo/composer-patches", "sha": "b466e7ac5aea904d5e30c49dc14a80873a8bacae", "time": "31.03.2019 19:34:24", "diff": "mmm a / src/Factories/ConfigFactory.php <nl> ppp b / src/Factories/ConfigFactory.php <nl>@@ -97,6 +97,13 @@ class ConfigFactory <nl> $defaults <nl> ); <nl> + $config = $this->establishValidSubOperations($config, $subConfigKeys); <nl> + <nl> + return new PluginConfig($config); <nl> + } <nl> + <nl> + private function establishValidSubOperations(array $config, array $subConfigKeys) <nl> + { <nl> $subOperationKeys = array_merge( <nl> array_filter($subConfigKeys), <nl> array(PluginConfig::OS_DEFAULT) <nl> @@ -133,6 +140,6 @@ class ConfigFactory <nl> } <nl> } <nl> - return new PluginConfig($config); <nl> + return $config; <nl> } <nl> } <nl> ", "msg": "increase code readability by moving subOperation resolver to separate private function of a class"}
{"diff_id": 4115, "repo": "vaimo/composer-patches", "sha": "d03be8c1f0f98cc2c191d56f1235ac1274291f6d", "time": "14.06.2019 18:29:07", "diff": "mmm a / src/Utils/FileSystemUtils.php <nl> ppp b / src/Utils/FileSystemUtils.php <nl>@@ -29,12 +29,13 @@ class FileSystemUtils <nl> $files[substr($path, strlen($rootPath) + 1)] = $path; <nl> } <nl> - array_multisort( <nl> - array_keys($files), <nl> - SORT_NATURAL | SORT_FLAG_CASE, <nl> + $sequence = array_keys($files); <nl> + <nl> + natsort($sequence); <nl> + <nl> + return array_replace( <nl> + array_flip($sequence), <nl> $files <nl> ); <nl> - <nl> - return $files; <nl> } <nl> } <nl> ", "msg": "switch file list sorting to use basic natsort() due to certain multisort operation flags not being available on 5.3"}
{"diff_id": 4121, "repo": "vaimo/composer-patches", "sha": "ba5cc3d87f40af2148fba0be7c8809e8c85f49e0", "time": "17.06.2019 13:34:45", "diff": "mmm a / src/Composer/Commands/ListCommand.php <nl> ppp b / src/Composer/Commands/ListCommand.php <nl>@@ -125,8 +125,6 @@ class ListCommand extends \\Composer\\Command\\BaseCommand <nl> 'targets-resolver' => new LoaderComponents\\TargetsResolverComponent($packageInfoResolver, true) <nl> )); <nl> - $hasFilers = (bool)array_filter($filters); <nl> - <nl> $listResolver = new ListResolvers\\FilteredListResolver($filters); <nl> $loaderFactory = new \\Vaimo\\ComposerPatches\\Factories\\PatchesLoaderFactory($composer); <nl> @@ -149,48 +147,18 @@ class ListCommand extends \\Composer\\Command\\BaseCommand <nl> $patchListUtils = new \\Vaimo\\ComposerPatches\\Utils\\PatchListUtils(); <nl> $patchListUpdater = new \\Vaimo\\ComposerPatches\\Patch\\DefinitionList\\Updater(); <nl> - $filteredPatches = $patchListUtils->mergeLists( <nl> + $filteredPatches = $this->composerFilteredPatchesList( <nl> $filteredPatches, <nl> - $removeQueue <nl> - ); <nl> - <nl> - if ($withAffected) { <nl> - $applyQueue = $patchListUpdater->embedInfoToItems( <nl> $applyQueue, <nl> - array(PatchDefinition::STATUS => 'affected'), <nl> - true <nl> - ); <nl> - } <nl> - <nl> - $filteredPatches = $patchListUtils->mergeLists( <nl> - $filteredPatches, <nl> - $patchListUtils->intersectListsByName($applyQueue, $filteredPatches) <nl> - ); <nl> - <nl> - $filteredPatches = $patchListUpdater->embedInfoToItems( <nl> - $filteredPatches, <nl> - array(PatchDefinition::STATUS => 'applied'), <nl> - true <nl> + $removeQueue, <nl> + $withAffected, <nl> + $filters <nl> ); <nl> - if ($hasFilers) { <nl> - $filteredPatches = $listResolver->resolvePatchesQueue($filteredPatches); <nl> - } <nl> + $patches = array_filter($filteredPatches); <nl> $filterUtils = new \\Vaimo\\ComposerPatches\\Utils\\FilterUtils(); <nl> - if (!empty($statusFilters)) { <nl> - $statusFilter = $filterUtils->composeRegex($statusFilters, '/'); <nl> - <nl> - $filteredPatches = $patchListUtils->applyDefinitionKeyValueFilter( <nl> - $filteredPatches, <nl> - $statusFilter, <nl> - PatchDefinition::STATUS <nl> - ); <nl> - } <nl> - <nl> - $patches = array_filter($filteredPatches); <nl> - <nl> $shouldAddExcludes = $withExcluded <nl> && ( <nl> empty($statusFilters) <nl> @@ -229,6 +197,58 @@ class ListCommand extends \\Composer\\Command\\BaseCommand <nl> $this->generateOutput($output, $patches); <nl> } <nl> + private function composerFilteredPatchesList($patches, $applyQueue, $removeQueue, $withAffected, $filters) <nl> + { <nl> + $hasFilers = (bool)array_filter($filters); <nl> + <nl> + $listResolver = new ListResolvers\\FilteredListResolver($filters); <nl> + <nl> + $patchListUtils = new \\Vaimo\\ComposerPatches\\Utils\\PatchListUtils(); <nl> + $patchListUpdater = new \\Vaimo\\ComposerPatches\\Patch\\DefinitionList\\Updater(); <nl> + <nl> + $filteredPatches = $patchListUtils->mergeLists( <nl> + $patches, <nl> + $removeQueue <nl> + ); <nl> + <nl> + if ($withAffected) { <nl> + $applyQueue = $patchListUpdater->embedInfoToItems( <nl> + $applyQueue, <nl> + array(PatchDefinition::STATUS => 'affected'), <nl> + true <nl> + ); <nl> + } <nl> + <nl> + $filteredPatches = $patchListUtils->mergeLists( <nl> + $filteredPatches, <nl> + $patchListUtils->intersectListsByName($applyQueue, $filteredPatches) <nl> + ); <nl> + <nl> + $filteredPatches = $patchListUpdater->embedInfoToItems( <nl> + $filteredPatches, <nl> + array(PatchDefinition::STATUS => 'applied'), <nl> + true <nl> + ); <nl> + <nl> + if ($hasFilers) { <nl> + $filteredPatches = $listResolver->resolvePatchesQueue($filteredPatches); <nl> + } <nl> + <nl> + $filterUtils = new \\Vaimo\\ComposerPatches\\Utils\\FilterUtils(); <nl> + <nl> + if (!empty($statusFilters)) { <nl> + $statusFilter = $filterUtils->composeRegex($statusFilters, '/'); <nl> + <nl> + $filteredPatches = $patchListUtils->applyDefinitionKeyValueFilter( <nl> + $filteredPatches, <nl> + $statusFilter, <nl> + PatchDefinition::STATUS <nl> + ); <nl> + } <nl> + <nl> + return $filteredPatches; <nl> + } <nl> + <nl> private function createConfigWithEnabledSources(Composer $composer) <nl> { <nl> $configDefaults = new \\Vaimo\\ComposerPatches\\Config\\Defaults(); <nl> ", "msg": "split list method to smaller components to reduce complexity and aid readability"}
{"diff_id": 4141, "repo": "nova-framework/framework", "sha": "6f15662d04337cf716ad07bbe0ea0b9ccf9e071a", "time": "01.01.2017 10:17:15", "diff": "mmm a / app/Templates/AdminLTE/backend.php <nl> ppp b / app/Templates/AdminLTE/backend.php <nl>// Prepare the current User Info. <nl> $user = Auth::user(); <nl> +if ($user->imagePath == '') { <nl> + $imagePath = vendor_url('dist/img/avatar5.png', 'almasaeed2010/adminlte'); <nl> +} else { <nl> + $imagePath = resource_url($user->imagePath, 'Users'); <nl> +} <nl> + <nl> // Generate the Language Changer menu. <nl> $langCode = Language::code(); <nl> $langName = Language::name(); <nl> @@ -119,14 +125,14 @@ $langMenuLinks = ob_get_clean(); <nl> <!-- Menu Toggle Button --> <nl> <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"> <nl> <!-- The user image in the navbar--> <nl> - <img src=\"<?= vendor_url('dist/img/avatar5.png', 'almasaeed2010/adminlte'); ?>\" class=\"user-image\" alt=\"User Image\"> <nl> + <img src=\"<?= $imagePath ?>\" class=\"user-image\" alt=\"User Image\"> <nl> <!-- hidden-xs hides the username on small devices so only the image appears. --> <nl> <span class=\"hidden-xs\"><?= $user->username; ?></span> <nl> </a> <nl> <ul class=\"dropdown-menu\"> <nl> <!-- The user image in the menu --> <nl> <li class=\"user-header\"> <nl> - <img src=\"<?= vendor_url('dist/img/avatar5.png', 'almasaeed2010/adminlte'); ?>\" class=\"img-circle\" alt=\"User Image\"> <nl> + <img src=\"<?= $imagePath ?>\" class=\"img-circle\" alt=\"User Image\"> <nl> <p> <nl> <?= $user->realname; ?> - <?= $user->role->name; ?> <nl> ", "msg": "added option to load user profile image if exists"}
{"diff_id": 4152, "repo": "nova-framework/framework", "sha": "771723b8e23b02da3098e6a409c812c412f83e32", "time": "18.01.2017 23:12:30", "diff": "mmm a / app/Modules/System/Events.php <nl> ppp b / app/Modules/System/Events.php <nl>@@ -29,7 +29,7 @@ Event::listen('backend.menu', function($user) <nl> ), <nl> array( <nl> 'uri' => 'admin/roles', <nl> - 'title' => __d('users', 'User Roles'), <nl> + 'title' => __d('system', 'User Roles'), <nl> 'label' => '', <nl> 'weight' => 1, <nl> ), <nl> ", "msg": "small fix - ranslated message back with Domain."}
{"diff_id": 4203, "repo": "nova-framework/framework", "sha": "246d514055f5d47d9ba76d1fa1a82cfc2005b073", "time": "18.06.2017 21:42:45", "diff": "mmm a / app/Controllers/BaseController.php <nl> ppp b / app/Controllers/BaseController.php <nl>@@ -9,6 +9,7 @@ use Nova\\Routing\\Controller; <nl> use Nova\\Support\\Contracts\\RenderableInterface; <nl> use Nova\\Support\\Facades\\App; <nl> use Nova\\Support\\Facades\\Config; <nl> +use Nova\\Support\\Facades\\Language; <nl> use Nova\\Support\\Facades\\View; <nl> use Nova\\Support\\Str; <nl> @@ -127,7 +128,17 @@ class BaseController extends Controller <nl> } <nl> if ($this->autoLayout() && ($response instanceof RenderableInterface)) { <nl> + $direction = Language::direction(); <nl> + <nl> + if ($direction === 'ltr') { <nl> + $view = $this->getLayoutName(); <nl> + } else { <nl> + $layout = 'RTL/' .$this->layout; <nl> + <nl> + if (! View::exists($view = $this->getLayoutName($layout))) { <nl> $view = $this->getLayoutName(); <nl> + } <nl> + } <nl> return View::make($view, $this->viewData)->with('content', $response); <nl> } <nl> ", "msg": "Implement the RTL support for Layouts"}
{"diff_id": 4237, "repo": "minkphp/mink", "sha": "803db2c14216f55f6085cca45b69d01b5f968c80", "time": "17.10.2017 11:39:51", "diff": "mmm a / src/WebAssert.php <nl> ppp b / src/WebAssert.php <nl>@@ -319,10 +319,9 @@ class WebAssert <nl> public function responseContains($text) <nl> { <nl> $actual = $this->session->getPage()->getContent(); <nl> - $regex = '/'.preg_quote($text, '/').'/ui'; <nl> $message = sprintf('The string \"%s\" was not found anywhere in the HTML response of the current page.', $text); <nl> - $this->assert((bool) preg_match($regex, $actual), $message); <nl> + $this->assert(strpos($actual, $text) !== FALSE, $message); <nl> } <nl> /** <nl> @@ -335,10 +334,9 @@ class WebAssert <nl> public function responseNotContains($text) <nl> { <nl> $actual = $this->session->getPage()->getContent(); <nl> - $regex = '/'.preg_quote($text, '/').'/ui'; <nl> $message = sprintf('The string \"%s\" appears in the HTML response of this page, but it should not.', $text); <nl> - $this->assert(!preg_match($regex, $actual), $message); <nl> + $this->assert(strpos($actual, $text) === FALSE, $message); <nl> } <nl> /** <nl> ", "msg": "Modify response[Contains|NotContains] to use strpos vs preg_match\nThis has a distinct performance benefit although probably quite minor in most cases."}
{"diff_id": 4249, "repo": "symfony/event-dispatcher", "sha": "67535f1e3fd662bdc68d7ba317c93eecd973617e", "time": "09.06.2017 13:21:59", "diff": "mmm a / Debug/WrappedListener.php <nl> ppp b / Debug/WrappedListener.php <nl>@@ -15,7 +15,6 @@ use Symfony\\Component\\Stopwatch\\Stopwatch; <nl> use Symfony\\Component\\EventDispatcher\\Event; <nl> use Symfony\\Component\\EventDispatcher\\EventDispatcherInterface; <nl> use Symfony\\Component\\VarDumper\\Caster\\ClassStub; <nl> -use Symfony\\Component\\VarDumper\\Cloner\\VarCloner; <nl> /** <nl> * @author Fabien Potencier <fabien@symfony.com> <nl> @@ -30,8 +29,7 @@ class WrappedListener <nl> private $dispatcher; <nl> private $pretty; <nl> private $stub; <nl> - <nl> - private static $cloner; <nl> + private static $hasClassStub; <nl> public function __construct($listener, $name, Stopwatch $stopwatch, EventDispatcherInterface $dispatcher = null) <nl> { <nl> @@ -58,8 +56,8 @@ class WrappedListener <nl> $this->name = $name; <nl> } <nl> - if (null === self::$cloner) { <nl> - self::$cloner = class_exists(ClassStub::class) ? new VarCloner() : false; <nl> + if (null === self::$hasClassStub) { <nl> + self::$hasClassStub = class_exists(ClassStub::class); <nl> } <nl> } <nl> @@ -86,7 +84,7 @@ class WrappedListener <nl> public function getInfo($eventName) <nl> { <nl> if (null === $this->stub) { <nl> - $this->stub = false === self::$cloner ? $this->pretty.'()' : new ClassStub($this->pretty.'()', $this->listener); <nl> + $this->stub = self::$hasClassStub ? new ClassStub($this->pretty.'()', $this->listener) : $this->pretty.'()'; <nl> } <nl> return array( <nl> ", "msg": "[EventDispatcher] Remove dead code in WrappedListener"}
{"diff_id": 4256, "repo": "symfony/event-dispatcher", "sha": "e46eb3e7222577873990262eda1f8b3eda69a668", "time": "01.11.2018 16:20:35", "diff": "mmm a / Debug/WrappedListener.php <nl> ppp b / Debug/WrappedListener.php <nl>@@ -34,7 +34,6 @@ class WrappedListener <nl> public function __construct($listener, $name, Stopwatch $stopwatch, EventDispatcherInterface $dispatcher = null) <nl> { <nl> $this->listener = $listener; <nl> - $this->name = $name; <nl> $this->stopwatch = $stopwatch; <nl> $this->dispatcher = $dispatcher; <nl> $this->called = false; <nl> @@ -44,7 +43,17 @@ class WrappedListener <nl> $this->name = \\is_object($listener[0]) ? \\get_class($listener[0]) : $listener[0]; <nl> $this->pretty = $this->name.'::'.$listener[1]; <nl> } elseif ($listener instanceof \\Closure) { <nl> + $r = new \\ReflectionFunction($listener); <nl> + if (false !== strpos($r->name, '{closure}')) { <nl> $this->pretty = $this->name = 'closure'; <nl> + } elseif ($this->name = $r->getClosureScopeClass()) { <nl> + $this->pretty = $this->name.'::'.$r->name; <nl> + } elseif ($class = $r->getClosureThis()) { <nl> + $this->name = \\get_class($class); <nl> + $this->pretty = $this->name.'::'.$r->name; <nl> + } else { <nl> + $this->pretty = $this->name = $r->name; <nl> + } <nl> } elseif (\\is_string($listener)) { <nl> $this->pretty = $this->name = $listener; <nl> } else { <nl> ", "msg": "[VarDumper] fix dump of closures created from callables"}
{"diff_id": 4272, "repo": "symfony/event-dispatcher", "sha": "0fcb098f1e5a1a2a41a6fe662ac394d3c7c07f73", "time": "18.08.2019 12:29:20", "diff": "mmm a / Debug/TraceableEventDispatcher.php <nl> ppp b / Debug/TraceableEventDispatcher.php <nl>@@ -171,9 +171,7 @@ class TraceableEventDispatcher implements EventDispatcherInterface, ResetInterfa <nl> } <nl> /** <nl> - * {@inheritdoc} <nl> - * <nl> - * @param Request|null $request The request to get listeners for <nl> + * @return array <nl> */ <nl> public function getCalledListeners(Request $request = null) <nl> { <nl> @@ -181,7 +179,7 @@ class TraceableEventDispatcher implements EventDispatcherInterface, ResetInterfa <nl> return []; <nl> } <nl> - $hash = 1 <= \\func_num_args() && null !== ($request = func_get_arg(0)) ? spl_object_hash($request) : null; <nl> + $hash = $request ? spl_object_hash($request) : null; <nl> $called = []; <nl> foreach ($this->callStack as $listener) { <nl> list($eventName, $requestHash) = $this->callStack->getInfo(); <nl> @@ -194,9 +192,7 @@ class TraceableEventDispatcher implements EventDispatcherInterface, ResetInterfa <nl> } <nl> /** <nl> - * {@inheritdoc} <nl> - * <nl> - * @param Request|null $request The request to get listeners for <nl> + * @return array <nl> */ <nl> public function getNotCalledListeners(Request $request = null) <nl> { <nl> @@ -211,7 +207,7 @@ class TraceableEventDispatcher implements EventDispatcherInterface, ResetInterfa <nl> return []; <nl> } <nl> - $hash = 1 <= \\func_num_args() && null !== ($request = func_get_arg(0)) ? spl_object_hash($request) : null; <nl> + $hash = $request ? spl_object_hash($request) : null; <nl> $calledListeners = []; <nl> if (null !== $this->callStack) { <nl> @@ -241,12 +237,9 @@ class TraceableEventDispatcher implements EventDispatcherInterface, ResetInterfa <nl> return $notCalled; <nl> } <nl> - /** <nl> - * @param Request|null $request The request to get orphaned events for <nl> - */ <nl> public function getOrphanedEvents(Request $request = null): array <nl> { <nl> - if (1 <= \\func_num_args() && null !== $request = func_get_arg(0)) { <nl> + if ($request) { <nl> return $this->orphanedEvents[spl_object_hash($request)] ?? []; <nl> } <nl> ", "msg": "[EventDispatcher] Remove remaining deprecation code."}
{"diff_id": 4283, "repo": "symfony/event-dispatcher", "sha": "a7c8f375f27d96f518e5aee79fbd9f1c6ef79267", "time": "18.02.2021 17:19:14", "diff": "mmm a / Attribute/EventListener.php <nl> ppp b / Attribute/EventListener.php <nl>@@ -22,7 +22,8 @@ class EventListener <nl> public function __construct( <nl> public ?string $event = null, <nl> public ?string $method = null, <nl> - public int $priority = 0 <nl> + public int $priority = 0, <nl> + public ?string $dispatcher = null, <nl> ) { <nl> } <nl> } <nl> ", "msg": "[EventDispatcher] add missing \"dispatcher\" property on #[EventListener]"}
{"diff_id": 4285, "repo": "symfony/event-dispatcher", "sha": "c7024b2e27f53013c6957c96ccdedee6beaf47c4", "time": "01.07.2021 10:06:00", "diff": "mmm a / DependencyInjection/RegisterListenersPass.php <nl> ppp b / DependencyInjection/RegisterListenersPass.php <nl>@@ -31,9 +31,9 @@ class RegisterListenersPass implements CompilerPassInterface <nl> protected $eventAliasesParameter; <nl> private $hotPathEvents = []; <nl> - private $hotPathTagName; <nl> + private $hotPathTagName = 'container.hot_path'; <nl> private $noPreloadEvents = []; <nl> - private $noPreloadTagName; <nl> + private $noPreloadTagName = 'container.no_preload'; <nl> public function __construct(string $dispatcherService = 'event_dispatcher', string $listenerTag = 'kernel.event_listener', string $subscriberTag = 'kernel.event_subscriber', string $eventAliasesParameter = 'event_dispatcher.event_aliases') <nl> { <nl> @@ -50,10 +50,14 @@ class RegisterListenersPass implements CompilerPassInterface <nl> /** <nl> * @return $this <nl> */ <nl> - public function setHotPathEvents(array $hotPathEvents, string $tagName = 'container.hot_path') <nl> + public function setHotPathEvents(array $hotPathEvents) <nl> { <nl> $this->hotPathEvents = array_flip($hotPathEvents); <nl> - $this->hotPathTagName = $tagName; <nl> + <nl> + if (1 < \\func_num_args()) { <nl> + trigger_deprecation('symfony/event-dispatcher', '5.4', 'Configuring \"$tagName\" in \"%s\" is deprecated.', __METHOD__); <nl> + $this->hotPathTagName = func_get_arg(1); <nl> + } <nl> return $this; <nl> } <nl> @@ -61,10 +65,14 @@ class RegisterListenersPass implements CompilerPassInterface <nl> /** <nl> * @return $this <nl> */ <nl> - public function setNoPreloadEvents(array $noPreloadEvents, string $tagName = 'container.no_preload'): self <nl> + public function setNoPreloadEvents(array $noPreloadEvents): self <nl> { <nl> $this->noPreloadEvents = array_flip($noPreloadEvents); <nl> - $this->noPreloadTagName = $tagName; <nl> + <nl> + if (1 < \\func_num_args()) { <nl> + trigger_deprecation('symfony/event-dispatcher', '5.4', 'Configuring \"$tagName\" in \"%s\" is deprecated.', __METHOD__); <nl> + $this->noPreloadTagName = func_get_arg(1); <nl> + } <nl> return $this; <nl> } <nl> ", "msg": "Deprecate configuring tags on RegisterListenersPass"}
{"diff_id": 4309, "repo": "openclassify/openclassify", "sha": "10aa3034516031a91d5ae33417f4f3e079ef6a03", "time": "10.10.2019 20:16:26", "diff": "mmm a / addons/default/visiosoft/advs-module/src/Adv/AdvRepository.php <nl> ppp b / addons/default/visiosoft/advs-module/src/Adv/AdvRepository.php <nl>@@ -52,17 +52,24 @@ class AdvRepository extends EntryRepository implements AdvRepositoryInterface <nl> $isActiveDopings = new AdvModel(); <nl> $isActiveDopings = $isActiveDopings->is_enabled('dopings'); <nl> - $query = $this->model->newQuery(); <nl> + $query = $this->model; <nl> $query = $query->where('advs_advs.slug', '!=', \"\"); <nl> $query = $query->where('advs_advs.status', 'approved'); <nl> $query = $query->where('advs_advs.finish_at', '>', date('Y-m-d H:i:s')); <nl> + <nl> + $query = $query->leftJoin('advs_advs_translations', function ($join) { <nl> + $join->on('advs_advs.id', '=', 'advs_advs_translations.entry_id'); <nl> + $join->where('advs_advs_translations.locale', '=', Request()->session()->get('_locale')); <nl> + }); <nl> + <nl> if (!empty($param['keyword'])) { <nl> $delimiter = '_'; <nl> $keyword = str_slug($param['keyword'], $delimiter); <nl> $query = $query->where(function ($query) use ($keyword) { <nl> - $query->where('advs_desc', 'like', '%' . $keyword . '%') <nl> - ->orWhere('slug', 'like', '%' . $keyword . '%'); <nl> + $query->where('advs_advs_translations.advs_desc', 'like', '%' . $keyword . '%') <nl> + ->orWhere('slug', 'like', '%' . $keyword . '%') <nl> + ->orWhere('advs_advs_translations.name', 'like', '%' . $keyword . '%'); <nl> }); <nl> } <nl> if (!empty($param['country'])) { <nl> ", "msg": "fixed search keyword for advs description and name"}
{"diff_id": 4318, "repo": "openclassify/openclassify", "sha": "3d825471bc6661a884e597fd9e083a92b629ca58", "time": "13.11.2019 11:37:34", "diff": "mmm a / addons/default/visiosoft/advs-module/src/Http/Controller/Admin/AdvsController.php <nl> ppp b / addons/default/visiosoft/advs-module/src/Http/Controller/Admin/AdvsController.php <nl>@@ -83,8 +83,14 @@ class AdvsController extends AdminController <nl> $table->setColumns([ <nl> 'cover_photo' => [ <nl> - 'wrapper' => '<img width=\"64\" src=\"{value.cover_photo}\">', <nl> - 'value' => ['cover_photo' => 'entry.cover_photo'] <nl> + 'wrapper' => function (EntryInterface $entry, Request $request) { <nl> + if (strpos($entry->cover_photo, 'http') === 0) { <nl> + $wrapper = '<img width=\"64\" src=\"'.$entry->cover_photo.'\">'; <nl> + } else { <nl> + $wrapper = '<img width=\"64\" src=\"'.$request->root().$entry->cover_photo.'\">'; <nl> + } <nl> + return $wrapper; <nl> + }, <nl> ], <nl> 'entry.id', <nl> 'name' => [ <nl> ", "msg": "Show ad cover photo, Fixed cover photo not showing if it was saved localy."}
{"diff_id": 4398, "repo": "openclassify/openclassify", "sha": "6df9b45921ba24f1412f9a0219277f5fff5d88e7", "time": "09.06.2020 10:48:16", "diff": "mmm a / resources/streams/config/currencies.php <nl> ppp b / resources/streams/config/currencies.php <nl>@@ -77,7 +77,7 @@ return [ <nl> 'separator' => ',', <nl> 'point' => '.', <nl> 'decimals' => 2, <nl> - 'symbol' => 'L', <nl> + 'symbol' => 'Leke', <nl> ], <nl> 'AMD' => [ <nl> 'name' => 'Armenian Dram', <nl> ", "msg": "change currency symbol & fix trans"}
{"diff_id": 4424, "repo": "openclassify/openclassify", "sha": "3b226fc6d4ff328ab9b97c654692353cb13a6f87", "time": "26.10.2020 15:03:11", "diff": "mmm a / addons/default/visiosoft/advs-module/migrations/2020_10_16_124151_visiosoft.module.advs__create_option_configuration_stream.php <nl> ppp b / addons/default/visiosoft/advs-module/migrations/2020_10_16_124151_visiosoft.module.advs__create_option_configuration_stream.php <nl>@@ -52,7 +52,6 @@ class VisiosoftModuleAdvsCreateOptionConfigurationStream extends Migration <nl> ], <nl> 'option_json' => [ <nl> 'required' => true, <nl> - 'unique' => true, <nl> ], <nl> ]; <nl> ", "msg": "oc product options error fixed"}
{"diff_id": 4429, "repo": "openclassify/openclassify", "sha": "7c0065964562d6b05b8135dd81b711ad2cfc3204", "time": "29.10.2020 12:13:05", "diff": "mmm a / addons/default/visiosoft/cats-module/src/Category/CategoryModel.php <nl> ppp b / addons/default/visiosoft/cats-module/src/Category/CategoryModel.php <nl>@@ -15,7 +15,7 @@ class CategoryModel extends CatsCategoryEntryModel implements CategoryInterface <nl> ->first(); <nl> } <nl> - public function getParentCats($id, $type = null) <nl> + public function getParentCats($id, $type = null, $noMainCat = true) <nl> { <nl> $cat = $this->getCat($id); <nl> $catNames = array(); <nl> @@ -30,8 +30,10 @@ class CategoryModel extends CatsCategoryEntryModel implements CategoryInterface <nl> if ($parCat->parent_category_id == \"\") { <nl> if ($type == \"add_main\") <nl> $catNames[] = $parCat->name; <nl> + if ($noMainCat) { <nl> break; <nl> } <nl> + } <nl> $catNames[] = $parCat->name; <nl> $cat_ids[] = $parCat->id; <nl> $subCat = $parCat->parent_category_id; <nl> ", "msg": "Advanced Package ad limit is required"}
{"diff_id": 4457, "repo": "openclassify/openclassify", "sha": "36756b046ff9ff0d901d2e1932aaba1090390e0e", "time": "09.01.2021 12:04:41", "diff": "mmm a / addons/default/visiosoft/advs-module/src/Http/Controller/advsController.php <nl> ppp b / addons/default/visiosoft/advs-module/src/Http/Controller/advsController.php <nl>@@ -782,8 +782,14 @@ class AdvsController extends PublicController <nl> } <nl> } <nl> - $get_categories = in_array($adv->cat1, setting_value('visiosoft.module.advs::get_categories')); <nl> - $adv->is_get_adv = ($request->is_get_adv and $get_categories) ? true : false; <nl> + $get_categories_status = false; <nl> + if ($get_categories = setting_value('visiosoft.module.advs::get_categories') and $get_categories = in_array($adv->cat1, $get_categories)) { <nl> + $get_categories_status = true; <nl> + } <nl> + <nl> + $adv->is_get_adv = ($request->is_get_adv and $get_categories_status) ? true : false; <nl> + <nl> + <nl> $adv->save(); <nl> //algolia Search Module <nl> @@ -803,7 +809,9 @@ class AdvsController extends PublicController <nl> $CloudinaryModel = new VideoModel(); <nl> $CloudinaryModel->updateRequest($request); <nl> - if ($request->url != \"\") { $adv->save(); } <nl> + if ($request->url != \"\") { <nl> + $adv->save(); <nl> + } <nl> } <nl> if ($this->adv_model->is_enabled('customfields')) { <nl> app('Visiosoft\\CustomfieldsModule\\Http\\Controller\\cfController')->store($adv, $request); <nl> ", "msg": "added sahibinden check icon and show features for web view && fixed get categories"}
{"diff_id": 4542, "repo": "openclassify/openclassify", "sha": "179a3ccebabe056b679a9e637e3b8e3c792166ef", "time": "26.10.2021 17:07:09", "diff": "mmm a / addons/default/visiosoft/profile-module/src/Http/Controller/CacheController.php <nl> ppp b / addons/default/visiosoft/profile-module/src/Http/Controller/CacheController.php <nl>@@ -12,7 +12,7 @@ class CacheController extends PublicController <nl> $profile_img = $user ? $this->dispatch( <nl> new MakeImageInstance($user->file ?: 'theme::images/no_profile.svg', 'img') <nl> )->url() : $user; <nl> - $user = $user ? $user->first_name . ' ' . $user->last_name : $user; <nl> + $user = $user ? $user->name() : $user; <nl> $getAddBlockHtml = new addBlock('navigation/dropdown', []); <nl> $addBlockHtml = $getAddBlockHtml->handle(); <nl> ", "msg": "Subscriptions Sentry Error -Trying to get property 'name' of non-object"}
{"diff_id": 4546, "repo": "openclassify/openclassify", "sha": "1d07d301c50f6e16ed03e874e726af048549b9b3", "time": "05.11.2021 12:23:04", "diff": "mmm a / addons/default/visiosoft/advs-module/src/Http/Controller/AdvsController.php <nl> ppp b / addons/default/visiosoft/advs-module/src/Http/Controller/AdvsController.php <nl>@@ -715,6 +715,7 @@ class AdvsController extends PublicController <nl> if ($ad->created_by_id != Auth::id()) { <nl> $this->messages->error(trans('visiosoft.module.advs::message.delete_author_error')); <nl> + return back(); <nl> } <nl> $ad->delete(); <nl> ", "msg": "Deleting adv that doesnt belong to the user"}
{"diff_id": 4547, "repo": "openclassify/openclassify", "sha": "494f9defc039e0e0f3381f96553f85f96e3dfd7e", "time": "10.11.2021 14:23:24", "diff": "mmm a / addons/default/visiosoft/advs-module/src/Adv/AdvModel.php <nl> ppp b / addons/default/visiosoft/advs-module/src/Adv/AdvModel.php <nl>@@ -28,6 +28,7 @@ class AdvModel extends AdvsAdvsEntryModel implements AdvInterface <nl> 'currency_standard_price', <nl> 'category2', <nl> 'thumbnail', <nl> + 'video', <nl> ]; <nl> protected $cascades = [ <nl> @@ -82,9 +83,24 @@ class AdvModel extends AdvsAdvsEntryModel implements AdvInterface <nl> { <nl> if ($this->cover_photo == null) { <nl> return $this->dispatch(new MakeImageInstance('visiosoft.theme.base::images/no-image.png', 'img'))->url(); <nl> - } else { <nl> + } <nl> + <nl> return url($this->cover_photo); <nl> } <nl> + <nl> + public function getVideoAttribute() <nl> + { <nl> + if (is_module_installed('visiosoft.module.cloudinary')) { <nl> + $url = app('Visiosoft\\CloudinaryModule\\Http\\Controller\\VideoController')->getVideoUrl($this->id); <nl> + $thumbnail = str_replace('mp4', 'jpg', $url); <nl> + <nl> + return [ <nl> + 'url' => $url, <nl> + 'thumbnail' => $thumbnail, <nl> + ]; <nl> + } <nl> + <nl> + return null; <nl> } <nl> public function getTransNameAttribute() <nl> ", "msg": "add video in ad-detail slider for emlak24"}
{"diff_id": 4569, "repo": "laminas/laminas-code", "sha": "0e6d7dff9097a4c347ef3bc9eaf7adb3bfa06e72", "time": "23.07.2017 10:18:27", "diff": "mmm a / src/Generator/DocBlock/Tag/VarTag.php <nl> ppp b / src/Generator/DocBlock/Tag/VarTag.php <nl>@@ -33,7 +33,7 @@ class VarTag extends AbstractTypeableTag implements TagInterface <nl> /** <nl> * {@inheritDoc} <nl> */ <nl> - public function getName() <nl> + public function getName() : string <nl> { <nl> return 'var'; <nl> } <nl> @@ -50,10 +50,7 @@ class VarTag extends AbstractTypeableTag implements TagInterface <nl> } <nl> } <nl> - /** <nl> - * @return string|null <nl> - */ <nl> - public function getVariableName() <nl> + public function getVariableName() : ?string <nl> { <nl> return $this->variableName; <nl> } <nl> ", "msg": "adding return hints to applicable methods"}
{"diff_id": 4570, "repo": "laminas/laminas-code", "sha": "eb4964eeae6f0a101fc3cbf19dcb844909efb267", "time": "23.07.2017 10:21:53", "diff": "mmm a / src/Reflection/DocBlock/Tag/VarTag.php <nl> ppp b / src/Reflection/DocBlock/Tag/VarTag.php <nl>@@ -12,36 +12,35 @@ namespace Zend\\Code\\Reflection\\DocBlock\\Tag; <nl> class VarTag implements TagInterface, PhpDocTypedTagInterface <nl> { <nl> /** <nl> - * @var array <nl> + * @var string[] <nl> */ <nl> - protected $types = []; <nl> + private $types = []; <nl> /** <nl> - * @var string <nl> + * @var string|null <nl> */ <nl> - protected $variableName = null; <nl> + private $variableName; <nl> /** <nl> - * @var string <nl> + * @var string|null <nl> */ <nl> - protected $description = null; <nl> + private $description; <nl> /** <nl> - * @return string <nl> + * {@inheritDoc} <nl> */ <nl> - public function getName() <nl> + public function getName() : string <nl> { <nl> return 'var'; <nl> } <nl> /** <nl> - * Initializer <nl> - * <nl> - * @param string $tagDocblockLine <nl> + * {@inheritDoc} <nl> */ <nl> - public function initialize($tagDocblockLine) <nl> + public function initialize($tagDocblockLine) : void <nl> { <nl> $match = []; <nl> + <nl> if (!preg_match('#^(.+)?(\\$[\\S]+)\\s*(.*)$#m', $tagDocblockLine, $match)) { <nl> return; <nl> } <nl> @@ -59,28 +58,25 @@ class VarTag implements TagInterface, PhpDocTypedTagInterface <nl> } <nl> } <nl> - public function getTypes() <nl> + /** <nl> + * {@inheritDoc} <nl> + */ <nl> + public function getTypes() : array <nl> { <nl> return $this->types; <nl> } <nl> - /** <nl> - * @return null|string <nl> - */ <nl> - public function getVariableName() <nl> + public function getVariableName() : ?string <nl> { <nl> return $this->variableName; <nl> } <nl> - /** <nl> - * @return null|string <nl> - */ <nl> - public function getDescription() <nl> + public function getDescription() : ?string <nl> { <nl> return $this->description; <nl> } <nl> - public function __toString() <nl> + public function __toString() : string <nl> { <nl> return 'DocBlock Tag [ * @' . $this->getName() . ' ]' . PHP_EOL; <nl> } <nl> ", "msg": "adding return hints where applicable in the reflection `VarTag`"}
{"diff_id": 4571, "repo": "laminas/laminas-code", "sha": "fc2abd0b817bdeb6deedb25d23fd50ff74b75bb6", "time": "23.07.2017 10:25:55", "diff": "mmm a / test/Generator/PropertyGeneratorTest.php <nl> ppp b / test/Generator/PropertyGeneratorTest.php <nl>@@ -24,16 +24,16 @@ use Zend\\Code\\Reflection\\ClassReflection; <nl> */ <nl> class PropertyGeneratorTest extends TestCase <nl> { <nl> - public function testPropertyConstructor() <nl> + public function testPropertyConstructor() : void <nl> { <nl> $codeGenProperty = new PropertyGenerator(); <nl> self::assertInstanceOf(PropertyGenerator::class, $codeGenProperty); <nl> } <nl> /** <nl> - * @return array <nl> + * @return bool[][]|string[][]|int[][]|null[][] <nl> */ <nl> - public function dataSetTypeSetValueGenerate() <nl> + public function dataSetTypeSetValueGenerate() : array <nl> { <nl> return [ <nl> ['string', 'foo', \"'foo';\"], <nl> @@ -56,7 +56,7 @@ class PropertyGeneratorTest extends TestCase <nl> * @param mixed $value <nl> * @param string $code <nl> */ <nl> - public function testSetTypeSetValueGenerate($type, $value, $code) <nl> + public function testSetTypeSetValueGenerate(string $type, $value, string $code) : void <nl> { <nl> $defaultValue = new PropertyValueGenerator(); <nl> $defaultValue->setType($type); <nl> @@ -72,9 +72,9 @@ class PropertyGeneratorTest extends TestCase <nl> * @param mixed $value <nl> * @param string $code <nl> */ <nl> - public function testSetBogusTypeSetValueGenerateUseAutoDetection($type, $value, $code) <nl> + public function testSetBogusTypeSetValueGenerateUseAutoDetection(string $type, $value, string $code) : void <nl> { <nl> - if ($type == 'constant') { <nl> + if ('constant' === $type) { <nl> return; // constant can only be detected explicitly <nl> } <nl> @@ -85,13 +85,13 @@ class PropertyGeneratorTest extends TestCase <nl> self::assertEquals($code, $defaultValue->generate()); <nl> } <nl> - public function testPropertyReturnsSimpleValue() <nl> + public function testPropertyReturnsSimpleValue() : void <nl> { <nl> $codeGenProperty = new PropertyGenerator('someVal', 'some string value'); <nl> self::assertEquals(' public $someVal = \\'some string value\\';', $codeGenProperty->generate()); <nl> } <nl> - public function testPropertyMultilineValue() <nl> + public function testPropertyMultilineValue() : void <nl> { <nl> $targetValue = [ <nl> 5, <nl> @@ -121,7 +121,7 @@ EOS; <nl> self::assertEquals($expectedSource, $targetSource); <nl> } <nl> - public function testPropertyCanProduceContstantModifier() <nl> + public function testPropertyCanProduceContstantModifier() : void <nl> { <nl> $codeGenProperty = new PropertyGenerator('someVal', 'some string value', PropertyGenerator::FLAG_CONSTANT); <nl> self::assertEquals(' const someVal = \\'some string value\\';', $codeGenProperty->generate()); <nl> @@ -130,14 +130,14 @@ EOS; <nl> /** <nl> * @group PR-704 <nl> */ <nl> - public function testPropertyCanProduceContstantModifierWithSetter() <nl> + public function testPropertyCanProduceContstantModifierWithSetter() : void <nl> { <nl> $codeGenProperty = new PropertyGenerator('someVal', 'some string value'); <nl> $codeGenProperty->setConst(true); <nl> self::assertEquals(' const someVal = \\'some string value\\';', $codeGenProperty->generate()); <nl> } <nl> - public function testPropertyCanProduceStaticModifier() <nl> + public function testPropertyCanProduceStaticModifier() : void <nl> { <nl> $codeGenProperty = new PropertyGenerator('someVal', 'some string value', PropertyGenerator::FLAG_STATIC); <nl> self::assertEquals(' public static $someVal = \\'some string value\\';', $codeGenProperty->generate()); <nl> @@ -146,7 +146,7 @@ EOS; <nl> /** <nl> * @group ZF-6444 <nl> */ <nl> - public function testPropertyWillLoadFromReflection() <nl> + public function testPropertyWillLoadFromReflection() : void <nl> { <nl> $reflectionClass = new ClassReflection(TestAsset\\TestClassWithManyProperties::class); <nl> @@ -173,7 +173,7 @@ EOS; <nl> /** <nl> * @group ZF-6444 <nl> */ <nl> - public function testPropertyWillEmitStaticModifier() <nl> + public function testPropertyWillEmitStaticModifier() : void <nl> { <nl> $codeGenProperty = new PropertyGenerator( <nl> 'someVal', <nl> @@ -186,7 +186,7 @@ EOS; <nl> /** <nl> * @group ZF-7205 <nl> */ <nl> - public function testPropertyCanHaveDocBlock() <nl> + public function testPropertyCanHaveDocBlock() : void <nl> { <nl> $codeGenProperty = new PropertyGenerator( <nl> 'someVal', <nl> @@ -205,7 +205,7 @@ EOS; <nl> self::assertEquals($expected, $codeGenProperty->generate()); <nl> } <nl> - public function testOtherTypesThrowExceptionOnGenerate() <nl> + public function testOtherTypesThrowExceptionOnGenerate() : void <nl> { <nl> $codeGenProperty = new PropertyGenerator('someVal', new \\stdClass()); <nl> @@ -215,7 +215,7 @@ EOS; <nl> $codeGenProperty->generate(); <nl> } <nl> - public function testCreateFromArray() <nl> + public function testCreateFromArray() : void <nl> { <nl> $propertyGenerator = PropertyGenerator::fromArray([ <nl> 'name' => 'SampleProperty', <nl> @@ -241,9 +241,9 @@ EOS; <nl> } <nl> /** <nl> - * @3491 <nl> + * @group 3491 <nl> */ <nl> - public function testPropertyDocBlockWillLoadFromReflection() <nl> + public function testPropertyDocBlockWillLoadFromReflection() : void <nl> { <nl> $reflectionClass = new ClassReflection(TestAsset\\TestClassWithManyProperties::class); <nl> @@ -268,7 +268,7 @@ EOS; <nl> * @param string $type <nl> * @param mixed $value <nl> */ <nl> - public function testSetDefaultValue($type, $value) <nl> + public function testSetDefaultValue(string $type, $value) : void <nl> { <nl> $property = new PropertyGenerator(); <nl> $property->setDefaultValue($value, $type); <nl> ", "msg": "hardening `PropertyGeneratorTest` method return types"}
{"diff_id": 4575, "repo": "laminas/laminas-code", "sha": "bc5ec41da83dec2baa1b4403cc7cde817b6215ca", "time": "11.10.2017 12:16:16", "diff": "mmm a / src/Generator/MethodGenerator.php <nl> ppp b / src/Generator/MethodGenerator.php <nl>@@ -58,17 +58,32 @@ class MethodGenerator extends AbstractMemberGenerator <nl> */ <nl> public static function fromReflection(MethodReflection $reflectionMethod) <nl> { <nl> - $method = new static(); <nl> - $declaringClass = $reflectionMethod->getDeclaringClass(); <nl> + $method = static::copyMethodSignature($reflectionMethod); <nl> $method->setSourceContent($reflectionMethod->getContents(false)); <nl> $method->setSourceDirty(false); <nl> - $method->setReturnType(self::extractReturnTypeFromMethodReflection($reflectionMethod)); <nl> if ($reflectionMethod->getDocComment() != '') { <nl> $method->setDocBlock(DocBlockGenerator::fromReflection($reflectionMethod->getDocBlock())); <nl> } <nl> + $method->setBody(static::clearBodyIndention($reflectionMethod->getBody())); <nl> + <nl> + return $method; <nl> + } <nl> + <nl> + /** <nl> + * Returns a MethodGenerator based on a MethodReflection with only the signature copied. <nl> + * <nl> + * This is similar to fromReflection() but without the method body and phpdoc as this is quite heavy to copy. <nl> + * It's for example useful when creating proxies where you normally change the method body anyway. <nl> + */ <nl> + public static function copyMethodSignature(MethodReflection $reflectionMethod): MethodGenerator <nl> + { <nl> + $method = new static(); <nl> + $declaringClass = $reflectionMethod->getDeclaringClass(); <nl> + <nl> + $method->setReturnType(self::extractReturnTypeFromMethodReflection($reflectionMethod)); <nl> $method->setFinal($reflectionMethod->isFinal()); <nl> if ($reflectionMethod->isPrivate()) { <nl> @@ -88,8 +103,6 @@ class MethodGenerator extends AbstractMemberGenerator <nl> $method->setParameter(ParameterGenerator::fromReflection($reflectionParameter)); <nl> } <nl> - $method->setBody(static::clearBodyIndention($reflectionMethod->getBody())); <nl> - <nl> return $method; <nl> } <nl> ", "msg": "Add method to copy method signature from reflection without the body and phpdoc"}
{"diff_id": 4583, "repo": "laminas/laminas-code", "sha": "35f60d74ee5dc660f783c84a9bff4c131c6ed394", "time": "04.03.2019 16:56:53", "diff": "mmm a / src/Generator/AbstractMemberGenerator.php <nl> ppp b / src/Generator/AbstractMemberGenerator.php <nl>@@ -36,7 +36,7 @@ abstract class AbstractMemberGenerator extends AbstractGenerator <nl> /**#@-*/ <nl> /** <nl> - * @var DocBlockGenerator <nl> + * @var DocBlockGenerator|null <nl> */ <nl> protected $docBlock; <nl> @@ -237,7 +237,7 @@ abstract class AbstractMemberGenerator extends AbstractGenerator <nl> } <nl> /** <nl> - * @return DocBlockGenerator <nl> + * @return DocBlockGenerator|null <nl> */ <nl> public function getDocBlock() <nl> { <nl> ", "msg": "Align the type of $docBlock with reality"}
{"diff_id": 4592, "repo": "laminas/laminas-code", "sha": "fc7d129f5d97cbb34f6b516a19ab5ac2d36f1d66", "time": "09.12.2020 21:03:30", "diff": "mmm a / src/Generator/TypeGenerator.php <nl> ppp b / src/Generator/TypeGenerator.php <nl>@@ -133,7 +133,10 @@ final class TypeGenerator implements GeneratorInterface <nl> if ($nullable) { <nl> $types[0]->assertCanBeStandaloneNullable(); <nl> } <nl> - } else { <nl> + <nl> + return new self($types, $nullable); <nl> + } <nl> + <nl> if ($nullable) { <nl> throw new InvalidArgumentException(sprintf( <nl> 'Type \"%s\" is a union type, and therefore cannot be also marked nullable with the \"?\" prefix', <nl> @@ -148,7 +151,6 @@ final class TypeGenerator implements GeneratorInterface <nl> $atomicType->assertCanUnionWith($otherTypes); <nl> } <nl> - } <nl> return new self($types, $nullable); <nl> } <nl> ", "msg": "Reduced method nesting level as suggested by\nRef:"}
{"diff_id": 4606, "repo": "laminas/laminas-code", "sha": "913050e01f1aed5706e115a10bcc44139066a120", "time": "29.07.2021 16:06:58", "diff": "mmm a / src/Reflection/ParameterReflection.php <nl> ppp b / src/Reflection/ParameterReflection.php <nl>namespace Laminas\\Code\\Reflection; <nl> +use Laminas\\Code\\Reflection\\DocBlock\\Tag\\ParamTag; <nl> use ReflectionClass; <nl> use ReflectionMethod; <nl> use ReflectionParameter; <nl> @@ -92,10 +93,19 @@ class ParameterReflection extends ReflectionParameter implements ReflectionInter <nl> return null; <nl> } <nl> + /** @var ParamTag[] $params */ <nl> $params = $docBlock->getTags('param'); <nl> + $paramTag = $params[$this->getPosition()] ?? null; <nl> + $variableName = '$' . $this->getName(); <nl> - if (isset($params[$this->getPosition()])) { <nl> - return $params[$this->getPosition()]->getType(); <nl> + if ($paramTag && ('' === $paramTag->getVariableName() || $variableName === $paramTag->getVariableName())) { <nl> + return $paramTag->getTypes()[0] ?? ''; <nl> + } <nl> + <nl> + foreach ($params as $param) { <nl> + if ($param->getVariableName() === $variableName) { <nl> + return $param->getTypes()[0] ?? ''; <nl> + } <nl> } <nl> return null; <nl> ", "msg": "Incorrect argument type\nFix the issue"}
{"diff_id": 4609, "repo": "laminas/laminas-code", "sha": "4a5b03db8172d131307f85946fd4e76342589764", "time": "26.09.2021 20:00:04", "diff": "mmm a / src/Generator/ClassGenerator.php <nl> ppp b / src/Generator/ClassGenerator.php <nl>@@ -446,10 +446,6 @@ class ClassGenerator extends AbstractGenerator implements TraitUsageInterface <nl> */ <nl> public function setImplementedInterfaces(array $implementedInterfaces) <nl> { <nl> - // This loop is just validating that the given `$implementedInterfaces` contains valid syntax/symbols <nl> - array_map(static fn($implementedInterface) => <nl> - TypeGenerator::fromTypeString($implementedInterface), $implementedInterfaces); <nl> - <nl> $this->implementedInterfaces = $implementedInterfaces; <nl> return $this; <nl> } <nl> ", "msg": "drop validating that the given `$implementedInterfaces` contains valid syntax/symbols"}
{"diff_id": 4625, "repo": "laminas/laminas-code", "sha": "373c3eadadb937f42247eb97d189089498248ce3", "time": "18.11.2022 22:30:55", "diff": "mmm a / src/Reflection/DocBlock/Tag/ThrowsTag.php <nl> ppp b / src/Reflection/DocBlock/Tag/ThrowsTag.php <nl>@@ -14,7 +14,7 @@ class ThrowsTag implements TagInterface, PhpDocTypedTagInterface <nl> */ <nl> protected $types = []; <nl> - /** @var string */ <nl> + /** @var string|null */ <nl> protected $description; <nl> /** <nl> @@ -57,7 +57,7 @@ class ThrowsTag implements TagInterface, PhpDocTypedTagInterface <nl> } <nl> /** <nl> - * @return string <nl> + * @return string|null <nl> */ <nl> public function getDescription() <nl> { <nl> ", "msg": "More precise definition of `ThrowsTag#$description` state"}
{"diff_id": 4626, "repo": "laminas/laminas-code", "sha": "59b3947df317361442657cf4b3106f8539b111d3", "time": "18.11.2022 22:32:40", "diff": "mmm a / src/Reflection/DocBlock/Tag/ReturnTag.php <nl> ppp b / src/Reflection/DocBlock/Tag/ReturnTag.php <nl>@@ -9,10 +9,10 @@ use function trim; <nl> class ReturnTag implements TagInterface, PhpDocTypedTagInterface <nl> { <nl> - /** @var array */ <nl> + /** @var list<string> */ <nl> protected $types = []; <nl> - /** @var string */ <nl> + /** @var string|null */ <nl> protected $description; <nl> /** <nl> @@ -23,14 +23,11 @@ class ReturnTag implements TagInterface, PhpDocTypedTagInterface <nl> return 'return'; <nl> } <nl> - /** <nl> - * @param string $tagDocBlockLine <nl> - * @return void <nl> - */ <nl> - public function initialize($tagDocBlockLine) <nl> + /** {@inheritDoc} */ <nl> + public function initialize($content) <nl> { <nl> $matches = []; <nl> - if (! preg_match('#((?:[\\w|\\\\\\]+(?:\\[\\])*\\|?)+)(?:\\s+(.*))?#s', $tagDocBlockLine, $matches)) { <nl> + if (! preg_match('#((?:[\\w|\\\\\\]+(?:\\[\\])*\\|?)+)(?:\\s+(.*))?#s', $content, $matches)) { <nl> return; <nl> } <nl> @@ -62,7 +59,7 @@ class ReturnTag implements TagInterface, PhpDocTypedTagInterface <nl> } <nl> /** <nl> - * @return string <nl> + * @return string|null <nl> */ <nl> public function getDescription() <nl> { <nl> ", "msg": "Better type definitions around `ReturnTag`"}
{"diff_id": 4627, "repo": "laminas/laminas-code", "sha": "25c294b965b3622375b27242ae766b98b75a66e0", "time": "18.11.2022 22:34:27", "diff": "mmm a / src/Reflection/DocBlock/Tag/PropertyTag.php <nl> ppp b / src/Reflection/DocBlock/Tag/PropertyTag.php <nl>@@ -8,16 +8,13 @@ use function rtrim; <nl> class PropertyTag implements TagInterface, PhpDocTypedTagInterface <nl> { <nl> - /** <nl> - * @var string[] <nl> - * @psalm-var list<string> <nl> - */ <nl> + /** @var list<string> */ <nl> protected $types = []; <nl> - /** @var string */ <nl> + /** @var string|null */ <nl> protected $propertyName; <nl> - /** @var string */ <nl> + /** @var string|null */ <nl> protected $description; <nl> /** <nl> @@ -28,15 +25,11 @@ class PropertyTag implements TagInterface, PhpDocTypedTagInterface <nl> return 'property'; <nl> } <nl> - /** <nl> - * Initializer <nl> - * <nl> - * @param string $tagDocblockLine <nl> - */ <nl> - public function initialize($tagDocblockLine) <nl> + /** {@inheritDoc} */ <nl> + public function initialize($content) <nl> { <nl> $match = []; <nl> - if (! preg_match('#^(.+)?(\\$[\\S]+)[\\s]*(.*)$#m', $tagDocblockLine, $match)) { <nl> + if (! preg_match('#^(.+)?(\\$[\\S]+)[\\s]*(.*)$#m', $content, $match)) { <nl> return; <nl> } <nl> @@ -61,7 +54,7 @@ class PropertyTag implements TagInterface, PhpDocTypedTagInterface <nl> public function getType() <nl> { <nl> if (empty($this->types)) { <nl> - return; <nl> + return null; <nl> } <nl> return $this->types[0]; <nl> ", "msg": "Better type definitions around `PropertyTag`"}
{"diff_id": 4628, "repo": "laminas/laminas-code", "sha": "8266966a344d8b1978d69adcd61270a47b06fb98", "time": "18.11.2022 22:36:09", "diff": "mmm a / src/Reflection/DocBlock/Tag/ParamTag.php <nl> ppp b / src/Reflection/DocBlock/Tag/ParamTag.php <nl>@@ -9,36 +9,27 @@ use function trim; <nl> class ParamTag implements TagInterface, PhpDocTypedTagInterface <nl> { <nl> - /** <nl> - * @var string[] <nl> - * @psalm-return list<string> <nl> - */ <nl> + /** @var list<string> */ <nl> protected $types = []; <nl> - /** @var string */ <nl> + /** @var string|null */ <nl> protected $variableName; <nl> - /** @var string */ <nl> + /** @var string|null */ <nl> protected $description; <nl> - /** <nl> - * @return string <nl> - */ <nl> + /** @return 'param' */ <nl> public function getName() <nl> { <nl> return 'param'; <nl> } <nl> - /** <nl> - * Initializer <nl> - * <nl> - * @param string $tagDocBlockLine <nl> - */ <nl> - public function initialize($tagDocBlockLine) <nl> + /** {@inheritDoc} */ <nl> + public function initialize($content) <nl> { <nl> $matches = []; <nl> - if (! preg_match('#((?:[\\w|\\\\\\]+(?:\\[\\])*\\|?)+)(?:\\s+(\\$\\S+))?(?:\\s+(.*))?#s', $tagDocBlockLine, $matches)) { <nl> + if (! preg_match('#((?:[\\w|\\\\\\]+(?:\\[\\])*\\|?)+)(?:\\s+(\\$\\S+))?(?:\\s+(.*))?#s', $content, $matches)) { <nl> return; <nl> } <nl> @@ -75,19 +66,13 @@ class ParamTag implements TagInterface, PhpDocTypedTagInterface <nl> return $this->types; <nl> } <nl> - /** <nl> - * Get parameter name <nl> - * <nl> - * @return string <nl> - */ <nl> + /** @return string|null */ <nl> public function getVariableName() <nl> { <nl> return $this->variableName; <nl> } <nl> - /** <nl> - * @return string <nl> - */ <nl> + /** @return string|null */ <nl> public function getDescription() <nl> { <nl> return $this->description; <nl> ", "msg": "Better type definitions around `ParamTag`"}
{"diff_id": 4629, "repo": "laminas/laminas-code", "sha": "d5f1ec198f7ab51a0974522d4710c29df304cadb", "time": "18.11.2022 22:38:13", "diff": "mmm a / src/Reflection/DocBlock/Tag/MethodTag.php <nl> ppp b / src/Reflection/DocBlock/Tag/MethodTag.php <nl>@@ -8,45 +8,30 @@ use function rtrim; <nl> class MethodTag implements TagInterface, PhpDocTypedTagInterface <nl> { <nl> - /** <nl> - * Return value type <nl> - * <nl> - * @var string[] <nl> - * @psalm-var list<string> <nl> - */ <nl> + /** @var list<string> */ <nl> protected $types = []; <nl> - /** @var string */ <nl> + /** @var string|null */ <nl> protected $methodName; <nl> - /** @var string */ <nl> + /** @var string|null */ <nl> protected $description; <nl> - /** <nl> - * Is static method <nl> - * <nl> - * @var bool <nl> - */ <nl> + /** @var bool */ <nl> protected $isStatic = false; <nl> - /** <nl> - * @return string <nl> - */ <nl> + /** @return 'method' */ <nl> public function getName() <nl> { <nl> return 'method'; <nl> } <nl> - /** <nl> - * Initializer <nl> - * <nl> - * @param string $tagDocblockLine <nl> - */ <nl> - public function initialize($tagDocblockLine) <nl> + /** {@inheritDoc} */ <nl> + public function initialize($content) <nl> { <nl> $match = []; <nl> - if (! preg_match('#^(static[\\s]+)?(.+[\\s]+)?(.+\\(\\))[\\s]*(.*)$#m', $tagDocblockLine, $match)) { <nl> + if (! preg_match('#^(static[\\s]+)?(.+[\\s]+)?(.+\\(\\))[\\s]*(.*)$#m', $content, $match)) { <nl> return; <nl> } <nl> @@ -75,7 +60,7 @@ class MethodTag implements TagInterface, PhpDocTypedTagInterface <nl> public function getReturnType() <nl> { <nl> if (empty($this->types)) { <nl> - return; <nl> + return null; <nl> } <nl> return $this->types[0]; <nl> @@ -87,34 +72,25 @@ class MethodTag implements TagInterface, PhpDocTypedTagInterface <nl> return $this->types; <nl> } <nl> - /** <nl> - * @return string <nl> - */ <nl> + /** @return string|null */ <nl> public function getMethodName() <nl> { <nl> return $this->methodName; <nl> } <nl> - /** <nl> - * @return null|string <nl> - */ <nl> + /** @return string|null */ <nl> public function getDescription() <nl> { <nl> return $this->description; <nl> } <nl> - /** <nl> - * @return bool <nl> - */ <nl> + /** @return bool */ <nl> public function isStatic() <nl> { <nl> return $this->isStatic; <nl> } <nl> - /** <nl> - * @return string <nl> - * @psalm-return non-empty-string <nl> - */ <nl> + /** @return non-empty-string */ <nl> public function __toString() <nl> { <nl> return 'DocBlock Tag [ * @' . $this->getName() . ' ]' . \"\\n\"; <nl> ", "msg": "Better type definitions around `MethodTag`"}
{"diff_id": 4630, "repo": "laminas/laminas-code", "sha": "c99a9241cd4c28e744e7367510a9d757ee95265e", "time": "18.11.2022 22:49:32", "diff": "mmm a / src/Reflection/DocBlock/Tag/AuthorTag.php <nl> ppp b / src/Reflection/DocBlock/Tag/AuthorTag.php <nl>@@ -7,30 +7,24 @@ use function rtrim; <nl> class AuthorTag implements TagInterface <nl> { <nl> - /** @var string */ <nl> + /** @var string|null */ <nl> protected $authorName; <nl> - /** @var string */ <nl> + /** @var string|null */ <nl> protected $authorEmail; <nl> - /** <nl> - * @return string <nl> - */ <nl> + /** @return 'author' */ <nl> public function getName() <nl> { <nl> return 'author'; <nl> } <nl> - /** <nl> - * Initializer <nl> - * <nl> - * @param string $tagDocblockLine <nl> - */ <nl> - public function initialize($tagDocblockLine) <nl> + /** {@inheritDoc} */ <nl> + public function initialize($content) <nl> { <nl> $match = []; <nl> - if (! preg_match('/^([^\\<]*)(\\<([^\\>]*)\\>)?(.*)$/u', $tagDocblockLine, $match)) { <nl> + if (! preg_match('/^([^\\<]*)(\\<([^\\>]*)\\>)?(.*)$/u', $content, $match)) { <nl> return; <nl> } <nl> @@ -43,26 +37,19 @@ class AuthorTag implements TagInterface <nl> } <nl> } <nl> - /** <nl> - * @return null|string <nl> - */ <nl> + /** @return null|string */ <nl> public function getAuthorName() <nl> { <nl> return $this->authorName; <nl> } <nl> - /** <nl> - * @return null|string <nl> - */ <nl> + /** @return null|string */ <nl> public function getAuthorEmail() <nl> { <nl> return $this->authorEmail; <nl> } <nl> - /** <nl> - * @return string <nl> - * @psalm-return non-empty-string <nl> - */ <nl> + /** @return non-empty-string */ <nl> public function __toString() <nl> { <nl> return 'DocBlock Tag [ * @' . $this->getName() . ' ]' . \"\\n\"; <nl> ", "msg": "Better type definitions around `AuthorTag`"}
{"diff_id": 4644, "repo": "laminas/laminas-code", "sha": "6e5e3e26b3588c8c1ea3621ef62287b8b27b427a", "time": "19.11.2022 01:18:56", "diff": "mmm a / test/Generator/ValueGeneratorTest.php <nl> ppp b / test/Generator/ValueGeneratorTest.php <nl>@@ -479,7 +479,7 @@ EOS; <nl> public function invalidValue(): Generator <nl> { <nl> yield 'object' => [new DateTime(), DateTime::class]; <nl> - yield 'resource' => [fopen('php://input', 'r'), 'resource']; <nl> + yield 'resource' => [fopen('php://input', 'r'), 'resource (stream)']; <nl> } <nl> /** <nl> ", "msg": "Since we now use `get_debug_type()` for some errors, adjusting associated test expectations"}
{"diff_id": 4645, "repo": "laminas/laminas-code", "sha": "487c2e2f02f54251dd4fde4c2201f1d3db6a4821", "time": "19.11.2022 01:29:45", "diff": "mmm a / src/Generator/FileGenerator.php <nl> ppp b / src/Generator/FileGenerator.php <nl>@@ -37,6 +37,18 @@ use const T_DOC_COMMENT; <nl> use const T_OPEN_TAG; <nl> use const T_WHITESPACE; <nl> +/** <nl> + * @psalm-type InputUses = array< <nl> + * string|int, <nl> + * array{ <nl> + * 'use': non-empty-string, <nl> + * 'as': non-empty-string|null <nl> + * }|array{ <nl> + * non-empty-string, <nl> + * non-empty-string|null <nl> + * }|non-empty-string <nl> + * > <nl> + */ <nl> class FileGenerator extends AbstractGenerator <nl> { <nl> protected string $filename = ''; <nl> @@ -219,16 +231,7 @@ class FileGenerator extends AbstractGenerator <nl> } <nl> /** <nl> - * @param array< <nl> - * string|int, <nl> - * array{ <nl> - * 'use': non-empty-string, <nl> - * 'as': non-empty-string|null <nl> - * }|array{ <nl> - * non-empty-string, <nl> - * non-empty-string|null <nl> - * }|non-empty-string <nl> - * > $uses <nl> + * @param InputUses $uses <nl> * @return FileGenerator <nl> */ <nl> public function setUses(array $uses) <nl> ", "msg": "Moved complex array shape docblock to the class definition, to avoid PHPCS crashing on it"}
{"diff_id": 4646, "repo": "laminas/laminas-code", "sha": "a9d601d091c8478f64275ba15836689200c7e0f0", "time": "19.11.2022 16:34:56", "diff": "mmm a / src/Reflection/MethodReflection.php <nl> ppp b / src/Reflection/MethodReflection.php <nl>@@ -368,7 +368,7 @@ class MethodReflection extends PhpReflectionMethod implements ReflectionInterfac <nl> * <nl> * @param array $haystack <nl> * @param int $position <nl> - * @return bool|void <nl> + * @return bool|null <nl> */ <nl> protected function isEndingBrace($haystack, $position) <nl> { <nl> @@ -428,6 +428,8 @@ class MethodReflection extends PhpReflectionMethod implements ReflectionInterfac <nl> return false; <nl> } <nl> } <nl> + <nl> + return null; <nl> } <nl> /** <nl> ", "msg": "Added a default execution branch that returns `null` in `MethodReflection#isEndingBrace()`\nRef:"}
{"diff_id": 4660, "repo": "yajra/laravel-oci8", "sha": "70328163f51d0438511cb936ee5650811c48eb5d", "time": "12.03.2017 22:09:06", "diff": "mmm a / src/Oci8/Oci8Connection.php <nl> ppp b / src/Oci8/Oci8Connection.php <nl>@@ -218,7 +218,7 @@ class Oci8Connection extends Connection <nl> * @param int $returnType (PDO::PARAM_*) <nl> * @return mixed $returnType <nl> */ <nl> - public function executeFunction($sql, array $bindings = [], $returnType = PDO::PARAM_STR) <nl> + public function executeFunction($sql, array $bindings = [], $returnType = PDO::PARAM_STR, $length = null) <nl> { <nl> $query = $this->getPdo()->prepare('begin :result := ' . $sql . '; end;'); <nl> @@ -230,7 +230,7 @@ class Oci8Connection extends Connection <nl> $query->bindParam($key, $value); <nl> } <nl> - $query->bindParam(':result', $result, $returnType); <nl> + $query->bindParam(':result', $result, $returnType, $length); <nl> $query->execute(); <nl> return $result; <nl> ", "msg": "Added parameter length in executeFunction\nparameter length purpose for custom length in result bindParam"}
{"diff_id": 4666, "repo": "yajra/laravel-oci8", "sha": "494b8677b32bbf2e845c06f3e4a1bca777007cc7", "time": "20.06.2017 08:40:32", "diff": "mmm a / src/Oci8/Eloquent/OracleEloquent.php <nl> ppp b / src/Oci8/Eloquent/OracleEloquent.php <nl>@@ -148,7 +148,6 @@ class OracleEloquent extends Model <nl> */ <nl> protected function newBaseQueryBuilder() <nl> { <nl> - <nl> $conn = $this->getConnection(); <nl> $grammar = $conn->getQueryGrammar(); <nl> @@ -163,14 +162,10 @@ class OracleEloquent extends Model <nl> * Perform a model update operation. <nl> * <nl> * @param \\Illuminate\\Database\\Eloquent\\Builder $query <nl> - * @param array $options <nl> * @return boolean <nl> */ <nl> - protected function performUpdate(Builder $query, array $options = []) <nl> + protected function performUpdate(Builder $query) <nl> { <nl> - $dirty = $this->getDirty(); <nl> - <nl> - if (count($dirty) > 0) { <nl> // If the updating event returns false, we will cancel the update operation so <nl> // developers can hook Validation systems into their models and cancel this <nl> // operation if the model does not pass validation. Otherwise, we update. <nl> @@ -181,7 +176,7 @@ class OracleEloquent extends Model <nl> // First we need to create a fresh query instance and touch the creation and <nl> // update timestamp on the model which are maintained by us for developer <nl> // convenience. Then we will just continue saving the model instances. <nl> - if ($this->timestamps && array_get($options, 'timestamps', true)) { <nl> + if ($this->usesTimestamps()) { <nl> $this->updateTimestamps(); <nl> } <nl> @@ -193,11 +188,10 @@ class OracleEloquent extends Model <nl> if (count($dirty) > 0) { <nl> // If dirty attributes contains binary field <nl> // extract binary fields to new array <nl> - $this->updateBinary($query, $dirty, $options); <nl> + $this->updateBinary($query, $dirty); <nl> $this->fireModelEvent('updated', false); <nl> } <nl> - } <nl> return true; <nl> } <nl> @@ -207,14 +201,15 @@ class OracleEloquent extends Model <nl> * <nl> * @param Builder $query <nl> * @param array $dirty <nl> - * @param array $options <nl> */ <nl> - protected function updateBinary(Builder $query, $dirty, $options = []) <nl> + protected function updateBinary(Builder $query, $dirty) <nl> { <nl> + $builder = $this->setKeysForSaveQuery($query); <nl> + <nl> if ($this->extractBinaries($dirty)) { <nl> - $this->setKeysForSaveQuery($query)->updateLob($dirty, $this->binaryFields, $this->getKeyName()); <nl> + $builder->updateLob($dirty, $this->binaryFields, $this->getKeyName()); <nl> } else { <nl> - $this->setKeysForSaveQuery($query)->update($dirty, $options); <nl> + $builder->update($dirty, $options); <nl> } <nl> } <nl> @@ -222,10 +217,9 @@ class OracleEloquent extends Model <nl> * Perform a model insert operation. <nl> * <nl> * @param \\Illuminate\\Database\\Eloquent\\Builder $query <nl> - * @param array $options <nl> * @return bool <nl> */ <nl> - protected function performInsert(Builder $query, array $options = []) <nl> + protected function performInsert(Builder $query) <nl> { <nl> if ($this->fireModelEvent('creating') === false) { <nl> return false; <nl> @@ -234,7 +228,7 @@ class OracleEloquent extends Model <nl> // First we'll need to create a fresh query instance and touch the creation and <nl> // update timestamps on this model, which are maintained by us for developer <nl> // convenience. After, we will just continue saving these model instances. <nl> - if ($this->timestamps && array_get($options, 'timestamps', true)) { <nl> + if ($this->usesTimestamps()) { <nl> $this->updateTimestamps(); <nl> } <nl> @@ -243,7 +237,7 @@ class OracleEloquent extends Model <nl> // table from the database. Not all tables have to be incrementing though. <nl> $attributes = $this->attributes; <nl> - if ($this->incrementing) { <nl> + if ($this->getIncrementing()) { <nl> $this->insertAndSetId($query, $attributes); <nl> } <nl> @@ -251,6 +245,10 @@ class OracleEloquent extends Model <nl> // are, as this attributes arrays must contain an \"id\" column already placed <nl> // there by the developer as the manually determined key for these models. <nl> else { <nl> + if (empty($attributes)) { <nl> + return true; <nl> + } <nl> + <nl> // If attributes contains binary field <nl> // extract binary fields to new array <nl> if ($this->extractBinaries($attributes)) { <nl> ", "msg": "Update performInsert & Update to match new model method signature.\nRemove options arg."}
{"diff_id": 4699, "repo": "yajra/laravel-oci8", "sha": "f6e839be8fa12998d54c38654744400c705a8ea0", "time": "02.05.2019 11:17:10", "diff": "mmm a / src/Oci8/Oci8Connection.php <nl> ppp b / src/Oci8/Oci8Connection.php <nl>@@ -343,19 +343,6 @@ class Oci8Connection extends Connection <nl> return $this->getPdo()->prepare($sql); <nl> } <nl> - /** <nl> - * Bind values to their parameters in the given statement. <nl> - * <nl> - * @param PDOStatement $statement <nl> - * @param array $bindings <nl> - */ <nl> - public function bindValues($statement, $bindings) <nl> - { <nl> - foreach ($bindings as $key => $value) { <nl> - $statement->bindParam($key, $bindings[$key]); <nl> - } <nl> - } <nl> - <nl> /** <nl> * Get the default query grammar instance. <nl> * <nl> ", "msg": "Use bindValues from base Connection.\nFix in relation to"}
{"diff_id": 4729, "repo": "yajra/laravel-oci8", "sha": "7a55c5fe95493146a811900d55187d0751e96ecb", "time": "20.01.2022 16:02:15", "diff": "mmm a / src/Oci8/Connectors/OracleConnector.php <nl> ppp b / src/Oci8/Connectors/OracleConnector.php <nl>@@ -183,8 +183,11 @@ class OracleConnector extends Connector implements ConnectorInterface <nl> $address .= '(ADDRESS = (PROTOCOL = ' . $config['protocol'] . ')(HOST = ' . trim($host[$i]) . ')(PORT = ' . $config['port'] . '))'; <nl> } <nl> + // backwards compatibility for users dont have this field in their php config <nl> + $loadBalance = $config['load_balance'] ?? 'yes'; <nl> + <nl> // create a tns with multiple address connection <nl> - $config['tns'] = \"(DESCRIPTION = {$address} (LOAD_BALANCE = {$config['load_balance']}) (FAILOVER = on) (CONNECT_DATA = (SERVER = DEDICATED) ({$config['service']})))\"; <nl> + $config['tns'] = \"(DESCRIPTION = {$address} (LOAD_BALANCE = {$loadBalance}) (FAILOVER = on) (CONNECT_DATA = (SERVER = DEDICATED) ({$config['service']})))\"; <nl> } <nl> return $config; <nl> ", "msg": "add backwards compatibility for load balance"}
{"diff_id": 4756, "repo": "rectorphp/rector", "sha": "f482f2760cef377186e6fd894533e073c99c1278", "time": "07.09.2017 15:36:54", "diff": "mmm a / src/DependencyInjection/CompilerPass/CollectorCompilerPass.php <nl> ppp b / src/DependencyInjection/CompilerPass/CollectorCompilerPass.php <nl>@@ -8,8 +8,6 @@ use Symfony\\Component\\Console\\Application; <nl> use Symfony\\Component\\Console\\Command\\Command; <nl> use Symfony\\Component\\DependencyInjection\\Compiler\\CompilerPassInterface; <nl> use Symfony\\Component\\DependencyInjection\\ContainerBuilder; <nl> -use Symfony\\Component\\EventDispatcher\\EventDispatcherInterface; <nl> -use Symfony\\Component\\EventDispatcher\\EventSubscriberInterface; <nl> use Symplify\\PackageBuilder\\Adapter\\Symfony\\DependencyInjection\\DefinitionCollector; <nl> final class CollectorCompilerPass implements CompilerPassInterface <nl> @@ -18,7 +16,6 @@ final class CollectorCompilerPass implements CompilerPassInterface <nl> { <nl> $this->collectCommandsToConsoleApplication($containerBuilder); <nl> $this->collectRectorsToRectorCollector($containerBuilder); <nl> - $this->collectEventSubscribersToEventDisptacher($containerBuilder); <nl> } <nl> private function collectCommandsToConsoleApplication(ContainerBuilder $containerBuilder): void <nl> @@ -40,14 +37,4 @@ final class CollectorCompilerPass implements CompilerPassInterface <nl> 'addRector' <nl> ); <nl> } <nl> - <nl> - private function collectEventSubscribersToEventDisptacher(ContainerBuilder $containerBuilder): void <nl> - { <nl> - DefinitionCollector::loadCollectorWithType( <nl> - $containerBuilder, <nl> - EventDispatcherInterface::class, <nl> - EventSubscriberInterface::class, <nl> - 'addSubscriber' <nl> - ); <nl> - } <nl> } <nl> ", "msg": "DI: drop unused EventDisptacher collecting"}
{"diff_id": 4757, "repo": "rectorphp/rector", "sha": "27c9d22d5aba86dffa4f1ee88160352f6ec8a72e", "time": "07.09.2017 15:57:36", "diff": "mmm a / packages/TriggerExtractor/src/Deprecation/DeprecationFactory.php <nl> ppp b / packages/TriggerExtractor/src/Deprecation/DeprecationFactory.php <nl>@@ -16,14 +16,9 @@ final class DeprecationFactory <nl> { <nl> /** <nl> * @var string <nl> + * @see https://regex101.com/r/WdGoyd/2 <nl> */ <nl> - private const CLASS_PART_PATTERN = '([A-Za-z]+(\\\\\\\\[A-Za-z]+)+)'; <nl> - <nl> - /** <nl> - * @var string <nl> - * @see https://regex101.com/r/WdGoyd/1 <nl> - */ <nl> - private const CLASS_WITH_METHOD_PATTERN = '#^' . self::CLASS_PART_PATTERN . '::[A-Za-z]+\\(\\)#s'; <nl> + private const CLASS_WITH_METHOD_PATTERN = '#^(?<classWithMethod>[A-Za-z]+[\\\\\\\\A-Za-z]+::[A-Za-z]+\\([A-Za-z\\']*\\))#s'; <nl> /** <nl> * Probably resolve by recursion, similar too <nl> @@ -40,18 +35,39 @@ final class DeprecationFactory <nl> return $this->createFromMesssage($message); <nl> } <nl> + private function processConcatNode(Node $node): string <nl> + { <nl> + if ($node instanceof Method) { <nl> + $classMethodNode = $this->findParentOfType($node, ClassMethod::class); <nl> + <nl> + return $node->getAttribute(Attribute::CLASS_NAME) . '::' . $classMethodNode->name->name; <nl> + } <nl> + <nl> + if ($node instanceof String_) { <nl> + $message = $node->value; // complet class to local methods <nl> + return $this->completeClassToLocalMethods($message, (string) $node->getAttribute(Attribute::CLASS_NAME)); <nl> + } <nl> + <nl> + throw new NotImplementedException(sprintf( <nl> + 'Not implemented yet. Go to \"%s::%s()\" and add check for \"%s\" node.', <nl> + __CLASS__, <nl> + __METHOD__, <nl> + get_class($node) <nl> + )); <nl> + } <nl> + <nl> public function tryToCreateClassMethodDeprecation(string $oldMessage, string $newMessage): ?DeprecationInterface <nl> { <nl> // try to find \"SomeClass::methodCall()\" <nl> $matches = Strings::matchAll($oldMessage, self::CLASS_WITH_METHOD_PATTERN); <nl> - if (isset($matches[0][0])) { <nl> - $oldClassWithMethod = $matches[0][0]; <nl> + if (isset($matches[0]['classWithMethod'])) { <nl> + $oldClassWithMethod = $matches[0]['classWithMethod']; <nl> } <nl> // try to find \"SomeClass::methodCall()\" <nl> $matches = Strings::matchAll($newMessage, self::CLASS_WITH_METHOD_PATTERN); <nl> - if (isset($matches[0][0])) { <nl> - $newClassWithMethod = $matches[0][0]; <nl> + if (isset($matches[0]['classWithMethod'])) { <nl> + $newClassWithMethod = $matches[0]['classWithMethod']; <nl> } <nl> if (isset($oldClassWithMethod, $newClassWithMethod)) { <nl> @@ -71,27 +87,6 @@ final class DeprecationFactory <nl> return null; <nl> } <nl> - private function processConcatNode(Node $node): string <nl> - { <nl> - if ($node instanceof Method) { <nl> - $classMethodNode = $this->findParentOfType($node, ClassMethod::class); <nl> - <nl> - return $node->getAttribute(Attribute::CLASS_NAME) . '::' . $classMethodNode->name->name; <nl> - } <nl> - <nl> - if ($node instanceof String_) { <nl> - $message = $node->value; // complet class to local methods <nl> - return $this->completeClassToLocalMethods($message, (string) $node->getAttribute(Attribute::CLASS_NAME)); <nl> - } <nl> - <nl> - throw new NotImplementedException(sprintf( <nl> - 'Not implemented yet. Go to \"%s::%s()\" and add check for \"%s\" node.', <nl> - __CLASS__, <nl> - __METHOD__, <nl> - get_class($node) <nl> - )); <nl> - } <nl> - <nl> private function findParentOfType(Node $node, string $type): Node <nl> { <nl> $parentNode = $node->getAttribute(Attribute::PARENT_NODE); <nl> ", "msg": "DeprecationFactory: improve deprecation resolving"}
{"diff_id": 4782, "repo": "rectorphp/rector", "sha": "b83da2fb2041014b467ce2aca08d3685f8043452", "time": "28.09.2017 20:02:28", "diff": "mmm a / packages/NodeTypeResolver/src/NodeVisitor/NamespaceResolver.php <nl> ppp b / packages/NodeTypeResolver/src/NodeVisitor/NamespaceResolver.php <nl>@@ -32,7 +32,7 @@ final class NamespaceResolver extends NodeVisitorAbstract <nl> public function enterNode(Node $node): void <nl> { <nl> if ($node instanceof Namespace_) { <nl> - $this->namespace = $node->name->toString(); <nl> + $this->namespace = $node->name ? $node->name->toString() : ''; <nl> } <nl> if ($node instanceof Use_) { <nl> ", "msg": "NamespaceResolver: fix empty namespace"}
{"diff_id": 4784, "repo": "rectorphp/rector", "sha": "6320be7e016f40b4d5730967821e5e42ea83889f", "time": "28.09.2017 20:20:13", "diff": "mmm a / src/Rector/Contrib/Nette/Bootstrap/RemoveConfiguratorConstantsRector.php <nl> ppp b / src/Rector/Contrib/Nette/Bootstrap/RemoveConfiguratorConstantsRector.php <nl>@@ -4,6 +4,7 @@ namespace Rector\\Rector\\Contrib\\Nette\\Bootstrap; <nl> use PhpParser\\Node; <nl> use PhpParser\\Node\\Expr\\ClassConstFetch; <nl> +use PhpParser\\Node\\Expr\\Variable; <nl> use PhpParser\\Node\\Scalar\\String_; <nl> use Rector\\Node\\Attribute; <nl> use Rector\\Rector\\AbstractRector; <nl> @@ -42,6 +43,10 @@ final class RemoveConfiguratorConstantsRector extends AbstractRector <nl> /** @var Node\\Name\\FullyQualified $fqnName */ <nl> $fqnName = $classConstFetchNode->class->getAttribute(Attribute::RESOLVED_NAME); <nl> + if ($fqnName === null && $classConstFetchNode->class instanceof Variable) { <nl> + return (string) $classConstFetchNode->class->name; <nl> + } <nl> + <nl> return $fqnName->toString(); <nl> } <nl> ", "msg": "RemoveConfiguratorConstantsRector: fix for var"}
{"diff_id": 4786, "repo": "rectorphp/rector", "sha": "ae81c9feb4f8e89c1d5fcd5ab46291e9b42c148d", "time": "28.09.2017 22:43:18", "diff": "mmm a / packages/NodeTypeResolver/src/NodeVisitor/TypeResolver.php <nl> ppp b / packages/NodeTypeResolver/src/NodeVisitor/TypeResolver.php <nl>@@ -138,7 +138,13 @@ final class TypeResolver extends NodeVisitorAbstract <nl> $this->typeContext->addVariableWithType($variableName, $variableType); <nl> } else { <nl> - $variableType = $this->typeContext->getTypeForVariable((string) $variableNode->name); <nl> + if ($variableNode->name instanceof Variable) { <nl> + $name = $variableNode->name->name; <nl> + } else { <nl> + $name = (string) $variableNode->name; <nl> + } <nl> + <nl> + $variableType = $this->typeContext->getTypeForVariable($name); <nl> } <nl> } else { <nl> $variableType = $this->typeContext->getTypeForVariable((string) $variableNode->name); <nl> @@ -156,9 +162,15 @@ final class TypeResolver extends NodeVisitorAbstract <nl> private function processAssignNode(Assign $assignNode): void <nl> { <nl> if ($assignNode->var instanceof Variable && $assignNode->expr instanceof Variable) { <nl> - $this->typeContext->addAssign($assignNode->var->name, $assignNode->expr->name); <nl> + if ($assignNode->var->name instanceof Variable) { <nl> + $name = $assignNode->var->name->name; <nl> + } else { <nl> + $name = $assignNode->var->name; <nl> + } <nl> + <nl> + $this->typeContext->addAssign($name, $assignNode->expr->name); <nl> - $variableType = $this->typeContext->getTypeForVariable($assignNode->var->name); <nl> + $variableType = $this->typeContext->getTypeForVariable($name); <nl> if ($variableType) { <nl> $assignNode->var->setAttribute(Attribute::TYPE, $variableType); <nl> } <nl> ", "msg": "TypeResolver: fix for variable name"}
{"diff_id": 4820, "repo": "rectorphp/rector", "sha": "4a74fcd678832909e997b382cd37e4ffc72eae0e", "time": "21.10.2017 18:36:13", "diff": "mmm a / packages/NodeTypeResolver/src/NodeVisitor/MethodResolver.php <nl> ppp b / packages/NodeTypeResolver/src/NodeVisitor/MethodResolver.php <nl>@@ -4,6 +4,7 @@ namespace Rector\\NodeTypeResolver\\NodeVisitor; <nl> use PhpParser\\Node; <nl> use PhpParser\\Node\\Expr\\MethodCall; <nl> +use PhpParser\\Node\\Identifier; <nl> use PhpParser\\Node\\Stmt\\ClassMethod; <nl> use PhpParser\\Node\\Stmt\\Expression; <nl> use PhpParser\\NodeVisitorAbstract; <nl> @@ -40,8 +41,10 @@ final class MethodResolver extends NodeVisitorAbstract <nl> } <nl> if ($node instanceof MethodCall) { <nl> + if ($node->name instanceof Identifier) { <nl> $this->methodCall = $node->name->toString(); <nl> } <nl> + } <nl> $node->setAttribute(Attribute::METHOD_NAME, $this->methodName); <nl> $node->setAttribute(Attribute::METHOD_CALL, $this->methodCall); <nl> ", "msg": "MethodResolver: fix for non-Identifier"}
{"diff_id": 4843, "repo": "rectorphp/rector", "sha": "020afa720ced21a34ee882dbd694ebbd5d8fb4db", "time": "06.11.2017 15:02:46", "diff": "mmm a / src/Console/Application.php <nl> ppp b / src/Console/Application.php <nl>namespace Rector\\Console; <nl> use Symfony\\Component\\Console\\Application as SymfonyApplication; <nl> -use Symfony\\Component\\Console\\Input\\InputArgument; <nl> use Symfony\\Component\\Console\\Input\\InputDefinition; <nl> use Symfony\\Component\\Console\\Input\\InputOption; <nl> @@ -19,30 +18,40 @@ final class Application extends SymfonyApplication <nl> parent::__construct(self::NAME); <nl> } <nl> - /** <nl> - * This method override adds option to load custom config via --config in any command. <nl> - * And --level option as well. <nl> - */ <nl> protected function getDefaultInputDefinition(): InputDefinition <nl> { <nl> - return new InputDefinition([ <nl> - new InputArgument('command', InputArgument::REQUIRED, 'The command to execute'), <nl> - new InputOption( <nl> + $defaultInputDefinition = parent::getDefaultInputDefinition(); <nl> + <nl> + $this->removeUnusedOptions($defaultInputDefinition); <nl> + $this->addCustomOptions($defaultInputDefinition); <nl> + <nl> + return $defaultInputDefinition; <nl> + } <nl> + <nl> + private function removeUnusedOptions(InputDefinition $inputDefinition): void <nl> + { <nl> + $options = $inputDefinition->getOptions(); <nl> + <nl> + unset($options['quiet'], $options['version'], $options['no-interraction']); <nl> + <nl> + $inputDefinition->setOptions($options); <nl> + } <nl> + <nl> + private function addCustomOptions(InputDefinition $inputDefinition): void <nl> + { <nl> + $inputDefinition->addOption(new InputOption( <nl> '--config', <nl> null, <nl> InputOption::VALUE_REQUIRED, <nl> 'Path to config file.', <nl> getcwd() . '/rector.yml' <nl> - ), <nl> - new InputOption( <nl> + )); <nl> + <nl> + $inputDefinition->addOption(new InputOption( <nl> '--level', <nl> null, <nl> InputOption::VALUE_REQUIRED, <nl> 'Finds config by shortcut name.' <nl> - ), <nl> - new InputOption('--help', '-h', InputOption::VALUE_NONE, 'Display this help message'), <nl> - new InputOption('--ansi', '', InputOption::VALUE_NONE, 'Force ANSI output'), <nl> - new InputOption('--no-ansi', '', InputOption::VALUE_NONE, 'Disable ANSI output'), <nl> - ]); <nl> + )); <nl> } <nl> } <nl> ", "msg": "[Console] allow verbose option, improve default definition to opt-out"}
{"diff_id": 4855, "repo": "rectorphp/rector", "sha": "a32134b33e9efdbd793d77e9ce257f27b7f3a3d9", "time": "01.12.2017 21:17:16", "diff": "mmm a / src/Printer/BetterStandardPrinter.php <nl> ppp b / src/Printer/BetterStandardPrinter.php <nl>@@ -7,11 +7,16 @@ use PhpParser\\PrettyPrinter\\Standard; <nl> final class BetterStandardPrinter extends Standard <nl> { <nl> /** <nl> - * Do not preslash slashes. <nl> - * Was causing `Vendor\\Class` => `Vendor\\\\Class`. <nl> + * Do not preslash all slashes (parent behavior), but only those: <nl> + * <nl> + * - followed by \"\\\" <nl> + * - by \"'\" <nl> + * - or the end of the string <nl> + * <nl> + * Prevents `Vendor\\Class` => `Vendor\\\\Class`. <nl> */ <nl> protected function pSingleQuotedString(string $string): string <nl> { <nl> - return '\\'' . addcslashes($string, '\\'') . '\\''; <nl> + return '\\'' . preg_replace(\"/'|\\\\\\\\(?=[\\\\\\\\']|$)/\", '\\\\\\\\$0', $string) . '\\''; <nl> } <nl> } <nl> ", "msg": "Slashing - use better recommended regex and add explanation"}
{"diff_id": 4867, "repo": "rectorphp/rector", "sha": "afb27b1900997d2d5059c2dc6a98919628c3d5af", "time": "19.12.2017 20:18:10", "diff": "mmm a / src/Rector/Contrib/PHPUnit/SpecificMethodCountRector.php <nl> ppp b / src/Rector/Contrib/PHPUnit/SpecificMethodCountRector.php <nl>@@ -34,14 +34,19 @@ use Rector\\Rector\\AbstractRector; <nl> final class SpecificMethodCountRector extends AbstractRector <nl> { <nl> /** <nl> - * @var MethodCallAnalyzer <nl> + * @var string[] <nl> */ <nl> - private $methodCallAnalyzer; <nl> + private $renameMethodsMap = [ <nl> + 'assertSame' => 'assertCount', <nl> + 'assertNotSame' => 'assertNotCount', <nl> + 'assertEquals' => 'assertCount', <nl> + 'assertNotEquals' => 'assertNotCount', <nl> + ]; <nl> /** <nl> - * @var string|null <nl> + * @var MethodCallAnalyzer <nl> */ <nl> - private $activeFuncCallName; <nl> + private $methodCallAnalyzer; <nl> public function __construct(MethodCallAnalyzer $methodCallAnalyzer) <nl> { <nl> @@ -50,8 +55,6 @@ final class SpecificMethodCountRector extends AbstractRector <nl> public function isCandidate(Node $node): bool <nl> { <nl> - $this->activeFuncCallName = null; <nl> - <nl> if (! $this->methodCallAnalyzer->isTypesAndMethods( <nl> $node, <nl> ['PHPUnit\\Framework\\TestCase', 'PHPUnit_Framework_TestCase'], <nl> @@ -76,7 +79,9 @@ final class SpecificMethodCountRector extends AbstractRector <nl> $coutableMethod = $secondArgumentValue->name->toString(); <nl> - return $coutableMethod === 'count' || $coutableMethod === 'sizeof'; <nl> + return in_array($coutableMethod, [ <nl> + 'count', 'sizeof', <nl> + ]); <nl> } <nl> /** <nl> @@ -86,13 +91,7 @@ final class SpecificMethodCountRector extends AbstractRector <nl> { <nl> $oldMethodName = $methodCallNode->name->toString(); <nl> - if ($oldMethodName === 'assertEquals' || $oldMethodName === 'assertSame') { <nl> - /** @var string $trueMethodName */ <nl> - $methodCallNode->name = new Identifier('assertCount'); <nl> - } elseif ($oldMethodName === 'assertNotEquals' || $oldMethodName === 'assertNotSame') { <nl> - /** @var string $falseMethodName */ <nl> - $methodCallNode->name = new Identifier('assertNotCount'); <nl> - } <nl> + $methodCallNode->name = new Identifier($this->renameMethodsMap[$oldMethodName]); <nl> /** @var FuncCall $secondArgument */ <nl> $secondArgument = $methodCallNode->args[1]->value; <nl> ", "msg": "Make easier to add new assertions to SpecificMethodCountRector"}
{"diff_id": 4877, "repo": "rectorphp/rector", "sha": "0e45d22a9625bb4647ad3bc81352e4a362f7d606", "time": "20.12.2017 14:23:58", "diff": "mmm a / packages/BetterReflection/src/SourceLocator/SourceLocatorFactory.php <nl> ppp b / packages/BetterReflection/src/SourceLocator/SourceLocatorFactory.php <nl>@@ -7,7 +7,6 @@ use Rector\\BetterReflection\\SourceLocator\\Type\\AggregateSourceLocator; <nl> use Rector\\BetterReflection\\SourceLocator\\Type\\AutoloadSourceLocator; <nl> use Rector\\BetterReflection\\SourceLocator\\Type\\ComposerSourceLocator; <nl> use Rector\\BetterReflection\\SourceLocator\\Type\\DirectoriesSourceLocator; <nl> -use Rector\\BetterReflection\\SourceLocator\\Type\\EvaledCodeSourceLocator; <nl> use Rector\\BetterReflection\\SourceLocator\\Type\\MemoizingSourceLocator; <nl> use Rector\\BetterReflection\\SourceLocator\\Type\\PhpInternalSourceLocator; <nl> use Rector\\BetterReflection\\SourceLocator\\Type\\SingleFileSourceLocator; <nl> @@ -84,7 +83,6 @@ final class SourceLocatorFactory <nl> $this->commonLocators = [ <nl> new PhpInternalSourceLocator($this->locator), <nl> - new EvaledCodeSourceLocator($this->locator), <nl> new AutoloadSourceLocator($this->locator), <nl> $this->stubSourceLocator, <nl> ]; <nl> ", "msg": "SourceLocatorFactory: drop EvalLocator, not used"}
{"diff_id": 4878, "repo": "rectorphp/rector", "sha": "693a715e3b511f047efac8fd5f20566010b85a8e", "time": "20.12.2017 14:58:41", "diff": "mmm a / src/Rector/Contrib/Nette/Utils/MagicMethodRector.php <nl> ppp b / src/Rector/Contrib/Nette/Utils/MagicMethodRector.php <nl>@@ -18,11 +18,6 @@ use Rector\\Regex\\MagicMethodMatcher; <nl> */ <nl> final class MagicMethodRector extends AbstractRector <nl> { <nl> - /** <nl> - * @var string <nl> - */ <nl> - private const NETTE_OBJECT_CLASS = 'Nette\\Object'; <nl> - <nl> /** <nl> * @var mixed[] <nl> */ <nl> @@ -121,12 +116,6 @@ final class MagicMethodRector extends AbstractRector <nl> private function isNetteObjectChild(Class_ $classNode): bool <nl> { <nl> - if ($classNode->extends === null) { <nl> - return false; <nl> - } <nl> - <nl> - $parentClassName = (string) $classNode->extends->getAttribute(Attribute::RESOLVED_NAME); <nl> - <nl> - return $parentClassName === self::NETTE_OBJECT_CLASS; <nl> + return in_array('Nette\\Object', (array) $classNode->getAttribute(Attribute::TYPES), true); <nl> } <nl> } <nl> ", "msg": "MagicMethodRector - simplify class type analysis"}
{"diff_id": 4885, "repo": "rectorphp/rector", "sha": "81c6100315fda830fee5936ccf3b2c6a5c7098c9", "time": "21.12.2017 16:39:04", "diff": "mmm a / src/Rector/Contrib/PHPUnit/SpecificMethodRector.php <nl> ppp b / src/Rector/Contrib/PHPUnit/SpecificMethodRector.php <nl>@@ -24,7 +24,7 @@ final class SpecificMethodRector extends AbstractRector <nl> /** <nl> * @var string[][]|false[][] <nl> */ <nl> - private $oldToNewMethods = [ <nl> + private $defaultOldToNewMethods = [ <nl> 'is_readable' => ['assertIsReadable', 'assertNotIsReadable'], <nl> 'array_key_exists' => ['assertArrayHasKey', 'assertArrayNotHasKey'], <nl> 'array_search' => ['assertContains', 'assertNotContains'], <nl> @@ -38,6 +38,11 @@ final class SpecificMethodRector extends AbstractRector <nl> 'is_nan' => ['assertNan', false], <nl> ]; <nl> + /** <nl> + * @var string[][]|false[][] <nl> + */ <nl> + private $activeOldToNewMethods = []; <nl> + <nl> /** <nl> * @var MethodCallAnalyzer <nl> */ <nl> @@ -48,8 +53,12 @@ final class SpecificMethodRector extends AbstractRector <nl> */ <nl> private $activeFuncCallName; <nl> - public function __construct(MethodCallAnalyzer $methodCallAnalyzer) <nl> + /** <nl> + * @param string[][] $activeMethods <nl> + */ <nl> + public function __construct(array $activeMethods = [], MethodCallAnalyzer $methodCallAnalyzer) <nl> { <nl> + $this->activeOldToNewMethods = $this->filterActiveOldToNewMethods($activeMethods); <nl> $this->methodCallAnalyzer = $methodCallAnalyzer; <nl> } <nl> @@ -75,7 +84,7 @@ final class SpecificMethodRector extends AbstractRector <nl> return false; <nl> } <nl> - if (! isset($this->oldToNewMethods[$funcCallName])) { <nl> + if (! isset($this->activeOldToNewMethods[$funcCallName])) { <nl> return false; <nl> } <nl> @@ -101,7 +110,7 @@ final class SpecificMethodRector extends AbstractRector <nl> $identifierNode = $methodCallNode->name; <nl> $oldMethodName = $identifierNode->toString(); <nl> - [$trueMethodName, $falseMethodName] = $this->oldToNewMethods[$this->activeFuncCallName]; <nl> + [$trueMethodName, $falseMethodName] = $this->activeOldToNewMethods[$this->activeFuncCallName]; <nl> if ($oldMethodName === 'assertTrue' && $trueMethodName) { <nl> /** @var string $trueMethodName */ <nl> @@ -150,4 +159,19 @@ final class SpecificMethodRector extends AbstractRector <nl> return null; <nl> } <nl> + <nl> + /** <nl> + * @param string[] $activeMethods <nl> + * @return string[] <nl> + */ <nl> + private function filterActiveOldToNewMethods(array $activeMethods = []): array <nl> + { <nl> + if ($activeMethods) { <nl> + return array_filter($this->defaultOldToNewMethods, function (string $method) use ($activeMethods) { <nl> + return in_array($method, $activeMethods, true); <nl> + }, ARRAY_FILTER_USE_KEY); <nl> + } <nl> + <nl> + return $this->defaultOldToNewMethods; <nl> + } <nl> } <nl> ", "msg": "SpecificMethodRector - prepare filtering ctor param for active methods"}
{"diff_id": 4898, "repo": "rectorphp/rector", "sha": "f5807439bc2ae109fc1d88e23ec8426466e84d91", "time": "25.12.2017 21:38:32", "diff": "mmm a / packages/ReflectionDocBlock/src/NodeAnalyzer/DocBlockAnalyzer.php <nl> ppp b / packages/ReflectionDocBlock/src/NodeAnalyzer/DocBlockAnalyzer.php <nl>@@ -4,7 +4,6 @@ namespace Rector\\ReflectionDocBlock\\NodeAnalyzer; <nl> use phpDocumentor\\Reflection\\DocBlock; <nl> use phpDocumentor\\Reflection\\DocBlock\\Tag; <nl> -use phpDocumentor\\Reflection\\DocBlock\\Tags\\Deprecated; <nl> use phpDocumentor\\Reflection\\DocBlock\\Tags\\Param; <nl> use phpDocumentor\\Reflection\\DocBlock\\Tags\\Var_; <nl> use phpDocumentor\\Reflection\\Type; <nl> @@ -80,22 +79,6 @@ final class DocBlockAnalyzer <nl> return $types; <nl> } <nl> - public function getDeprecatedDocComment(Node $node): ?string <nl> - { <nl> - /** @var Deprecated[] $deprecatedTags */ <nl> - $deprecatedTags = $this->getTagsByName($node, 'deprecated'); <nl> - if (! count($deprecatedTags)) { <nl> - return null; <nl> - } <nl> - <nl> - if ($deprecatedTags[0]->getDescription()) { <nl> - return $deprecatedTags[0]->getDescription() <nl> - ->render(); <nl> - } <nl> - <nl> - return $deprecatedTags[0]->getName(); <nl> - } <nl> - <nl> public function getTypeForParam(Node $node, string $paramName): ?string <nl> { <nl> // @todo should be array as well, use same approach as for @getVarTypes() <nl> ", "msg": "drop unused deprecation method"}
{"diff_id": 4903, "repo": "rectorphp/rector", "sha": "8abcffdb80e07640cf78883b5fe499092d81deac", "time": "26.12.2017 02:17:59", "diff": "mmm a / packages/NodeTypeResolver/src/Contract/PerNodeTypeResolver/PerNodeTypeResolverInterface.php <nl> ppp b / packages/NodeTypeResolver/src/Contract/PerNodeTypeResolver/PerNodeTypeResolverInterface.php <nl>@@ -12,4 +12,10 @@ interface PerNodeTypeResolverInterface <nl> * @return string[] <nl> */ <nl> public function resolve(Node $node): array; <nl> + <nl> + /** <nl> + * If this resolves is subscribed to element that bears the type. <nl> + * E.g. name itself does not, bug object, new instance, property and method does. <nl> + */ <nl> + public function isPrimary(): bool; <nl> } <nl> ", "msg": "PerNodeTypeResolverInterface - add isPrimary() method, to separate helper resolvers and actually type bearers"}
{"diff_id": 4917, "repo": "rectorphp/rector", "sha": "956abafc98b89f2f3a329da15121d4606dd0bb87", "time": "25.12.2017 16:52:38", "diff": "mmm a / src/NodeChanger/MethodNameChanger.php <nl> ppp b / src/NodeChanger/MethodNameChanger.php <nl>namespace Rector\\NodeChanger; <nl> -use PhpParser\\Node\\Expr\\MethodCall; <nl> +use PhpParser\\Node\\Expr; <nl> use PhpParser\\Node\\Identifier; <nl> final class MethodNameChanger <nl> { <nl> - public function renameNode(MethodCall $node, $oldToNewMethods): void <nl> + public function renameNode(Expr $node, $oldToNewMethods): void <nl> { <nl> if (is_array($oldToNewMethods)) { <nl> $oldNodeMethodName = $node->name->toString(); <nl> ", "msg": "Change Type of $node in MethodNameChanger to support Expr"}
{"diff_id": 4961, "repo": "rectorphp/rector", "sha": "a38aa54e3ac68bd6a166a459ed3e5a11e952e5dc", "time": "03.01.2018 20:55:16", "diff": "mmm a / src/Rector/AbstractRector.php <nl> ppp b / src/Rector/AbstractRector.php <nl>@@ -137,6 +137,8 @@ abstract class AbstractRector extends NodeVisitorAbstract implements RectorInter <nl> } <nl> /** <nl> + * @todo maybe use leave node instead where is used array_splice() method? <nl> + * <nl> * Adds new nodes before or after particular Expression nodes. <nl> * <nl> * @param Node[] $nodes <nl> @@ -145,10 +147,14 @@ abstract class AbstractRector extends NodeVisitorAbstract implements RectorInter <nl> private function prependExpressionNodes(array $nodes): array <nl> { <nl> foreach ($nodes as $i => $node) { <nl> - if ($node instanceof Expression) { <nl> - $nodes = $this->prependNodesAfterAndBeforeExpression($nodes, $node, $i); <nl> - } elseif (isset($node->stmts)) { <nl> + if (isset($node->stmts)) { <nl> $node->stmts = $this->prependExpressionNodes($node->stmts); <nl> + if ($node instanceof Node\\Stmt\\If_) { <nl> + $node->else->stmts = $this->prependExpressionNodes($node->else->stmts); <nl> + } <nl> + <nl> + } elseif ($node instanceof Expression) { <nl> + $nodes = $this->prependNodesAfterAndBeforeExpression($nodes, $node, $i); <nl> } <nl> } <nl> @@ -168,7 +174,7 @@ abstract class AbstractRector extends NodeVisitorAbstract implements RectorInter <nl> } <nl> if (isset($this->expressionsToPrependAfter[$node])) { <nl> - array_splice($nodes, $i + 1, 0, $this->expressionsToPrependAfter[$node]); <nl> + array_splice($nodes, $i + 1, 1, $this->expressionsToPrependAfter[$node]); <nl> unset($this->expressionsToPrependAfter[$node]); <nl> } <nl> @@ -197,9 +203,10 @@ abstract class AbstractRector extends NodeVisitorAbstract implements RectorInter <nl> $expressionToBeAddedInString = $this->betterStandardPrinter->prettyPrint([$expressionToBeAdded]); <nl> throw new ShouldNotHappenException(sprintf( <nl> - '\"%s\" expression was not added %s \"%s\" in \"%s\" class', <nl> + '\"%s\" expression was not added %s%s\"%s\" in \"%s\" class', <nl> $expressionToBeAddedInString, <nl> $type, <nl> + PHP_EOL, <nl> $targetExpressionInString, <nl> self::class <nl> )); <nl> ", "msg": "AbstractRector: fix node prepending for If_ statement"}
{"diff_id": 4963, "repo": "rectorphp/rector", "sha": "fb3517de63200df7e2fd6c94256ff73b3fcc8f0a", "time": "03.01.2018 21:10:46", "diff": "mmm a / src/Rector/AbstractRector.php <nl> ppp b / src/Rector/AbstractRector.php <nl>@@ -16,11 +16,6 @@ use SplObjectStorage; <nl> abstract class AbstractRector extends NodeVisitorAbstract implements RectorInterface <nl> { <nl> - /** <nl> - * @var SplObjectStorage|Expression[][] <nl> - */ <nl> - private $expressionsToPrependBefore = []; <nl> - <nl> /** <nl> * @var SplObjectStorage|Expression[][] <nl> */ <nl> @@ -62,7 +57,6 @@ abstract class AbstractRector extends NodeVisitorAbstract implements RectorInter <nl> */ <nl> final public function beforeTraverse(array $nodes): array <nl> { <nl> - $this->expressionsToPrependBefore = new SplObjectStorage(); <nl> $this->expressionsToPrependAfter = new SplObjectStorage(); <nl> return $nodes; <nl> @@ -117,29 +111,10 @@ abstract class AbstractRector extends NodeVisitorAbstract implements RectorInter <nl> } <nl> } <nl> - protected function prependNodeBeforeNode(Expr $nodeToPrepend, Node $positionNode): void <nl> - { <nl> - $positionExpressionNode = $this->betterNodeFinder->findFirstAncestorInstanceOf( <nl> - $positionNode, <nl> - Expression::class <nl> - ); <nl> - <nl> - $expressionToPrepend = $this->wrapToExpression($nodeToPrepend); <nl> - <nl> - if (isset($this->expressionsToPrependBefore[$positionExpressionNode])) { <nl> - $this->expressionsToPrependBefore[$positionExpressionNode] = array_merge( <nl> - $this->expressionsToPrependBefore[$positionExpressionNode], <nl> - [$expressionToPrepend] <nl> - ); <nl> - } else { <nl> - $this->expressionsToPrependBefore[$positionExpressionNode] = [$expressionToPrepend]; <nl> - } <nl> - } <nl> - <nl> /** <nl> * @todo maybe use leave node instead where is used array_splice() method? <nl> * <nl> - * Adds new nodes before or after particular Expression nodes. <nl> + * Adds new nodes after particular Expression nodes. <nl> * <nl> * @param Node[] $nodes <nl> * @return Node[] array <nl> @@ -149,12 +124,12 @@ abstract class AbstractRector extends NodeVisitorAbstract implements RectorInter <nl> foreach ($nodes as $i => $node) { <nl> if (isset($node->stmts)) { <nl> $node->stmts = $this->prependExpressionNodes($node->stmts); <nl> - if ($node instanceof Node\\Stmt\\If_) { <nl> + if ($node instanceof Node\\Stmt\\If_ && isset($node->else->stmts)) { <nl> $node->else->stmts = $this->prependExpressionNodes($node->else->stmts); <nl> } <nl> } elseif ($node instanceof Expression) { <nl> - $nodes = $this->prependNodesAfterAndBeforeExpression($nodes, $node, $i); <nl> + $nodes = $this->prependNodesAfterExpression($nodes, $node, $i); <nl> } <nl> } <nl> @@ -165,16 +140,10 @@ abstract class AbstractRector extends NodeVisitorAbstract implements RectorInter <nl> * @param Node[] $nodes <nl> * @return Node[] <nl> */ <nl> - private function prependNodesAfterAndBeforeExpression(array $nodes, Node $node, int $i): array <nl> + private function prependNodesAfterExpression(array $nodes, Node $node, int $i): array <nl> { <nl> - if (isset($this->expressionsToPrependBefore[$node])) { <nl> - array_splice($nodes, $i, 0, $this->expressionsToPrependBefore[$node]); <nl> - <nl> - unset($this->expressionsToPrependBefore[$node]); <nl> - } <nl> - <nl> if (isset($this->expressionsToPrependAfter[$node])) { <nl> - array_splice($nodes, $i + 1, 1, $this->expressionsToPrependAfter[$node]); <nl> + array_splice($nodes, $i + 1, 0, $this->expressionsToPrependAfter[$node]); <nl> unset($this->expressionsToPrependAfter[$node]); <nl> } <nl> @@ -189,23 +158,16 @@ abstract class AbstractRector extends NodeVisitorAbstract implements RectorInter <nl> private function ensureAllExpressionsWerePrepended(): void <nl> { <nl> - $this->reportRemainingExpressionsToPrepend($this->expressionsToPrependAfter, 'after'); <nl> - $this->reportRemainingExpressionsToPrepend($this->expressionsToPrependBefore, 'before'); <nl> - } <nl> - <nl> - private function reportRemainingExpressionsToPrepend(SplObjectStorage $expressionsToPrepend, string $type): void <nl> - { <nl> - foreach ($expressionsToPrepend as $value) { <nl> - $targetExpression = $expressionsToPrepend->current(); <nl> + foreach ($this->expressionsToPrependAfter as $value) { <nl> + $targetExpression = $this->expressionsToPrependAfter->current(); <nl> $targetExpressionInString = $this->betterStandardPrinter->prettyPrint([$targetExpression]); <nl> - foreach ($expressionsToPrepend->getInfo() as $expressionToBeAdded) { <nl> + foreach ($this->expressionsToPrependAfter->getInfo() as $expressionToBeAdded) { <nl> $expressionToBeAddedInString = $this->betterStandardPrinter->prettyPrint([$expressionToBeAdded]); <nl> throw new ShouldNotHappenException(sprintf( <nl> - '\"%s\" expression was not added %s%s\"%s\" in \"%s\" class', <nl> + '\"%s\" expression was not added after %s\"%s\" in \"%s\" class', <nl> $expressionToBeAddedInString, <nl> - $type, <nl> PHP_EOL, <nl> $targetExpressionInString, <nl> self::class <nl> ", "msg": "AbstractRector: remove preprend before, not needed"}
{"diff_id": 4965, "repo": "rectorphp/rector", "sha": "ffe441a3ad8e00ab727ce36c2d4a91e6e491d35b", "time": "04.01.2018 10:10:36", "diff": "mmm a / src/Rector/AbstractRector.php <nl> ppp b / src/Rector/AbstractRector.php <nl>@@ -9,7 +9,6 @@ use PhpParser\\NodeTraverser; <nl> use PhpParser\\NodeVisitorAbstract; <nl> use Rector\\Contract\\Rector\\RectorInterface; <nl> use Rector\\NodeTraverserQueue\\BetterNodeFinder; <nl> -use Rector\\Printer\\BetterStandardPrinter; <nl> use SplObjectStorage; <nl> abstract class AbstractRector extends NodeVisitorAbstract implements RectorInterface <nl> @@ -24,11 +23,6 @@ abstract class AbstractRector extends NodeVisitorAbstract implements RectorInter <nl> */ <nl> private $betterNodeFinder; <nl> - /** <nl> - * @var BetterStandardPrinter <nl> - */ <nl> - private $betterStandardPrinter; <nl> - <nl> /** <nl> * Nasty magic, unable to do that in config autowire _instanceof calls. <nl> * <nl> @@ -39,16 +33,6 @@ abstract class AbstractRector extends NodeVisitorAbstract implements RectorInter <nl> $this->betterNodeFinder = $betterNodeFinder; <nl> } <nl> - /** <nl> - * Nasty magic, unable to do that in config autowire _instanceof calls. <nl> - * <nl> - * @required <nl> - */ <nl> - public function setPrettyPrinter(BetterStandardPrinter $betterStandardPrinter): void <nl> - { <nl> - $this->betterStandardPrinter = $betterStandardPrinter; <nl> - } <nl> - <nl> /** <nl> * @param Node[] $nodes <nl> * @return Node[] <nl> @@ -83,38 +67,7 @@ abstract class AbstractRector extends NodeVisitorAbstract implements RectorInter <nl> */ <nl> public function afterTraverse(array $nodes): array <nl> { <nl> - return $this->prependExpressionNodes($nodes); <nl> - } <nl> - <nl> - protected function prependNodeAfterNode(Expr $nodeToPrepend, Node $positionNode): void <nl> - { <nl> - $positionExpressionNode = $this->betterNodeFinder->findFirstAncestorInstanceOf( <nl> - $positionNode, <nl> - Expression::class <nl> - ); <nl> - <nl> - $expressionToPrepend = $this->wrapToExpression($nodeToPrepend); <nl> - <nl> - if (isset($this->expressionsToPrependAfter[$positionExpressionNode])) { <nl> - $this->expressionsToPrependAfter[$positionExpressionNode] = array_merge( <nl> - $this->expressionsToPrependAfter[$positionExpressionNode], <nl> - [$expressionToPrepend] <nl> - ); <nl> - } else { <nl> - $this->expressionsToPrependAfter[$positionExpressionNode] = [$expressionToPrepend]; <nl> - } <nl> - } <nl> - <nl> - /** <nl> - * @todo maybe use leave node instead where is used array_splice() method? <nl> - * <nl> - * Adds new nodes after particular Expression nodes. <nl> - * <nl> - * @param Node[] $nodes <nl> - * @return Node[] array <nl> - */ <nl> - private function prependExpressionNodes(array $nodes): array <nl> - { <nl> + // Add new nodes after particular Expression nodes <nl> $expressionPrependerNodeVisitor = new class($this->expressionsToPrependAfter) extends NodeVisitorAbstract { <nl> private $expressionsToPrependAfter; <nl> public function __construct(SplObjectStorage $expressionsToPrependAfter) <nl> @@ -138,6 +91,25 @@ abstract class AbstractRector extends NodeVisitorAbstract implements RectorInter <nl> return $nodeTraverser->traverse($nodes); <nl> } <nl> + protected function prependNodeAfterNode(Expr $nodeToPrepend, Node $positionNode): void <nl> + { <nl> + $positionExpressionNode = $this->betterNodeFinder->findFirstAncestorInstanceOf( <nl> + $positionNode, <nl> + Expression::class <nl> + ); <nl> + <nl> + $expressionToPrepend = $this->wrapToExpression($nodeToPrepend); <nl> + <nl> + if (isset($this->expressionsToPrependAfter[$positionExpressionNode])) { <nl> + $this->expressionsToPrependAfter[$positionExpressionNode] = array_merge( <nl> + $this->expressionsToPrependAfter[$positionExpressionNode], <nl> + [$expressionToPrepend] <nl> + ); <nl> + } else { <nl> + $this->expressionsToPrependAfter[$positionExpressionNode] = [$expressionToPrepend]; <nl> + } <nl> + } <nl> + <nl> private function wrapToExpression(Expr $exprNode): Expression <nl> { <nl> return new Expression($exprNode); <nl> ", "msg": "AbstractRector: unused printer cleanup"}
{"diff_id": 4986, "repo": "rectorphp/rector", "sha": "359e85a5861d0515d8fa1cecc0ce670d964b554d", "time": "07.01.2018 23:06:42", "diff": "mmm a / src/Rector/Contrib/PHPUnit/SpecificMethod/AssertCompareToSpecificMethodRector.php <nl> ppp b / src/Rector/Contrib/PHPUnit/SpecificMethod/AssertCompareToSpecificMethodRector.php <nl>@@ -89,7 +89,7 @@ final class AssertCompareToSpecificMethodRector extends AbstractRector <nl> return false; <nl> } <nl> - $methodName = $secondArgumentValue->name->getFirst(); <nl> + $methodName = $secondArgumentValue->name->toString(); <nl> if (! isset($this->defaultOldToNewMethods[$methodName])) { <nl> return false; <nl> } <nl> ", "msg": "Use toString instead of getFirst when getting the $methodName"}
{"diff_id": 4995, "repo": "rectorphp/rector", "sha": "666dc0371f052820ec51f373d3807946df367724", "time": "14.01.2018 18:31:13", "diff": "mmm a / src/Rector/Contrib/Symfony/HttpKernel/TemplateAnnotationRector.php <nl> ppp b / src/Rector/Contrib/Symfony/HttpKernel/TemplateAnnotationRector.php <nl>@@ -4,16 +4,10 @@ namespace Rector\\Rector\\Contrib\\Symfony\\HttpKernel; <nl> use Nette\\Utils\\Strings; <nl> use PhpParser\\Node; <nl> -use PhpParser\\Node\\Expr\\MethodCall; <nl> -use PhpParser\\Node\\Scalar\\String_; <nl> use PhpParser\\Node\\Stmt\\ClassMethod; <nl> -use Rector\\Builder\\Class_\\ClassPropertyCollector; <nl> -use Rector\\Contract\\Bridge\\ServiceTypeForNameProviderInterface; <nl> -use Rector\\Naming\\PropertyNaming; <nl> -use Rector\\Node\\Attribute; <nl> +use PhpParser\\Node\\Stmt\\Expression; <nl> use Rector\\Node\\MethodCallNodeFactory; <nl> -use Rector\\Node\\PropertyFetchNodeFactory; <nl> -use Rector\\NodeAnalyzer\\Contrib\\Symfony\\ContainerCallAnalyzer; <nl> +use Rector\\Node\\NodeFactory; <nl> use Rector\\Rector\\AbstractRector; <nl> use Rector\\ReflectionDocBlock\\NodeAnalyzer\\DocBlockAnalyzer; <nl> @@ -39,10 +33,19 @@ final class TemplateAnnotationRector extends AbstractRector <nl> */ <nl> private $methodCallNodeFactory; <nl> - public function __construct(DocBlockAnalyzer $docBlockAnalyzer, MethodCallNodeFactory $methodCallNodeFactory) <nl> - { <nl> + /** <nl> + * @var NodeFactory <nl> + */ <nl> + private $nodeFactory; <nl> + <nl> + public function __construct( <nl> + DocBlockAnalyzer $docBlockAnalyzer, <nl> + MethodCallNodeFactory $methodCallNodeFactory, <nl> + NodeFactory $nodeFactory <nl> + ) { <nl> $this->docBlockAnalyzer = $docBlockAnalyzer; <nl> $this->methodCallNodeFactory = $methodCallNodeFactory; <nl> + $this->nodeFactory = $nodeFactory; <nl> } <nl> public function isCandidate(Node $node): bool <nl> @@ -74,11 +77,11 @@ final class TemplateAnnotationRector extends AbstractRector <nl> $thisRenderMethodCall = $this->methodCallNodeFactory->createWithVariableNameMethodNameAndArguments( <nl> 'this', <nl> 'render', <nl> - [new Node\\Arg(new String_($templateName))] <nl> + $this->nodeFactory->createArgs([$templateName]) <nl> ); <nl> // 4. to bottom of method - probably $methodCall->stmts[] <nl> - $classMethodNode->stmts[] = new Node\\Stmt\\Expression($thisRenderMethodCall); <nl> + $classMethodNode->stmts[] = new Expression($thisRenderMethodCall); <nl> return $classMethodNode; <nl> } <nl> ", "msg": "add NodeFactory, fix cs"}
{"diff_id": 5003, "repo": "rectorphp/rector", "sha": "53a45c31d9bcf9b4cb45e1813bd7a70de3a4787a", "time": "18.01.2018 16:37:06", "diff": "mmm a / src/Rector/Contrib/PHPUnit/SpecificMethod/AssertIssetToSpecificMethodRector.php <nl> ppp b / src/Rector/Contrib/PHPUnit/SpecificMethod/AssertIssetToSpecificMethodRector.php <nl>@@ -68,13 +68,9 @@ final class AssertIssetToSpecificMethodRector extends AbstractRector <nl> return false; <nl> } <nl> - /** @var Isset_ $issetNode */ <nl> - $issetNode = $firstArgumentValue; <nl> + $variableNodeClass = get_class($firstArgumentValue->vars[0]); <nl> - return in_array(get_class($issetNode->vars[0]), [ <nl> - ArrayDimFetch::class, <nl> - PropertyFetch::class, <nl> - ], true); <nl> + return in_array($variableNodeClass, [ArrayDimFetch::class, PropertyFetch::class], true); <nl> } <nl> /** <nl> ", "msg": "Reduce complexity while checking instances"}
{"diff_id": 5011, "repo": "rectorphp/rector", "sha": "b84bc6d120d9f1895728c787f540d1d7d9ac8b6b", "time": "17.01.2018 09:30:21", "diff": "mmm a / src/Rector/Dynamic/FluentReplaceRector.php <nl> ppp b / src/Rector/Dynamic/FluentReplaceRector.php <nl>@@ -41,6 +41,7 @@ final class FluentReplaceRector extends AbstractRector <nl> public function isCandidate(Node $node): bool <nl> { <nl> + // @todo this run has to be first, dual run? <nl> if ($node instanceof Return_) { <nl> if (! $node->expr instanceof Variable) { <nl> return false; <nl> @@ -76,17 +77,8 @@ final class FluentReplaceRector extends AbstractRector <nl> // method call to prepend <nl> $this->decoupleMethodCall($node); <nl> - /** @var MethodCall $previousMethodNodeCall */ <nl> - $previousMethodNodeCall = $node->var; <nl> - <nl> - // move method call one up <nl> - $node->name = $previousMethodNodeCall->name; <nl> - $node->var = $previousMethodNodeCall->var; <nl> - <nl> - // to clear indent <nl> - $node->setAttribute(Attribute::ORIGINAL_NODE, null); <nl> - <nl> - return $node; <nl> + /** @var MethodCall $node->var */ <nl> + return $node->var; <nl> } <nl> return $node; <nl> ", "msg": "FluentReplaceRector: simplify inner return call"}
{"diff_id": 5015, "repo": "rectorphp/rector", "sha": "ba9cb054c7bcd3d0fe5a3b431f969964dc1e59f7", "time": "08.02.2018 16:14:30", "diff": "mmm a / packages/BetterReflection/src/Reflector/SmartClassReflector.php <nl> ppp b / packages/BetterReflection/src/Reflector/SmartClassReflector.php <nl>@@ -167,6 +167,10 @@ final class SmartClassReflector <nl> private function isValidClassName(string $className): bool <nl> { <nl> + if (empty($className)) { <nl> + return false; <nl> + } <nl> + <nl> // invalid class types <nl> if (in_array($className, ['this', 'static', 'self', 'null', 'array', 'string', 'bool'], true)) { <nl> return false; <nl> ", "msg": "SmartClassReflector - skip empty class names [closes"}
{"diff_id": 6247, "repo": "orchidsoftware/platform", "sha": "7f0d507fb54639d45bfd467d81432b7e2cadb339", "time": "04.03.2020 11:45:41", "diff": "mmm a / tests/Environment.php <nl> ppp b / tests/Environment.php <nl>@@ -31,15 +31,16 @@ trait Environment <nl> parent::setUp(); <nl> /* Install application */ <nl> - $this->artisan('db:wipe'); <nl> $this->loadLaravelMigrations(); <nl> $this->loadMigrationsFrom(realpath('./database/migrations')); <nl> $this->artisan('orchid:install'); <nl> /* Refresh application for route/breadcrumbs/orchid provider */ <nl> + if (!$this->app['router']->has('platform.main')) { <nl> $this->refreshApplication(); <nl> $this->loadLaravelMigrations(); <nl> $this->loadMigrationsFrom(realpath('./database/migrations')); <nl> + } <nl> $this->withFactories(Dashboard::path('database/factories')); <nl> ", "msg": "Test execution optimization"}
{"diff_id": 6251, "repo": "orchidsoftware/platform", "sha": "0f708ab059212fa76ce222c1a6e8a29f56e9f463", "time": "22.03.2020 19:05:12", "diff": "mmm a / resources/views/partials/layouts/th.blade.php <nl> ppp b / resources/views/partials/layouts/th.blade.php <nl><th width=\"{{$width}}\" class=\"text-{{$align}}\" data-column=\"{{ $slug }}\"> <nl> - <div class=\"text-truncate\"> <nl> + <div> <nl> @if($sort) <nl> <a href=\"{{ $sortUrl }}\" <nl> class=\"@if(!is_sort($column)) text-muted @endif\"> <nl> ", "msg": "Fixed display filter in table"}
{"diff_id": 6254, "repo": "orchidsoftware/platform", "sha": "6017bd74a6b731c6c5e69a6ccff61519111e2ac5", "time": "24.04.2020 18:29:36", "diff": "mmm a / src/Filters/Filter.php <nl> ppp b / src/Filters/Filter.php <nl>@@ -55,7 +55,7 @@ abstract class Filter <nl> */ <nl> public function filter(Builder $builder): Builder <nl> { <nl> - $when = $this->parameters === null || $this->request->hasAny($this->parameters); <nl> + $when = empty($this->parameters) || $this->request->hasAny($this->parameters); <nl> return $builder->when($when, function (Builder $builder) { <nl> return $this->run($builder); <nl> ", "msg": "Fixed launch of filters with empty parameter"}
{"diff_id": 6263, "repo": "orchidsoftware/platform", "sha": "00fb8acd492571b7bfd6dae6d5fcd3428ac67f30", "time": "22.05.2020 12:40:26", "diff": "mmm a / resources/views/layouts/columns.blade.php <nl> ppp b / resources/views/layouts/columns.blade.php <nl><div class=\"hbox hbox-auto-xs\"> <nl> @foreach($manyForms as $key => $column) <nl> <div class=\"hbox-col\"> <nl> - <div class=\"vbox py-3 @if(!$loop->first) pl-2 @endif @if(!$loop->last) pr-2 @endif\"> <nl> + <div class=\"vbox py-3 @if(!$loop->first) pl-md-2 @endif @if(!$loop->last) pr-md-2 @endif\"> <nl> @foreach($column as $item) <nl> {!! $item ?? '' !!} <nl> @endforeach <nl> ", "msg": "Disable padding columns for mobile"}
{"diff_id": 6267, "repo": "orchidsoftware/platform", "sha": "604a3092c25eaf4472d1ec4370aacf34cc91ded1", "time": "15.06.2020 13:16:30", "diff": "mmm a / database/migrations/2015_04_12_000000_create_orchid_users_table.php <nl> ppp b / database/migrations/2015_04_12_000000_create_orchid_users_table.php <nl>@@ -22,19 +22,8 @@ class CreateOrchidUsersTable extends Migration <nl> */ <nl> public function down() <nl> { <nl> - $connection = config('database.default'); <nl> - $driver = config(\"database.connections.{$connection}.driver\"); <nl> - <nl> - // Fallback for sqlite <nl> - if ($driver === 'sqlite') { <nl> - Schema::dropIfExists('users'); <nl> - <nl> - return; <nl> - } <nl> - <nl> Schema::table('users', function (Blueprint $table) { <nl> - $table->dropColumn('last_login'); <nl> - $table->dropColumn('permissions'); <nl> + $table->dropColumn(['last_login', 'permissions']); <nl> }); <nl> } <nl> } <nl> ", "msg": "Fixed removal method. This can be done through dbal."}
{"diff_id": 6351, "repo": "orchidsoftware/platform", "sha": "220f1a691c370e80660d562c77c5ef4cb1b25a9d", "time": "04.06.2021 15:39:46", "diff": "mmm a / resources/views/dummy/block.blade.php <nl> ppp b / resources/views/dummy/block.blade.php <nl><div class=\"rounded bg-white mb-3 p-3\"> <nl> - <div class=\"border-dashed d-flex align-items-center w-100 rounded\" style=\"min-height: 250px;\"> <nl> + <div class=\"border-dashed d-flex align-items-center w-100 rounded overflow-hidden\" style=\"min-height: 250px;\"> <nl> <h2 class=\"text-muted center fw-light\">Dummy <small class=\"d-block text-center\">{{ Str::random(8) }}</small></h2> <nl> </div> <nl> </div> <nl> ", "msg": "Added overflow-hidden for dummy block"}
{"diff_id": 6371, "repo": "orchidsoftware/platform", "sha": "6688344d0aaaf44d3f41fb90c304dc5ff5d3b204", "time": "22.10.2021 03:23:04", "diff": "mmm a / routes/systems.php <nl> ppp b / routes/systems.php <nl>@@ -18,9 +18,6 @@ Route::post('files/sort', [AttachmentController::class, 'sort']) <nl> Route::delete('files/{id}', [AttachmentController::class, 'destroy']) <nl> ->name('systems.files.destroy'); <nl> -Route::post('files/get', [AttachmentController::class, 'getFilesByIds']) <nl> - ->name('systems.files.getFilesByIds'); <nl> - <nl> Route::put('files/post/{id}', [AttachmentController::class, 'update']) <nl> ->name('systems.files.update'); <nl> ", "msg": "refs Remove unusage route"}
{"diff_id": 6383, "repo": "orchidsoftware/platform", "sha": "d858b14fa580d775d6407045ee497bec4194f65b", "time": "20.01.2022 13:21:09", "diff": "mmm a / resources/views/fields/radiobutton.blade.php <nl> ppp b / resources/views/fields/radiobutton.blade.php <nl><label class=\"btn btn-default @if($active($key, $value)) active @endif\" <nl> data-action=\"click->radiobutton#checked\" <nl> > <nl> - <input {{ $attributes }} <nl> + <input {{ $attributes->except('id') }} <nl> @if($active($key, $value)) checked @endif <nl> - value=\"{{ $key }}\" <nl> + value=\"{{ $key }}\" id=\"{{ $key }}-{{$id}}\" <nl> >{{ $option }}</label> <nl> @endforeach <nl> </div> <nl> ", "msg": "Solve Radio buttons id duplicated"}
{"diff_id": 6385, "repo": "orchidsoftware/platform", "sha": "8fd7a80440e25b8b67ecf3c58e4e0e3d16d06b6d", "time": "26.01.2022 12:31:43", "diff": "mmm a / resources/views/layouts/modal.blade.php <nl> ppp b / resources/views/layouts/modal.blade.php <nl>data-form-button-text=\"{{ __('Loading...') }}\" <nl> > <nl> <div class=\"modal-header\"> <nl> - <h4 class=\"modal-title text-black fw-light\" data-target=\"modal.title\">{{$title}}</h4> <nl> + <h4 class=\"modal-title text-black fw-light\" data-modal-target=\"title\">{{$title}}</h4> <nl> <button type=\"button\" class=\"btn-close\" title=\"Close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"> <nl> </button> <nl> </div> <nl> ", "msg": "data-target attribute is deprecated\nThis notification will appear when you open the modal:\nPlease replace data-target=\"modal.title\" with data-modal-target=\"title\". The data-target attribute is deprecated and will be removed in a future version of Stimulus."}
{"diff_id": 6398, "repo": "orchidsoftware/platform", "sha": "6fc618c5a46e51255e44dee016816a88658d04a7", "time": "05.03.2022 19:07:43", "diff": "mmm a / resources/views/partials/welcome.blade.php <nl> ppp b / resources/views/partials/welcome.blade.php <nl></div> <nl> </div> <nl> - <div class=\"row bg-light m-0 p-4 border-top rounded-bottom\"> <nl> + <div class=\"row bg-light m-0 p-md-4 p-3 border-top rounded-bottom\"> <nl> <div class=\"col-md-6 my-2\"> <nl> <h3 class=\"text-muted fw-light\"> <nl> ", "msg": "Better welcome paddings"}
{"diff_id": 6424, "repo": "orchidsoftware/platform", "sha": "0587fdd89065841f3c598936e267bea741439a2e", "time": "11.09.2022 03:15:22", "diff": "mmm a / src/Filters/Filterable.php <nl> ppp b / src/Filters/Filterable.php <nl>@@ -33,16 +33,14 @@ trait Filterable <nl> * Apply the filter to the given selection. <nl> * <nl> * @param Builder $query <nl> - * @param string|Selection $selection <nl> - * <nl> - * @throws \\Illuminate\\Contracts\\Container\\BindingResolutionException <nl> + * @param string|Selection $class <nl> * <nl> * @return Builder <nl> */ <nl> - public function scopeFiltersApplySelection(Builder $query, $selection): Builder <nl> + public function scopeFiltersApplySelection(Builder $query, $class): Builder <nl> { <nl> /** @var Selection $selection */ <nl> - $selection = is_object($selection) ? $selection : resolve($selection); <nl> + $selection = is_object($class) ? $class : resolve($class); <nl> $filters = $selection->filters(); <nl> @@ -66,8 +64,8 @@ trait Filterable <nl> } <nl> return is_iterable($kit) <nl> - ? $this->filtersApply($kit) <nl> - : $this->filtersApplySelection($kit); <nl> + ? $this->scopeFiltersApply($builder, $kit) <nl> + : $this->scopeFiltersApplySelection($builder, $kit); <nl> } <nl> /** <nl> ", "msg": "refs Fixed using filters with parameters"}
{"diff_id": 6426, "repo": "orchidsoftware/platform", "sha": "9ed285bc1260f2613a4bc34e85384e2f7353a3e9", "time": "11.09.2022 03:57:08", "diff": "mmm a / stubs/app/Orchid/Screens/Examples/ExampleScreen.php <nl> ppp b / stubs/app/Orchid/Screens/Examples/ExampleScreen.php <nl>@@ -169,9 +169,9 @@ class ExampleScreen extends Screen <nl> ->width('150') <nl> ->render(function (Repository $model) { <nl> // Please use view('path') <nl> - return \"<img src='https://picsum.photos/450/200?random={$model->get('id')}' <nl> + return \"<img src='https://loremflickr.com/500/300?random={$model->get('id')}' <nl> alt='sample' <nl> - class='mw-100 d-block img-fluid'> <nl> + class='mw-100 d-block img-fluid rounded-1 w-100'> <nl> <span class='small text-muted mt-1 mb-0'># {$model->get('id')}</span>\"; <nl> }), <nl> ", "msg": "Replaced picsum.photos to loremflickr.com due to inaccessibility for some users"}
{"diff_id": 6449, "repo": "discord-php/discordphp", "sha": "27e19cc4389b0992621bb9ee0756a87a2f96594c", "time": "15.08.2020 08:27:05", "diff": "mmm a / src/Discord/Parts/User/Member.php <nl> ppp b / src/Discord/Parts/User/Member.php <nl>@@ -55,6 +55,7 @@ class Member extends Part <nl> /** <nl> * Updates the member from a new presence update object. <nl> + * This is an internal function and is not meant to be used by a public application. <nl> * <nl> * @param PresenceUpdate $presence <nl> * <nl> ", "msg": "Added disclaimer to update presence function"}
{"diff_id": 6450, "repo": "discord-php/discordphp", "sha": "4aba97fdf83ed590496405aed9f94d7ce7377cb3", "time": "15.08.2020 08:40:12", "diff": "mmm a / src/Discord/Discord.php <nl> ppp b / src/Discord/Discord.php <nl>@@ -992,22 +992,32 @@ class Discord <nl> /** <nl> * Updates the clients presence. <nl> * <nl> - * @param Activity $game The game object. <nl> - * @param bool $idle Whether we are idle. <nl> - */ <nl> - public function updatePresence(Activity $game = null, $idle = false) <nl> + * @param Activity $activity The current client activity, or null. <nl> + * @param bool $idle Whether the client is idle. <nl> + * @param string $status The current status of the client. <nl> + * Must be one of the following: <nl> + * online, dnd, idle, invisible, offline <nl> + * @param bool $afk Whether the client is AFK. <nl> + */ <nl> + public function updatePresence(Activity $activity = null, $idle = false, $status = 'online', $afk = false) <nl> { <nl> - $idle = ($idle) ? $idle : null; <nl> + $idle = $idle ? time() * 1000 : null; <nl> + <nl> + if (! is_null($activity)) { <nl> + $activity = $activity->getRawAttributes(); <nl> + } <nl> - if (! is_null($game)) { <nl> - $game = $game->getPublicAttributes(); <nl> + if (! array_search($status, ['online', 'dnd', 'idle', 'invisible', 'offline'])) { <nl> + $status = 'online'; <nl> } <nl> $payload = [ <nl> 'op' => Op::OP_PRESENCE_UPDATE, <nl> 'd' => [ <nl> - 'game' => $game, <nl> - 'idle_since' => $idle, <nl> + 'since' => $idle, <nl> + 'game' => $activity, <nl> + 'status' => $status, <nl> + 'afk' => $afk <nl> ], <nl> ]; <nl> ", "msg": "Updated presence update function"}
{"diff_id": 6451, "repo": "discord-php/discordphp", "sha": "6f63a50bb49c815f14657a24d00fc83f49ca2037", "time": "16.08.2020 03:10:20", "diff": "mmm a / src/Discord/Parts/Guild/Role.php <nl> ppp b / src/Discord/Parts/Guild/Role.php <nl>@@ -119,6 +119,7 @@ class Role extends Part <nl> 'hoist' => $this->hoist, <nl> 'color' => $this->color, <nl> 'permissions' => $this->permissions->bitwise, <nl> + 'mentionable' => $this->mentionable, <nl> ]; <nl> } <nl> ", "msg": "Allow roles to update mentionability, close"}
{"diff_id": 6515, "repo": "discord-php/discordphp", "sha": "31ece335307c49d81fc4b1c7825fb39bc9e309b5", "time": "20.09.2020 15:11:30", "diff": "mmm a / src/Discord/Parts/User/Member.php <nl> ppp b / src/Discord/Parts/User/Member.php <nl>@@ -175,24 +175,22 @@ class Member extends Part <nl> public function addRole($role) <nl> { <nl> $deferred = new Deferred(); <nl> + <nl> if ($role instanceof Role) { <nl> $role = $role->id; <nl> } <nl> // We don't want a double up on roles <nl> if (false !== array_search($role, (array) $this->attributes['roles'])) { <nl> - $deferred->reject(); <nl> - return $deferred->promise(); <nl> - } <nl> - <nl> - $this->attributes['roles'][] = $role; <nl> - <nl> - <nl> + $deferred->reject(new \\Exception('User already has role.')); <nl> + } else { <nl> $this->http->put( <nl> \"guilds/{$this->guild_id}/members/{$this->id}/roles/{$role}\" <nl> - )->then(function ($resp) use ($deferred) { <nl> - $deferred->resolve($resp); <nl> + )->then(function () use ($role, $deferred) { <nl> + $this->attributes['roles'][] = $role; <nl> + $deferred->resolve(); <nl> }, \\React\\Partial\\bind([$deferred, 'reject'])); <nl> + } <nl> return $deferred->promise(); <nl> } <nl> @@ -213,19 +211,16 @@ class Member extends Part <nl> } <nl> if (false !== ($index = array_search($role, $this->attributes['roles']))) { <nl> - unset($this->attributes['roles'][$index]); <nl> - <nl> - <nl> $this->http->delete( <nl> \"guilds/{$this->guild_id}/members/{$this->id}/roles/{$role}\" <nl> - )->then(function ($resp) use ($deferred) { <nl> - $deferred->resolve($resp); <nl> + )->then(function () use ($index, $deferred) { <nl> + unset($this->attributes['roles'][$index]); <nl> + $deferred->resolve(); <nl> }, \\React\\Partial\\bind([$deferred, 'reject'])); <nl> - // At the moment we are unable to check if the member <nl> - // was moved successfully. <nl> - return $deferred->promise(); <nl> + } else { <nl> + $deferred->reject(new \\Exception('User does not have role.')); <nl> } <nl> - $deferred->reject(); <nl> + <nl> return $deferred->promise(); <nl> } <nl> ", "msg": "Tidied up adding and removing roles, now returns promise and rejects with exception."}
{"diff_id": 6535, "repo": "discord-php/discordphp", "sha": "2e92a8c2093664bbb075890f212de5e183e55460", "time": "10.10.2020 19:12:23", "diff": "mmm a / src/Discord/Discord.php <nl> ppp b / src/Discord/Discord.php <nl>@@ -733,7 +733,7 @@ class Discord <nl> $this->logger->warning('received opcode 7 for reconnect'); <nl> $this->ws->close( <nl> - Op::CLOSE_NORMAL, <nl> + Op::CLOSE_UNKNOWN_ERROR, <nl> 'gateway redirecting - opcode 7' <nl> ); <nl> } <nl> @@ -745,9 +745,11 @@ class Discord <nl> */ <nl> protected function handleInvalidSession(object $data): void <nl> { <nl> - $this->logger->warning('invalid session, re-identifying'); <nl> + $this->logger->warning('invalid session, re-identifying', ['resumable' => $data->d]); <nl> - $this->identify(false); <nl> + $this->loop->addTimer(2, function () use ($data) { <nl> + $this->identify($data->d); <nl> + }); <nl> } <nl> /** <nl> @@ -941,6 +943,7 @@ class Discord <nl> */ <nl> protected function send(array $data): void <nl> { <nl> + dump($data); <nl> $json = json_encode($data); <nl> $this->ws->send($json); <nl> @@ -1271,7 +1274,7 @@ class Discord <nl> public function close(bool $closeLoop = true): void <nl> { <nl> $this->closing = true; <nl> - $this->ws->close(1000, 'discordphp closing...'); <nl> + $this->ws->close(Op::CLOSE_UNKNOWN_ERROR, 'discordphp closing...'); <nl> $this->emit('closed', [$this]); <nl> $this->logger->info('discord closed'); <nl> ", "msg": "Websocket now closes with non-1000 close code to enable resuming"}
{"diff_id": 6538, "repo": "discord-php/discordphp", "sha": "8410c57a23b8a7cb230d9730b893106c8f2b4f27", "time": "12.10.2020 11:07:37", "diff": "mmm a / src/Discord/Discord.php <nl> ppp b / src/Discord/Discord.php <nl>@@ -956,7 +956,13 @@ class Discord <nl> } <nl> $this->logger->info('client is ready'); <nl> + <nl> + try { <nl> $this->emit('ready', [$this]); <nl> + } catch (\\Throwable $e) { <nl> + $this->emit('exception', [$e, $this]); <nl> + $this->logger->error('exception caught in ready callback', ['type' => get_class($e), 'message' => $e->getMessage()]); <nl> + } <nl> foreach ($this->unparsedPackets as $parser) { <nl> $parser(); <nl> ", "msg": "Added try/catch around ready event,\nException is logged with `error` level\nException is emitted with `exception` event"}
{"diff_id": 6562, "repo": "discord-php/discordphp", "sha": "f535642ffa5f27de17cd675bdad80dd846c8af4f", "time": "24.10.2020 00:08:05", "diff": "mmm a / src/Discord/Discord.php <nl> ppp b / src/Discord/Discord.php <nl>@@ -295,7 +295,7 @@ class Discord <nl> * <nl> * @array HTML Color Table. <nl> */ <nl> - protected $colorTable = [ <nl> + public $colorTable = [ <nl> 'indianred' => 'cd5c5c', 'lightcoral' => 'f08080', 'salmon' => 'fa8072', 'darksalmon' => 'e9967a', <nl> 'lightsalmon' => 'ffa07a', 'crimson' => 'dc143c', 'red' => 'ff0000', 'firebrick' => 'b22222', <nl> 'darkred' => '8b0000', 'pink' => 'ffc0cb', 'lightpink' => 'ffb6c1', 'hotpink' => 'ff69b4', <nl> ", "msg": "make colorTable public so users can insert their custom colors"}
{"diff_id": 6571, "repo": "discord-php/discordphp", "sha": "30d02a23257131d0de0f49c087412e09ac71f935", "time": "27.10.2020 10:23:36", "diff": "mmm a / src/Discord/Discord.php <nl> ppp b / src/Discord/Discord.php <nl>@@ -493,9 +493,7 @@ class Discord <nl> $this->logger->debug('parsed '.$count.' members (skipped '.$skipped.')', ['repository_count' => $guild->members->count(), 'actual_count' => $guild->member_count]); <nl> if ($guild->members->count() >= $guild->member_count) { <nl> - if (($key = array_search($guild->id, $this->largeSent)) !== false) { <nl> - unset($this->largeSent[$key]); <nl> - } <nl> + $this->largeSent = array_diff($this->largeSent, [$guild->id]); <nl> $this->logger->debug('all users have been loaded', ['guild' => $guild->id, 'member_collection' => $guild->members->count(), 'member_count' => $guild->member_count]); <nl> $this->guilds->offsetSet($guild->id, $guild); <nl> @@ -869,6 +867,11 @@ class Discord <nl> return; <nl> } <nl> + if (count($this->largeGuilds) < 1) { <nl> + $this->logger->debug('unprocessed chunks', $this->largeSent); <nl> + return; <nl> + } <nl> + <nl> $chunks = array_chunk($this->largeGuilds, 50); <nl> $this->logger->debug('sending '.count($chunks).' chunks with '.count($this->largeGuilds).' large guilds overall'); <nl> $this->largeSent = array_merge($this->largeGuilds, $this->largeSent); <nl> @@ -883,16 +886,18 @@ class Discord <nl> $this->logger->debug('sending chunk with '.count($chunk).' large guilds'); <nl> + foreach ($chunk as $guild_id) { <nl> $payload = [ <nl> 'op' => Op::OP_GUILD_MEMBER_CHUNK, <nl> 'd' => [ <nl> - 'guild_id' => $chunk, <nl> + 'guild_id' => $guild_id, <nl> 'query' => '', <nl> 'limit' => 0, <nl> ], <nl> ]; <nl> $this->send($payload); <nl> + } <nl> $this->loop->addTimer(1, $sendChunks); <nl> }; <nl> ", "msg": "changed chunking to send one guild at a time, since we use intents, discord might no longer accept an array"}
{"diff_id": 6573, "repo": "discord-php/discordphp", "sha": "b58057cc4ade0c48ed25665e87afac30b1e58461", "time": "27.10.2020 19:53:24", "diff": "mmm a / src/Discord/Discord.php <nl> ppp b / src/Discord/Discord.php <nl>@@ -860,7 +860,7 @@ class Discord <nl> 'd' => $this->seq, <nl> ]; <nl> - $this->send($payload); <nl> + $this->send($payload, true); <nl> $this->heartbeatTime = microtime(true); <nl> $this->emit('heartbeat', [$this->seq, $this]); <nl> @@ -986,10 +986,11 @@ class Discord <nl> * <nl> * @param array $data Packet data. <nl> */ <nl> - protected function send(array $data): void <nl> + protected function send(array $data, bool $force = false): void <nl> { <nl> // Wait until payload count has been reset <nl> - if ($this->payloadCount >= 120) { <nl> + // Keep 5 payloads for heartbeats as required <nl> + if ($this->payloadCount >= 115 && ! $force) { <nl> $this->logger->debug('payload not sent, waiting', ['payload' => $data]); <nl> $this->once('payload_count_reset', function () use ($data) { <nl> $this->send($data); <nl> ", "msg": "Keep a 5 payload buffer for any heartbeats that may need to go through"}
{"diff_id": 6598, "repo": "discord-php/discordphp", "sha": "59283c443bc078bd088ac3f59aa5899c17694fb2", "time": "15.11.2020 19:25:59", "diff": "mmm a / src/Discord/WebSockets/Events/GuildDelete.php <nl> ppp b / src/Discord/WebSockets/Events/GuildDelete.php <nl>@@ -22,10 +22,14 @@ class GuildDelete extends Event <nl> */ <nl> public function handle(Deferred &$deferred, $data): void <nl> { <nl> + $guild = $this->discord->guilds->get('id', $data->id); <nl> + <nl> + if (! $guild) { <nl> $guild = $this->factory->create(Guild::class, $data, true); <nl> + } <nl> $this->discord->guilds->pull($guild->id); <nl> - $deferred->resolve($guild); <nl> + $deferred->resolve([$guild, $data->unavailable ?? false]); <nl> } <nl> } <nl> ", "msg": "Guild delete will now provide a guild object and the unavailable value"}
{"diff_id": 6600, "repo": "discord-php/discordphp", "sha": "cba343b0b703a7ebf266c56bbdc135bb962cddba", "time": "16.11.2020 16:03:52", "diff": "mmm a / src/Discord/Repository/AbstractRepository.php <nl> ppp b / src/Discord/Repository/AbstractRepository.php <nl>@@ -283,7 +283,7 @@ abstract class AbstractRepository extends Collection <nl> str_replace(':id', $id, $this->endpoints['get']) <nl> ) <nl> )->done(function ($response) use ($deferred) { <nl> - $part = $this->factory->create($this->class, $response, true); <nl> + $part = $this->factory->create($this->class, array_merge($this->vars, (array) $response), true); <nl> $deferred->resolve($part); <nl> }, function ($e) use ($deferred) { <nl> ", "msg": "When fetching from repository, merge response with repository attributes"}
{"diff_id": 6611, "repo": "discord-php/discordphp", "sha": "4ea114cf9652dba0adf0f4568b9f35ba50ae88cf", "time": "23.11.2020 14:53:33", "diff": "mmm a / src/Discord/Parts/Channel/Channel.php <nl> ppp b / src/Discord/Parts/Channel/Channel.php <nl>@@ -453,31 +453,24 @@ class Channel extends Part <nl> */ <nl> public function deleteMessages($messages): ExtendedPromiseInterface <nl> { <nl> - $deferred = new Deferred(); <nl> - <nl> if (! is_array($messages) && <nl> ! ($messages instanceof Traversable) <nl> ) { <nl> - $deferred->reject(new \\Exception('$messages must be an array or implement Traversable.')); <nl> - <nl> - return $deferred->promise(); <nl> + return Reject(new \\Exception('$messages must be an array or implement Traversable.')); <nl> } <nl> $count = count($messages); <nl> if ($count == 0) { <nl> - $deferred->resolve(); <nl> + return \\React\\Promise\\resolve(); <nl> } elseif ($count == 1 || $this->is_private) { <nl> foreach ($messages as $message) { <nl> if ($message instanceof Message || <nl> $message = $this->messages->get('id', $message) <nl> ) { <nl> - $message->delete(); <nl> + return $message->delete(); <nl> } else { <nl> - $this->http->delete(\"channels/{$this->id}/messages/{$message}\")->done( <nl> - Bind([$deferred, 'resolve']), <nl> - Bind([$deferred, 'reject']) <nl> - ); <nl> + return $this->http->delete(\"channels/{$this->id}/messages/{$message}\"); <nl> } <nl> } <nl> } else { <nl> @@ -491,21 +484,15 @@ class Channel extends Part <nl> } <nl> } <nl> + $promises = []; <nl> + <nl> while (! empty($messageID)) { <nl> - $this->http->post( <nl> - \"channels/{$this->id}/messages/bulk_delete\", <nl> - [ <nl> - 'messages' => array_slice($messageID, 0, 100), <nl> - ] <nl> - )->done( <nl> - Bind([$deferred, 'resolve']), <nl> - Bind([$deferred, 'reject']) <nl> - ); <nl> + $promises[] = $this->http->post(\"channels/{$this->id}/messages/bulk_delete\", ['messages' => array_slice($messageID, 0, 100)]); <nl> $messageID = array_slice($messageID, 100); <nl> } <nl> - } <nl> - return $deferred->promise(); <nl> + return \\React\\Promise\\all($promises); <nl> + } <nl> } <nl> /** <nl> ", "msg": "Channel: fix `deleteMessages` resolving before all messages have been deleted"}
{"diff_id": 6621, "repo": "discord-php/discordphp", "sha": "db7fe72b02bfad427e743aaf38a8d0fa71d0ad8d", "time": "29.11.2020 09:58:09", "diff": "mmm a / src/Discord/Parts/Channel/Channel.php <nl> ppp b / src/Discord/Parts/Channel/Channel.php <nl>@@ -683,11 +683,12 @@ class Channel extends Part <nl> * @param string $text The text to send in the message. <nl> * @param bool $tts Whether the message should be sent with text to speech enabled. <nl> * @param Embed|array|null $embed An embed to send. <nl> + * @param array|null $allowed_mentions Set mentions allowed in the message. <nl> * <nl> * @return ExtendedPromiseInterface <nl> * @throws \\Exception <nl> */ <nl> - public function sendMessage(string $text, bool $tts = false, $embed = null): ExtendedPromiseInterface <nl> + public function sendMessage(string $text, bool $tts = false, $embed = null, $allowed_mentions = null): ExtendedPromiseInterface <nl> { <nl> if ($embed instanceof Embed) { <nl> $embed = $embed->getRawAttributes(); <nl> @@ -706,6 +707,7 @@ class Channel extends Part <nl> 'content' => $text, <nl> 'tts' => $tts, <nl> 'embed' => $embed, <nl> + 'allowed_mentions' => $allowed_mentions, <nl> ] <nl> )->done( <nl> function ($response) use ($deferred) { <nl> ", "msg": "add allowed_mentions support to Channel::sendMessage\nsee on how to utilize"}
{"diff_id": 6627, "repo": "discord-php/discordphp", "sha": "7e40ad8255c520885c7868022b948d96340ccdeb", "time": "03.12.2020 07:38:10", "diff": "mmm a / src/Discord/Discord.php <nl> ppp b / src/Discord/Discord.php <nl>@@ -886,7 +886,7 @@ class Discord <nl> */ <nl> protected function setupChunking() <nl> { <nl> - if (! $this->options['loadAllMembers']) { <nl> + if ($this->options['loadAllMembers'] === false) { <nl> $this->logger->info('loadAllMembers option is disabled, not setting chunking up'); <nl> return $this->ready(); <nl> @@ -905,6 +905,15 @@ class Discord <nl> return; <nl> } <nl> + if (is_array($this->options['loadAllMembers'])) { <nl> + foreach ($this->largeGuilds as $key => $guild) { <nl> + if (array_search($guild, $this->options['loadAllMembers']) === false) { <nl> + $this->logger->debug('not fetching members for guild ID '.$guild); <nl> + unset($this->largeGuilds[$key]); <nl> + } <nl> + } <nl> + } <nl> + <nl> $chunks = array_chunk($this->largeGuilds, 50); <nl> $this->logger->debug('sending '.count($chunks).' chunks with '.count($this->largeGuilds).' large guilds overall'); <nl> $this->largeSent = array_merge($this->largeGuilds, $this->largeSent); <nl> @@ -1283,7 +1292,7 @@ class Discord <nl> ]) <nl> ->setAllowedTypes('loop', LoopInterface::class) <nl> ->setAllowedTypes('logging', 'bool') <nl> - ->setAllowedTypes('loadAllMembers', 'bool') <nl> + ->setAllowedTypes('loadAllMembers', ['bool', 'array']) <nl> ->setAllowedTypes('disabledEvents', 'array') <nl> ->setAllowedTypes('pmChannels', 'bool') <nl> ->setAllowedTypes('storeMessages', 'bool') <nl> ", "msg": "Discord: added option to give  an array of guilds to fetch members"}
{"diff_id": 6630, "repo": "discord-php/discordphp", "sha": "4177838d6b9f39cb8c61f5c43878a48d155e50b6", "time": "13.12.2020 00:23:57", "diff": "mmm a / src/Discord/Parts/Channel/Message.php <nl> ppp b / src/Discord/Parts/Channel/Message.php <nl>@@ -37,6 +37,7 @@ use function React\\Partial\\bind as Bind; <nl> * @property int $type The type of message. <nl> * @property Collection|User[] $mentions A collection of the users mentioned in the message. <nl> * @property Member|User $author The author of the message. <nl> + * @property string $user_id The user id of the author. <nl> * @property bool $mention_everyone Whether the message contained an @everyone mention. <nl> * @property Carbon $timestamp A timestamp of when the message was sent. <nl> * @property Carbon|null $edited_timestamp A timestamp of when the message was edited, or null. <nl> @@ -272,6 +273,16 @@ class Message extends Part <nl> return $users; <nl> } <nl> + /** <nl> + * Returns the `user_id` attribute. <nl> + * <nl> + * @return string <nl> + */ <nl> + protected function getUserIdAttribute(): ?string <nl> + { <nl> + return $this->attributes['author']->id ?? null; <nl> + } <nl> + <nl> /** <nl> * Returns the author attribute. <nl> * <nl> ", "msg": "Message: added user_id attribute as a shortcut for author->id"}
{"diff_id": 6631, "repo": "discord-php/discordphp", "sha": "2eac982dcff32be979a7eeb691f6e3cc9a3b457d", "time": "12.12.2020 23:39:32", "diff": "mmm a / src/Discord/Helpers/Collection.php <nl> ppp b / src/Discord/Helpers/Collection.php <nl>@@ -73,6 +73,19 @@ class Collection implements ArrayAccess, Serializable, JsonSerializable, Iterato <nl> return new static($items, $discrim, $class); <nl> } <nl> + /** <nl> + * Creates a collection for a class. <nl> + * <nl> + * @param string $class <nl> + * @param string $discrim <nl> + * <nl> + * @return Collection <nl> + */ <nl> + public static function for(string $class, ?string $discrim = 'id') <nl> + { <nl> + return new static([], $discrim, $class); <nl> + } <nl> + <nl> /** <nl> * Gets an item from the collection. <nl> * <nl> ", "msg": "Collection: added Collection::for to create a collection for a class"}
{"diff_id": 6635, "repo": "discord-php/discordphp", "sha": "fd06c0ccf1c1d20a5fec186813517729ba01eabe", "time": "22.12.2020 18:58:21", "diff": "mmm a / src/Discord/Parts/Channel/Channel.php <nl> ppp b / src/Discord/Parts/Channel/Channel.php <nl>@@ -920,24 +920,6 @@ class Channel extends Part <nl> return $deferred->promise(); <nl> } <nl> - /** <nl> - * Returns the channel type. <nl> - * <nl> - * @return string Either 'text' or 'voice'. <nl> - */ <nl> - public function getChannelType(): string <nl> - { <nl> - switch ($this->type) { <nl> - case self::TYPE_TEXT: <nl> - case self::TYPE_VOICE: <nl> - return $this->type; <nl> - break; <nl> - default: <nl> - return self::TYPE_TEXT; <nl> - break; <nl> - } <nl> - } <nl> - <nl> /** <nl> * Returns if allow text. <nl> * <nl> @@ -965,7 +947,7 @@ class Channel extends Part <nl> { <nl> return [ <nl> 'name' => $this->name, <nl> - 'type' => $this->getChannelType(), <nl> + 'type' => $this->type, <nl> 'bitrate' => $this->bitrate, <nl> 'permission_overwrites' => $this->permission_overwrites, <nl> 'topic' => $this->topic, <nl> ", "msg": "Channel: fixed creating channels other than text and voice"}
{"diff_id": 6645, "repo": "discord-php/discordphp", "sha": "071114c818dace5bdffb49522e0a1da1b9b72f0b", "time": "02.01.2021 12:31:16", "diff": "mmm a / src/Discord/CommandClient/Command.php <nl> ppp b / src/Discord/CommandClient/Command.php <nl>@@ -228,7 +228,7 @@ class Command <nl> */ <nl> public function handle(Message $message, array $args) <nl> { <nl> - $subCommand = array_shift($args); <nl> + $subCommand = $originalSubCommand = array_shift($args); <nl> if ($subCommand !== null && $this->client->getCommandClientOptions()['caseInsensitiveCommands']) { <nl> $subCommand = strtolower($subCommand); <nl> @@ -241,7 +241,7 @@ class Command <nl> } <nl> if (! is_null($subCommand)) { <nl> - array_unshift($args, $subCommand); <nl> + array_unshift($args, $originalSubCommand); <nl> } <nl> $currentTime = round(microtime(true) * 1000); <nl> ", "msg": "Don't re-add it to the arguments as lowercase if case sensitive option is set"}
{"diff_id": 6667, "repo": "discord-php/discordphp", "sha": "ca1d03d97c3d1323743f1f75189ca87c4b86a97e", "time": "03.03.2021 21:42:15", "diff": "mmm a / src/Discord/WebSockets/Events/VoiceStateUpdate.php <nl> ppp b / src/Discord/WebSockets/Events/VoiceStateUpdate.php <nl>namespace Discord\\WebSockets\\Events; <nl> -use Discord\\Parts\\Channel\\Channel; <nl> use Discord\\Parts\\WebSockets\\VoiceStateUpdate as VoiceStateUpdatePart; <nl> use Discord\\WebSockets\\Event; <nl> use Discord\\Helpers\\Deferred; <nl> @@ -24,6 +23,7 @@ class VoiceStateUpdate extends Event <nl> public function handle(Deferred &$deferred, $data): void <nl> { <nl> $state = $this->factory->create(VoiceStateUpdatePart::class, $data, true); <nl> + $old_state = null; <nl> if ($state->guild) { <nl> $guild = $state->guild; <nl> @@ -35,6 +35,7 @@ class VoiceStateUpdate extends Event <nl> // Remove old member states <nl> if ($channel->members->has($state->user_id)) { <nl> + $old_state = $channel->members->offsetGet($state->user_id); <nl> $channel->members->offsetUnset($state->user_id); <nl> } <nl> @@ -49,6 +50,6 @@ class VoiceStateUpdate extends Event <nl> $this->discord->guilds->offsetSet($state->guild->id, $state->guild); <nl> } <nl> - $deferred->resolve($state); <nl> + $deferred->resolve([$state, $old_state]); <nl> } <nl> } <nl> ", "msg": "when voice state is updated, return old state"}
{"diff_id": 6695, "repo": "discord-php/discordphp", "sha": "ef0dd84c644da17d1b536a0d6fe5177295c6ab3e", "time": "23.06.2021 20:19:59", "diff": "mmm a / src/Discord/Parts/Channel/Channel.php <nl> ppp b / src/Discord/Parts/Channel/Channel.php <nl>@@ -80,6 +80,9 @@ class Channel extends Part <nl> public const TYPE_CATEGORY = 4; <nl> public const TYPE_NEWS = 5; <nl> public const TYPE_GAME_STORE = 6; <nl> + public const TYPE_NEWS_THREAD = 10; <nl> + public const TYPE_PUBLIC_THREAD = 11; <nl> + public const TYPE_PRIVATE_THREAD = 12; <nl> public const TYPE_STAGE_CHANNEL = 13; <nl> /** <nl> @@ -681,28 +684,25 @@ class Channel extends Part <nl> * Starts a thread in the channel. <nl> * <nl> * @param string $name the name of the thread. <nl> - * @param string $content content of the message that will be used to start the thread. <nl> + * @param bool $private whether the thread should be private. cannot start a private thread in a news channel. <nl> * @param int $auto_archive_duration number of minutes of inactivity until the thread is auto-archived. one of 60, 1440, 4320, 10080. <nl> * <nl> * @return ExtendedPromiseInterface<Thread> <nl> */ <nl> - public function startThread(string $name, string $content, int $auto_archive_duration = 1440): ExtendedPromiseInterface <nl> + public function startThread(string $name, bool $private = false, int $auto_archive_duration = 1440): ExtendedPromiseInterface <nl> { <nl> - return $this->sendMessage($content)->then(function (Message $message) use ($name, $auto_archive_duration) { <nl> - return $message->startThread($name, $auto_archive_duration); <nl> - }); <nl> + if ($this->type == Channel::TYPE_NEWS) { <nl> + if ($private) { <nl> + throw new InvalidArgumentException('You cannot start a private thread within a news channel.'); <nl> + } <nl> + <nl> + $type = Channel::TYPE_NEWS_THREAD; <nl> + } elseif ($this->type == Channel::TYPE_TEXT) { <nl> + $type = $private ? Channel::TYPE_PRIVATE_THREAD : Channel::TYPE_PUBLIC_THREAD; <nl> + } else { <nl> + throw new InvalidArgumentException('You cannot start a thread in this type of channel.'); <nl> } <nl> - /** <nl> - * Starts a private thread in the channel. <nl> - * <nl> - * @param string $name the name of the thread. <nl> - * @param int $auto_archive_duration number of minutes of inactivity until the thread is auto-archived. one of 60, 1440, 4320, 10080. <nl> - * <nl> - * @return ExtendedPromiseInterface<Thread> <nl> - */ <nl> - public function startPrivateThread(string $name, int $auto_archive_duration = 1440): ExtendedPromiseInterface <nl> - { <nl> if (! in_array($auto_archive_duration, [60, 1440, 4320, 10080])) { <nl> throw new InvalidArgumentException('`auto_archive_duration` must be one of 60, 1440, 4320, 10080.'); <nl> } <nl> @@ -710,6 +710,7 @@ class Channel extends Part <nl> return $this->http->post(Endpoint::bind(Endpoint::CHANNEL_THREADS, $this->id), [ <nl> 'name' => $name, <nl> 'auto_archive_duration' => $auto_archive_duration, <nl> + 'type' => $type, <nl> ])->then(function ($response) { <nl> return $this->factory->create(Thread::class, $response, true); <nl> }); <nl> ", "msg": "Add ability to start thread without message"}
{"diff_id": 6715, "repo": "discord-php/discordphp", "sha": "9b15ccdaa159b40248a940104e35168c37fbe2d7", "time": "05.10.2021 10:25:51", "diff": "mmm a / src/Discord/Parts/User/User.php <nl> ppp b / src/Discord/Parts/User/User.php <nl>@@ -29,6 +29,9 @@ use React\\Promise\\ExtendedPromiseInterface; <nl> * @property bool $bot Whether the user is a bot. <nl> * @property bool $system Whether the user is a Discord system user. <nl> * @property bool $mfa_enabled Whether MFA is enabled. <nl> + * @property string $banner The banner URL of the user. <nl> + * @property string $banner_hash The banner hash of the user. <nl> + * @property int $accent_color The user's banner color encoded as an integer representation of hexadecimal color code. <nl> * @property string $locale User locale. <nl> * @property bool $verified Whether the user is verified. <nl> * @property string $email User email. <nl> @@ -63,7 +66,7 @@ class User extends Part <nl> /** <nl> * @inheritdoc <nl> */ <nl> - protected $fillable = ['id', 'username', 'avatar', 'discriminator', 'bot', 'system', 'mfa_enabled', 'locale', 'verified', 'email', 'flags', 'premium_type', 'public_flags']; <nl> + protected $fillable = ['id', 'username', 'avatar', 'discriminator', 'bot', 'system', 'mfa_enabled', 'banner', 'accent_color', 'locale', 'verified', 'email', 'flags', 'premium_type', 'public_flags']; <nl> /** <nl> * Gets the private channel for the user. <nl> @@ -134,7 +137,7 @@ class User extends Part <nl> return \"https://cdn.discordapp.com/embed/avatars/{$avatarDiscrim}.png?size={$size}\"; <nl> } <nl> - if (false === array_search($format, ['png', 'jpg', 'webp'])) { <nl> + if (false === array_search($format, ['png', 'jpg', 'webp', 'gif'])) { <nl> $format = 'jpg'; <nl> } <nl> @@ -151,6 +154,37 @@ class User extends Part <nl> return $this->attributes['avatar']; <nl> } <nl> + /** <nl> + * Returns the banner URL for the client. <nl> + * <nl> + * @param string $format The image format. <nl> + * @param int $size The size of the image. <nl> + * <nl> + * @return string|null The URL to the clients banner. <nl> + */ <nl> + public function getBannerAttribute(string $format = 'jpg', int $size = 600): ?string <nl> + { <nl> + if (empty($this->attributes['banner'])) { <nl> + return null; <nl> + } <nl> + <nl> + if (false === array_search($format, ['png', 'jpg', 'webp', 'gif'])) { <nl> + $format = 'jpg'; <nl> + } <nl> + <nl> + return \"https://cdn.discordapp.com/banners/{$this->id}/{$this->attributes['banner']}.{$format}?size={$size}\"; <nl> + } <nl> + <nl> + /** <nl> + * Returns the banner hash for the client. <nl> + * <nl> + * @return string The client banner's hash. <nl> + */ <nl> + protected function getBannerHashAttribute(): string <nl> + { <nl> + return $this->attributes['banner']; <nl> + } <nl> + <nl> /** <nl> * Returns a timestamp for when a user's account was created. <nl> * <nl> ", "msg": "Add banner and accent_color to User.php\n* Add banner and accent_color to User.php\nAdd user banner (url and hash) and accent_color attributes to User part, additionally add missing GIF format in avatar url\n* Fix comment indentation"}
{"diff_id": 6716, "repo": "discord-php/discordphp", "sha": "b72c13bd5084c0d23e29a250afa243b9dac4d9fa", "time": "06.10.2021 22:28:12", "diff": "mmm a / src/Discord/Parts/WebSockets/MessageReaction.php <nl> ppp b / src/Discord/Parts/WebSockets/MessageReaction.php <nl>@@ -211,4 +211,42 @@ class MessageReaction extends Part <nl> return null; <nl> } <nl> + <nl> + /** <nl> + * Delete this reaction <nl> + * <nl> + * @param int|null $type The type of deletion to perform. <nl> + * <nl> + * @return ExtendedPromiseInterface <nl> + */ <nl> + public function delete(?int $type = null): ExtendedPromiseInterface <nl> + { <nl> + if (is_null($type)) { <nl> + if ($this->user_id == $this->discord->id) { <nl> + $type = Message::REACT_DELETE_ME; <nl> + } else { <nl> + $type = Message::REACT_DELETE_ID; <nl> + } <nl> + } <nl> + <nl> + $emoticon = $this->emoji->toReactionString(); <nl> + <nl> + switch ($type) { <nl> + case Message::REACT_DELETE_ALL: <nl> + $url = Endpoint::bind(Endpoint::MESSAGE_REACTION_ALL, $this->channel_id, $this->message_id); <nl> + break; <nl> + case Message::REACT_DELETE_ME: <nl> + $url = Endpoint::bind(Endpoint::OWN_MESSAGE_REACTION, $this->channel_id, $this->message_id, $emoticon); <nl> + break; <nl> + case Message::REACT_DELETE_EMOJI: <nl> + $url = Endpoint::bind(Endpoint::MESSAGE_REACTION_EMOJI, $this->channel_id, $this->message_id, $emoticon); <nl> + break; <nl> + case Message::REACT_DELETE_ID: <nl> + default: <nl> + $url = Endpoint::bind(Endpoint::USER_MESSAGE_REACTION, $this->channel_id, $this->message_id, $emoticon, $this->user_id); <nl> + break; <nl> + } <nl> + <nl> + return $this->http->delete($url); <nl> + } <nl> } <nl> ", "msg": "Add delete method in MessageReaction\n* Add delete method in MessageReaction\nUseful to delete reaction on message reaction events that might have partial data\n* Remove type checking, default to this reaction id"}
{"diff_id": 6717, "repo": "discord-php/discordphp", "sha": "cf7a29de09753865560ba60a117f03fc128a848e", "time": "08.10.2021 07:09:12", "diff": "mmm a / src/Discord/Repository/Guild/BanRepository.php <nl> ppp b / src/Discord/Repository/Guild/BanRepository.php <nl>@@ -41,6 +41,7 @@ class BanRepository extends AbstractRepository <nl> */ <nl> protected $endpoints = [ <nl> 'all' => Endpoint::GUILD_BANS, <nl> + 'get' => Endpoint::GUILD_BAN, <nl> 'delete' => Endpoint::GUILD_BAN, <nl> ]; <nl> ", "msg": "Add get endpoint for single ban\nIt is possible:"}
{"diff_id": 6773, "repo": "discord-php/discordphp", "sha": "768389b92d2f4abb21470e99c056966e14deda9e", "time": "04.04.2022 10:41:46", "diff": "mmm a / src/Discord/functions.php <nl> ppp b / src/Discord/functions.php <nl>@@ -196,9 +196,9 @@ function imageToBase64(string $filepath): string <nl> * Takes a snowflake and calculates the time that the snowflake <nl> * was generated. <nl> * <nl> - * @param string|int $snowflake <nl> + * @param string|float $snowflake <nl> * <nl> - * @return int <nl> + * @return float <nl> */ <nl> function getSnowflakeTimestamp(string $snowflake) <nl> { <nl> ", "msg": "getSnowflakeTimestamp documentation and build docs\nCalculated in ms precision, thus returns a float rather than an int."}
{"diff_id": 6774, "repo": "discord-php/discordphp", "sha": "abdaf1cf701e3687a176c18ba57b456db848f07e", "time": "25.04.2022 19:13:50", "diff": "mmm a / src/Discord/Parts/User/Member.php <nl> ppp b / src/Discord/Parts/User/Member.php <nl>@@ -652,6 +652,18 @@ class Member extends Part <nl> return Carbon::parse($this->attributes['communication_disabled_until']); <nl> } <nl> + /** <nl> + * Returns the voicechannel of the member. <nl> + * <nl> + * @return Channel|null <nl> + */ <nl> + public function getVoiceChannel(): ?Channel <nl> + { <nl> + return $this->guild->channels->find(function (Channel $channel) { <nl> + return $channel->allowVoice() && $channel->members->has($this->id); <nl> + }); <nl> + } <nl> + <nl> /** <nl> * @inheritdoc <nl> */ <nl> ", "msg": "add $member->getVoiceChannel()\nReturns the voicechannel of the member"}
{"diff_id": 6801, "repo": "discord-php/discordphp", "sha": "0c540b9aa5a46eb555a7f532cdc79f1e50dcd73e", "time": "26.06.2022 18:08:11", "diff": "mmm a / src/Discord/Parts/Channel/Message.php <nl> ppp b / src/Discord/Parts/Channel/Message.php <nl>@@ -29,7 +29,6 @@ use Discord\\Parts\\Guild\\Sticker; <nl> use Discord\\Parts\\Interactions\\Request\\Component; <nl> use Discord\\Parts\\Thread\\Thread; <nl> use Discord\\Repository\\Channel\\ReactionRepository; <nl> -use React\\EventLoop\\TimerInterface; <nl> use React\\Promise\\ExtendedPromiseInterface; <nl> use function React\\Promise\\reject; <nl> @@ -668,7 +667,7 @@ class Message extends Part <nl> * <nl> * @param string|MessageBuilder $message Reply message to send after delay. <nl> * @param int $delay Delay after text will be sent in milliseconds. <nl> - * @param TimerInterface &$timer Delay timer passed by reference. <nl> + * @param \\React\\EventLoop\\TimerInterface &$timer Delay timer passed by reference. <nl> * <nl> * @return ExtendedPromiseInterface<Message> <nl> */ <nl> @@ -689,7 +688,7 @@ class Message extends Part <nl> * @see Message::deleteMessage() <nl> * <nl> * @param int $delay Time to delay the delete by, in milliseconds. <nl> - * @param TimerInterface &$timer Delay timer passed by reference. <nl> + * @param \\React\\EventLoop\\TimerInterface &$timer Delay timer passed by reference. <nl> * <nl> * @return ExtendedPromseInterface <nl> */ <nl> ", "msg": "Change to absolute namespace\nRemove use \\React\\EventLoop\\TimerInterface"}
{"diff_id": 6838, "repo": "discord-php/discordphp", "sha": "9098160834f0c7a1de8053b00b14a10090f77fa3", "time": "26.07.2022 23:22:01", "diff": "mmm a / src/Discord/Helpers/CacheWrapper.php <nl> ppp b / src/Discord/Helpers/CacheWrapper.php <nl>@@ -86,10 +86,6 @@ class CacheWrapper <nl> { <nl> return $this->interface->delete($key)->then(function ($success) use ($key) { <nl> if ($success) { <nl> - if (isset($this->items[$key])) { <nl> - $cache = $this->items[$key]->get(); <nl> - unset($cache); <nl> - } <nl> unset($this->items[$key]); <nl> } <nl> @@ -141,10 +137,6 @@ class CacheWrapper <nl> return $this->interface->deleteMultiple($keys)->then(function ($success) use ($keys) { <nl> if ($success) { <nl> foreach ($keys as $key) { <nl> - if (isset($this->items[$key])) { <nl> - $cache = $this->items[$key]->get(); <nl> - unset($cache); <nl> - } <nl> unset($this->items[$key]); <nl> } <nl> } <nl> ", "msg": "revert last commit and fix deleteMultiple"}
{"diff_id": 6840, "repo": "discord-php/discordphp", "sha": "1214751f1210544f22ee12cc2eb6b49e9b2169d4", "time": "26.07.2022 23:34:57", "diff": "mmm a / src/Discord/Repository/AbstractRepository.php <nl> ppp b / src/Discord/Repository/AbstractRepository.php <nl>@@ -466,12 +466,9 @@ abstract class AbstractRepository extends Collection <nl> */ <nl> public function clear(): void <nl> { <nl> - await($this->cache->deleteMultiple(array_keys($this->items))->then(function ($success) { <nl> - if ($success) { <nl> + $this->interface->cache->deleteMultiple(array_keys($this->items)); <nl> parent::clear(); <nl> } <nl> - })); <nl> - } <nl> /** <nl> * {@inheritdoc} <nl> @@ -532,11 +529,13 @@ abstract class AbstractRepository extends Collection <nl> */ <nl> public function offsetExists($offset): bool <nl> { <nl> - if (isset($this->items[$this->cacheKeyPrefix.$offset])) { <nl> + $cacheKey = $this->cacheKeyPrefix.$offset; <nl> + <nl> + if (isset($this->items[$cacheKey])) { <nl> return true; <nl> } <nl> - return await($this->cache->has($this->cacheKeyPrefix.$offset)); <nl> + return await($this->cache->has($cacheKey)); <nl> } <nl> /** <nl> @@ -551,11 +550,13 @@ abstract class AbstractRepository extends Collection <nl> #[\\ReturnTypeWillChange] <nl> public function offsetGet($offset) <nl> { <nl> - if ($item = $this->items[$this->cacheKeyPrefix.$offset]) { <nl> + $cacheKey = $this->cacheKeyPrefix.$offset; <nl> + <nl> + if ($item = $this->items[$cacheKey]) { <nl> return $item->get(); <nl> } <nl> - return await($this->cache->get($this->cacheKeyPrefix.$offset)); <nl> + return await($this->cache->get($cacheKey)); <nl> } <nl> /** <nl> @@ -591,10 +592,7 @@ abstract class AbstractRepository extends Collection <nl> { <nl> $cacheKey = $this->cacheKeyPrefix.$offset; <nl> - if ($item = $this->items[$cacheKey]) { <nl> - if ($cache = $item->get()) { <nl> - unset($cache); <nl> - } <nl> + if (isset($this->items[$cacheKey])) { <nl> $this->cache->interface->delete($cacheKey); <nl> unset($this->items[$cacheKey]); <nl> ", "msg": "revert last commit, fix unexpected behavior"}
{"diff_id": 7003, "repo": "discord-php/discordphp", "sha": "072b8e550d2ff1c4879ead75031536aca95d34dc", "time": "28.08.2022 10:32:15", "diff": "mmm a / src/Discord/Discord.php <nl> ppp b / src/Discord/Discord.php <nl>@@ -1302,6 +1302,9 @@ class Discord <nl> if (is_null($gateway)) { <nl> $this->http->get(Endpoint::GATEWAY_BOT)->done(function ($response) use ($buildParams) { <nl> + if ($response->shards > 1) { <nl> + $this->logger->warning('Please contact the DiscordPHP devs if you are interrested in working with us on sharding support.'); <nl> + } <nl> $buildParams($this->resume_gateway_url ?? $response->url, $response->session_start_limit); <nl> }, function ($e) use ($buildParams) { <nl> // Can't access the API server so we will use the default gateway. <nl> ", "msg": "Attract rabbits\nWe are looking for people that use DiscordPHP that reached the point where the bot recommends sharding."}
{"diff_id": 7029, "repo": "discord-php/discordphp", "sha": "7a69e948b7dcee0772c389131d3e57cbb1a6606c", "time": "08.09.2022 20:01:16", "diff": "mmm a / src/Discord/Repository/AbstractRepository.php <nl> ppp b / src/Discord/Repository/AbstractRepository.php <nl>@@ -117,13 +117,13 @@ abstract class AbstractRepository extends Collection <nl> } <nl> return $this->http->get($endpoint)->then(function ($response) { <nl> - foreach ($this->items as $key => $value) { <nl> + foreach ($this->items as $offset => $value) { <nl> if ($value === null) { <nl> - unset($this->items[$key]); <nl> - } elseif (! ($this->items[$key] instanceof WeakReference)) { <nl> - $this->items[$key] = WeakReference::create($value); <nl> + unset($this->items[$offset]); <nl> + } elseif (! ($this->items[$offset] instanceof WeakReference)) { <nl> + $this->items[$offset] = WeakReference::create($value); <nl> } <nl> - $this->cache->interface->delete($this->cache->getPrefix().$key); <nl> + $this->cache->interface->delete($this->cache->getPrefix().$offset); <nl> } <nl> return $this->cacheFreshen($response); <nl> @@ -450,10 +450,9 @@ abstract class AbstractRepository extends Collection <nl> */ <nl> public function cachePull($key, $default = null): ExtendedPromiseInterface <nl> { <nl> - return $this->cacheGet($key)->then( <nl> - fn ($item) => ($item === null) ? <nl> - $default : $this->cache->delete($key)->then( <nl> - fn ($success) => $item <nl> + return $this->cacheGet($key)->then(fn ($item) <nl> + => ($item === null) ? $default : $this->cache->delete($key)->then(fn ($success) <nl> + => $item <nl> ) <nl> ); <nl> } <nl> @@ -489,11 +488,11 @@ abstract class AbstractRepository extends Collection <nl> */ <nl> public function first() <nl> { <nl> - foreach ($this->items as $key => $item) { <nl> + foreach ($this->items as $offset => $item) { <nl> if ($item instanceof WeakReference) { <nl> if (! $item = $item->get()) { <nl> // Attempt to get resolved value if promise is resolved without waiting <nl> - $item = nowait($this->cache->get($key)); <nl> + $item = nowait($this->cache->get($offset)); <nl> } <nl> } <nl> @@ -514,11 +513,11 @@ abstract class AbstractRepository extends Collection <nl> { <nl> $items = array_reverse($this->items, true); <nl> - foreach ($items as $key => $item) { <nl> + foreach ($items as $offset => $item) { <nl> if ($item instanceof WeakReference) { <nl> if (! $item = $item->get()) { <nl> // Attempt to get resolved value if promise is resolved without waiting <nl> - $item = nowait($this->cache->get($key)); <nl> + $item = nowait($this->cache->get($offset)); <nl> } <nl> } <nl> @@ -542,7 +541,7 @@ abstract class AbstractRepository extends Collection <nl> public function has(...$keys): bool <nl> { <nl> foreach ($keys as $key) { <nl> - if (! $this->offsetExists($key)) { <nl> + if (! $this->offsetExists($key) || nowait($this->cache->has($key)) === false) { <nl> return false; <nl> } <nl> } <nl> @@ -561,9 +560,12 @@ abstract class AbstractRepository extends Collection <nl> { <nl> $collection = new Collection([], $this->discrim, $this->class); <nl> - foreach ($this->items as $item) { <nl> + foreach ($this->items as $offset => $item) { <nl> if ($item instanceof WeakReference) { <nl> - $item = $item->get(); <nl> + if (! $item = $item->get()) { <nl> + // Attempt to get resolved value if promise is resolved without waiting <nl> + $item = nowait($this->cache->get($offset)); <nl> + } <nl> } <nl> if ($item === null) { <nl> @@ -587,9 +589,12 @@ abstract class AbstractRepository extends Collection <nl> */ <nl> public function find(callable $callback) <nl> { <nl> - foreach ($this->items as $item) { <nl> + foreach ($this->items as $offset => $item) { <nl> if ($item instanceof WeakReference) { <nl> - $item = $item->get(); <nl> + if (! $item = $item->get()) { <nl> + // Attempt to get resolved value if promise is resolved without waiting <nl> + $item = nowait($this->cache->get($offset)); <nl> + } <nl> } <nl> if ($item === null) { <nl> @@ -624,11 +629,11 @@ abstract class AbstractRepository extends Collection <nl> { <nl> $items = []; <nl> - foreach ($this->items as $key => $item) { <nl> + foreach ($this->items as $offset => $item) { <nl> if ($item instanceof WeakReference) { <nl> $item = $item->get(); <nl> } <nl> - $items[$key] = $item; <nl> + $items[$offset] = $item; <nl> } <nl> return $items; <nl> @@ -713,17 +718,17 @@ abstract class AbstractRepository extends Collection <nl> public function getIterator(): Traversable <nl> { <nl> return (function () { <nl> - foreach ($this->items as $key => $item) { <nl> + foreach ($this->items as $offset => $item) { <nl> if ($item instanceof WeakReference) { <nl> $item = $item->get(); <nl> } <nl> if ($item) { <nl> - yield $key => $this->items[$key] = $item; <nl> + yield $offset => $this->items[$offset] = $item; <nl> } else { <nl> // Attempt to get resolved value if promise is resolved without waiting <nl> - if ($resolved = nowait($this->cache->get($key)) !== null) { <nl> - yield $key => $this->items[$key] = $resolved; <nl> + if ($resolved = nowait($this->cache->get($offset)) !== null) { <nl> + yield $offset => $this->items[$offset] = $resolved; <nl> } <nl> } <nl> } <nl> ", "msg": "add nowait cache on filter and find also rename key to offset"}
{"diff_id": 7033, "repo": "discord-php/discordphp", "sha": "7d214c025a6c1c5c10a7da3e4371fea1af9dfcab", "time": "09.09.2022 21:05:05", "diff": "mmm a / src/Discord/Parts/Channel/StageInstance.php <nl> ppp b / src/Discord/Parts/Channel/StageInstance.php <nl>@@ -33,8 +33,6 @@ use Discord\\Parts\\Part; <nl> */ <nl> class StageInstance extends Part <nl> { <nl> - /** @deprecated 7.0.0 */ <nl> - public const PRIVACY_LEVEL_PUBLIC = 1; <nl> public const PRIVACY_LEVEL_GROUP_ONLY = 2; <nl> /** <nl> ", "msg": "Remove deprecated stage instance constant"}
{"diff_id": 7038, "repo": "discord-php/discordphp", "sha": "78fe09bf7390ff5f6db42467605cf1395110d178", "time": "09.09.2022 21:58:53", "diff": "mmm a / src/Discord/Parts/Thread/Thread.php <nl> ppp b / src/Discord/Parts/Thread/Thread.php <nl>@@ -441,6 +441,8 @@ class Thread extends Part <nl> * @link https://discord.com/developers/docs/resources/channel#get-pinned-messages <nl> * <nl> * @return ExtendedPromiseInterface<Collection<Message>> <nl> + * <nl> + * @todo Make it in a trait along with Channel <nl> */ <nl> public function getPinnedMessages(): ExtendedPromiseInterface <nl> { <nl> @@ -465,15 +467,17 @@ class Thread extends Part <nl> * <nl> * @link https://discord.com/developers/docs/resources/channel#bulk-delete-messages <nl> * <nl> - * @param array|Traversable $messages <nl> + * @param array $messages <nl> * @param string|null $reason Reason for Audit Log (only for bulk messages). <nl> * <nl> * @return ExtendedPromiseInterface <nl> + * <nl> + * @todo Make it in a trait along with Channel <nl> */ <nl> public function deleteMessages($messages, ?string $reason = null): ExtendedPromiseInterface <nl> { <nl> - if (! is_array($messages) && ! ($messages instanceof Traversable)) { <nl> - return reject(new \\Exception('$messages must be an array or implement Traversable.')); <nl> + if (! is_array($messages)) { <nl> + return reject(new \\Exception('$messages must be an array.')); <nl> } <nl> $count = count($messages); <nl> @@ -522,6 +526,8 @@ class Thread extends Part <nl> * @param array $options <nl> * <nl> * @return ExtendedPromiseInterface<Collection<Message>> <nl> + * <nl> + * @todo Make it in a trait along with Channel <nl> */ <nl> public function getMessageHistory(array $options): ExtendedPromiseInterface <nl> { <nl> @@ -584,6 +590,8 @@ class Thread extends Part <nl> * @throws \\RuntimeException <nl> * <nl> * @return ExtendedPromiseInterface<Message> <nl> + * <nl> + * @todo Make it in a trait along with Channel <nl> */ <nl> public function pinMessage(Message $message, ?string $reason = null): ExtendedPromiseInterface <nl> { <nl> @@ -618,6 +626,8 @@ class Thread extends Part <nl> * @throws \\RuntimeException <nl> * <nl> * @return ExtendedPromiseInterface<Message> <nl> + * <nl> + * @todo Make it in a trait along with Channel <nl> */ <nl> public function unpinMessage(Message $message, ?string $reason = null): ExtendedPromiseInterface <nl> { <nl> @@ -656,6 +666,8 @@ class Thread extends Part <nl> * @param Message|null $replyTo Sends the message as a reply to the given message instance. <nl> * <nl> * @return ExtendedPromiseInterface<Message> <nl> + * <nl> + * @todo Make it in a trait along with Channel <nl> */ <nl> public function sendMessage($message, bool $tts = false, $embed = null, $allowed_mentions = null, ?Message $replyTo = null): ExtendedPromiseInterface <nl> { <nl> @@ -702,6 +714,8 @@ class Thread extends Part <nl> * @param Embed $embed Embed to send. <nl> * <nl> * @return ExtendedPromiseInterface<Message> <nl> + * <nl> + * @todo Make it in a trait along with Channel <nl> */ <nl> public function sendEmbed(Embed $embed): ExtendedPromiseInterface <nl> { <nl> @@ -718,6 +732,8 @@ class Thread extends Part <nl> * @param int $options ['limit'] The amount of messages allowed or false. <nl> * <nl> * @return ExtendedPromiseInterface<Collection<Message>> <nl> + * <nl> + * @todo Make it in a trait along with Channel <nl> */ <nl> public function createMessageCollector(callable $filter, array $options = []): ExtendedPromiseInterface <nl> { <nl> ", "msg": "Remove traversable, add todo for trait"}
{"diff_id": 7156, "repo": "discord-php/discordphp", "sha": "be55659bbe82bc9b6eebda528b443f315b117fb9", "time": "04.12.2022 14:37:26", "diff": "mmm a / src/Discord/Parts/Channel/Channel.php <nl> ppp b / src/Discord/Parts/Channel/Channel.php <nl>@@ -1399,10 +1399,13 @@ class Channel extends Part <nl> $attr['default_thread_rate_limit_per_user'] = $this->default_thread_rate_limit_per_user; <nl> } elseif ($this->type == self::TYPE_GUILD_VOICE) { <nl> $attr['nsfw'] = $this->nsfw; <nl> + $attr['rate_limit_per_user'] = $this->rate_limit_per_user; <nl> $attr['bitrate'] = $this->bitrate; <nl> $attr['user_limit'] = $this->user_limit; <nl> $attr['rtc_region'] = $this->rtc_region; <nl> $attr['video_quality_mode'] = $this->video_quality_mode; <nl> + } elseif ($this->type == self::TYPE_GROUP_DM) { <nl> + $attr['icon'] = $this->icon; <nl> } elseif ($this->type == self::TYPE_GUILD_ANNOUNCEMENT) { <nl> $attr['type'] = $this->type; <nl> $attr['topic'] = $this->topic; <nl> ", "msg": "slow mode voice, group dm icon updateable"}
{"diff_id": 7173, "repo": "discord-php/discordphp", "sha": "256a068552b6da7343165940d9039ed4b8ec3c82", "time": "15.12.2022 22:46:44", "diff": "mmm a / src/Discord/Parts/Channel/Invite.php <nl> ppp b / src/Discord/Parts/Channel/Invite.php <nl>@@ -64,7 +64,6 @@ class Invite extends Part <nl> 'approximate_presence_count', <nl> 'approximate_member_count', <nl> 'expires_at', <nl> - 'stage_instance', // deprecated <nl> 'guild_scheduled_event', <nl> // Extra metadata <nl> ", "msg": "remove deprecated invite stage_instances always null"}
{"diff_id": 7180, "repo": "discord-php/discordphp", "sha": "10ac97e7b0cdd18b98b27a7f3e9ba5ca297b21f5", "time": "23.12.2022 20:53:25", "diff": "mmm a / src/Discord/Repository/AbstractRepository.php <nl> ppp b / src/Discord/Repository/AbstractRepository.php <nl>@@ -225,6 +225,10 @@ abstract class AbstractRepository extends Collection <nl> */ <nl> public function delete($part, ?string $reason = null): ExtendedPromiseInterface <nl> { <nl> + if (! isset($part)) { <nl> + return reject(new \\Exception('You cannot delete a non-existant part.')); <nl> + } <nl> + <nl> if (! ($part instanceof Part)) { <nl> $part = $this->factory->part($this->class, [$this->discrim => $part], true); <nl> } <nl> ", "msg": "throw error if part is null"}
{"diff_id": 7204, "repo": "braintree/braintree_php", "sha": "7999c3a9a3563c87767930ce7cb50eb6ea46a47f", "time": "25.07.2017 12:23:34", "diff": "mmm a / lib/Braintree/Transaction.php <nl> ppp b / lib/Braintree/Transaction.php <nl>@@ -135,7 +135,7 @@ namespace Braintree; <nl> * <nl> * <b>== More information ==</b> <nl> * <nl> - * For more detailed information on Transactions, see {@link http://www.braintreepayments.com/gateway/transaction-api http://www.braintreepaymentsolutions.com/gateway/transaction-api} <nl> + * For more detailed information on Transactions, see {@link https://developers.braintreepayments.com/reference/response/transaction/php https://developers.braintreepayments.com/reference/response/transaction/php} <nl> * <nl> * @package Braintree <nl> * @category Resources <nl> ", "msg": "Update link to transaction api documentation."}
{"diff_id": 7214, "repo": "braintree/braintree_php", "sha": "b5d187ca69d47d3c15564229064c60cfab012acb", "time": "19.03.2018 21:57:27", "diff": "mmm a / tests/integration/TransactionAdvancedSearchTest.php <nl> ppp b / tests/integration/TransactionAdvancedSearchTest.php <nl>@@ -1513,7 +1513,7 @@ class TransactionAdvancedSearchTest extends Setup <nl> $collection = Braintree\\Transaction::search([ <nl> Braintree\\TransactionSearch::creditCardNumber()->startsWith(\"411111\") <nl> ]); <nl> - $this->assertTrue($collection->maximumCount() > 100); <nl> + $this->assertGreaterThan(100, $collection->maximumCount()); <nl> $arr = []; <nl> foreach($collection as $transaction) { <nl> ", "msg": "Use assertGreaterThan for better assertion message"}
{"diff_id": 7233, "repo": "braintree/braintree_php", "sha": "f6211e9443a943803a818808b57d7eec444dce35", "time": "06.11.2019 09:05:45", "diff": "mmm a / lib/Braintree/Customer.php <nl> ppp b / lib/Braintree/Customer.php <nl>@@ -49,7 +49,7 @@ class Customer extends Base <nl> /** <nl> * <nl> - * @param string $query <nl> + * @param array $query <nl> * @param int[] $ids <nl> * @return Customer|Customer[] <nl> */ <nl> @@ -148,7 +148,7 @@ class Customer extends Base <nl> /** <nl> * <nl> * @throws InvalidArgumentException <nl> - * @param string $query <nl> + * @param array $query <nl> * @return ResourceCollection <nl> */ <nl> public static function search($query) <nl> ", "msg": "Fixed type hints on query parameters\nUpdated type hints for query parameters from string to array."}
{"diff_id": 7242, "repo": "braintree/braintree_php", "sha": "c9ab997f15ecf88537625c785822368be1fa07ec", "time": "05.11.2020 17:15:46", "diff": "mmm a / tests/integration/DisputeSearchTest.php <nl> ppp b / tests/integration/DisputeSearchTest.php <nl>@@ -78,7 +78,7 @@ class DisputeSearchTest extends Setup <nl> $disputes = $this->collectionToArray($collection); <nl> - $this->assertEquals(1, count($disputes)); <nl> + $this->assertGreaterThanOrEqual(1, count($disputes)); <nl> $this->assertEquals($disputes[0]->receivedDate, DateTime::createFromFormat('Ymd His', '20140304 000000')); <nl> } <nl> @@ -93,7 +93,7 @@ class DisputeSearchTest extends Setup <nl> $disputes = $this->collectionToArray($collection); <nl> - $this->assertEquals(1, count($disputes)); <nl> + $this->assertGreaterThanOrEqual(1, count($disputes)); <nl> $this->assertEquals($disputes[0]->statusHistory[0]->effectiveDate, DateTime::createFromFormat('Ymd His', '20140304 000000')); <nl> } <nl> @@ -108,7 +108,7 @@ class DisputeSearchTest extends Setup <nl> $disputes = $this->collectionToArray($collection); <nl> - $this->assertEquals(1, count($disputes)); <nl> + $this->assertGreaterThanOrEqual(1, count($disputes)); <nl> $this->assertEquals($disputes[0]->statusHistory[0]->disbursementDate, DateTime::createFromFormat('Ymd His', '20140305 000000')); <nl> } <nl> ", "msg": "Check dispute search by received_at returns more than 1 result"}
{"diff_id": 7243, "repo": "braintree/braintree_php", "sha": "1565e897f043d5cecee976e78ab2fd2425f1562c", "time": "17.11.2020 07:23:50", "diff": "mmm a / lib/Braintree/Error/Codes.php <nl> ppp b / lib/Braintree/Error/Codes.php <nl>@@ -698,6 +698,7 @@ class Codes <nl> const MERCHANT_ACOUNT_DOES_NOT_MATCH3_D_SECURE_MERCHANT_ACCOUNT = \"94284\"; <nl> const AMOUNT_DOES_NOT_MATCH3_D_SECURE_AMOUNT = \"94285\"; <nl> + # NEXT_MAJOR_VERSION Remove CustomerBrowserIsTooLong code as it is no longer applied <nl> const RISK_DATA_CUSTOMER_BROWSER_IS_TOO_LONG = \"94701\"; <nl> const RISK_DATA_CUSTOMER_DEVICE_ID_IS_TOO_LONG = \"94702\"; <nl> const RISK_DATA_CUSTOMER_LOCATION_ZIP_INVALID_CHARACTERS = \"94703\"; <nl> ", "msg": "DTBTCRDEXP add note to remove CustomerBrowserTooLong error code"}
{"diff_id": 7263, "repo": "deployphp/deployer", "sha": "3bd1cfbbb8a8d41dc4dc3dd8ddafedbac3849ad3", "time": "13.01.2017 15:27:06", "diff": "mmm a / src/functions.php <nl> ppp b / src/functions.php <nl>@@ -331,7 +331,7 @@ function run($command) <nl> * @return Result Output of command. <nl> * @throws \\RuntimeException <nl> */ <nl> -function runLocally($command, $timeout = 60) <nl> +function runLocally($command, $timeout = 300) <nl> { <nl> $command = parse($command); <nl> ", "msg": "Raise timeout for runLocally to 300 seconds\nSimilar to other locations this is now also raised to 5 minutes."}
{"diff_id": 7264, "repo": "deployphp/deployer", "sha": "d786b61489d2ed638282e22178c3d9f669dc03a7", "time": "14.01.2017 14:53:58", "diff": "mmm a / recipe/deploy/writable.php <nl> ppp b / recipe/deploy/writable.php <nl>@@ -57,8 +57,8 @@ task('deploy:writable', function () { <nl> run(\"$sudo chmod +a \\\"`whoami` allow delete,write,append,file_inherit,directory_inherit\\\" $dirs\"); <nl> } elseif (commandExist('setfacl')) { <nl> if (!empty($sudo)) { <nl> - run(\"$sudo setfacl -R -m u:\\\"$httpUser\\\":rwX -m u:`whoami`:rwX $dirs\"); <nl> - run(\"$sudo setfacl -dR -m u:\\\"$httpUser\\\":rwX -m u:`whoami`:rwX $dirs\"); <nl> + run(\"$sudo setfacl -RL -m u:\\\"$httpUser\\\":rwX -m u:`whoami`:rwX $dirs\"); <nl> + run(\"$sudo setfacl -dRL -m u:\\\"$httpUser\\\":rwX -m u:`whoami`:rwX $dirs\"); <nl> } else { <nl> // When running without sudo, exception may be thrown <nl> // if executing setfacl on files created by http user (in directory that has been setfacl before). <nl> @@ -70,8 +70,8 @@ task('deploy:writable', function () { <nl> $hasfacl = run(\"getfacl -p $dir | grep \\\"^user:$httpUser:.*w\\\" | wc -l\")->toString(); <nl> // Set ACL for directory if it has not been set before <nl> if (!$hasfacl) { <nl> - run(\"setfacl -R -m u:\\\"$httpUser\\\":rwX -m u:`whoami`:rwX $dir\"); <nl> - run(\"setfacl -dR -m u:\\\"$httpUser\\\":rwX -m u:`whoami`:rwX $dir\"); <nl> + run(\"setfacl -RL -m u:\\\"$httpUser\\\":rwX -m u:`whoami`:rwX $dir\"); <nl> + run(\"setfacl -dRL -m u:\\\"$httpUser\\\":rwX -m u:`whoami`:rwX $dir\"); <nl> } <nl> } <nl> } <nl> ", "msg": "Calling setfacl with option -L to follow symbolic links created for shared directories."}
{"diff_id": 7265, "repo": "deployphp/deployer", "sha": "630b1d1994d570417f37be2a23eb21696a1f5573", "time": "18.01.2017 11:11:26", "diff": "mmm a / src/functions.php <nl> ppp b / src/functions.php <nl>@@ -447,6 +447,7 @@ function download($local, $remote) <nl> $local = parse($local); <nl> $remote = parse($remote); <nl> + writeln(\"Download file <info>$remote</info> to <info>$local</info>\"); <nl> $server->download($local, $remote); <nl> } <nl> ", "msg": "Show message on file download\nSimilar to upload() a message should be shown for file downloads."}
{"diff_id": 7300, "repo": "deployphp/deployer", "sha": "0acbb4c6fba78e6db76a3672607b9b3a2cc7d78a", "time": "05.04.2017 15:02:19", "diff": "mmm a / recipe/deploy/lock.php <nl> ppp b / recipe/deploy/lock.php <nl>@@ -14,9 +14,11 @@ task('deploy:lock', function () { <nl> $locked = run(\"if [ -f {{deploy_path}}/.dep/deploy.lock ]; then echo 'true'; fi\")->toBool(); <nl> if ($locked) { <nl> + $stage = input()->hasArgument('stage') ? ' ' . input()->getArgument('stage') : ''; <nl> + <nl> throw new GracefulShutdownException( <nl> \"Deploy locked.\\n\" . <nl> - \"Run deploy:unlock command to unlock.\" <nl> + sprintf('Execute \"dep deploy:unlock%s\" to unlock.', $stage) <nl> ); <nl> } else { <nl> run(\"touch {{deploy_path}}/.dep/deploy.lock\"); <nl> ", "msg": "Improve lock message\nPrefix launcher script and append current stage."}
{"diff_id": 7321, "repo": "deployphp/deployer", "sha": "85f36abfd7e435981f95b4e914c60282ce9f6ac0", "time": "31.05.2017 12:24:33", "diff": "mmm a / recipe/laravel.php <nl> ppp b / recipe/laravel.php <nl>@@ -38,7 +38,7 @@ set('writable_dirs', [ <nl> set('laravel_version', function () { <nl> $result = run('{{bin/php}} {{release_path}}/artisan --version'); <nl> - preg_match_all('/([0-9\\.])$/', $result, $matches); <nl> + preg_match_all('/([0-9]\\.*[0-9]*)/', $result, $matches); <nl> $version = $matches[1][0] ?? 5.4; <nl> ", "msg": "Fix a parsing of laravel version in output \"php artisan --version\""}
{"diff_id": 7322, "repo": "deployphp/deployer", "sha": "1d84c0d3292344211e04e8135ac1ede7a836bb74", "time": "31.05.2017 13:37:50", "diff": "mmm a / recipe/laravel.php <nl> ppp b / recipe/laravel.php <nl>@@ -38,9 +38,9 @@ set('writable_dirs', [ <nl> set('laravel_version', function () { <nl> $result = run('{{bin/php}} {{release_path}}/artisan --version'); <nl> - preg_match_all('/([0-9]\\.*[0-9]*)/', $result, $matches); <nl> + preg_match_all('/(\\d+\\.?)+/', $result, $matches); <nl> - $version = $matches[1][0] ?? 5.4; <nl> + $version = $matches[0][0] ?? 5.4; <nl> return $version; <nl> }); <nl> ", "msg": "Parsing of laravel version. More universal regex"}
{"diff_id": 7323, "repo": "deployphp/deployer", "sha": "e8bbd6d5f42ba0eb602c530c8719939f6976302e", "time": "05.06.2017 16:56:24", "diff": "mmm a / src/functions.php <nl> ppp b / src/functions.php <nl>@@ -423,13 +423,14 @@ function upload($source, $destination, array $config = []) <nl> $host = Context::get()->getHost(); <nl> $source = parse($source); <nl> $destination = parse($destination); <nl> + $config['options'] = is_array($config['options']) ? $config['options'] : []; <nl> if ($host instanceof Localhost) { <nl> $rsync->call($host->getHostname(), $source, $destination, $config); <nl> } else { <nl> $sshArguments = $host->getSshArguments()->getCliArguments(); <nl> if (empty($sshArguments) === false) { <nl> - $config['options'] = [\"-e 'ssh $sshArguments'\"]; <nl> + $config['options'][] = \"-e 'ssh $sshArguments'\"; <nl> } <nl> $rsync->call($host->getHostname(), $source, \"$host:$destination\", $config); <nl> } <nl> @@ -448,13 +449,14 @@ function download($source, $destination, array $config = []) <nl> $host = Context::get()->getHost(); <nl> $source = parse($source); <nl> $destination = parse($destination); <nl> + $config['options'] = is_array($config['options']) ? $config['options'] : []; <nl> if ($host instanceof Localhost) { <nl> $rsync->call($host->getHostname(), $source, $destination, $config); <nl> } else { <nl> $sshArguments = $host->getSshArguments()->getCliArguments(); <nl> if (empty($sshArguments) === false) { <nl> - $config['options'] = [\"-e 'ssh $sshArguments'\"]; <nl> + $config['options'][] = \"-e 'ssh $sshArguments'\"; <nl> } <nl> $rsync->call($host->getHostname(), \"$host:$source\", $destination, $config); <nl> } <nl> ", "msg": "Update functions.php\nAs it the upload function don't take any options"}
{"diff_id": 7326, "repo": "deployphp/deployer", "sha": "ca18663466c01231d1dde80a5ca8689ac63461b9", "time": "15.06.2017 19:59:35", "diff": "mmm a / src/functions.php <nl> ppp b / src/functions.php <nl>@@ -423,13 +423,15 @@ function upload($source, $destination, array $config = []) <nl> $host = Context::get()->getHost(); <nl> $source = parse($source); <nl> $destination = parse($destination); <nl> - $config['options'] = is_array($config['options']) ? $config['options'] : []; <nl> if ($host instanceof Localhost) { <nl> $rsync->call($host->getHostname(), $source, $destination, $config); <nl> } else { <nl> $sshArguments = $host->getSshArguments()->getCliArguments(); <nl> if (empty($sshArguments) === false) { <nl> + if (!isset($config['options']) || !is_array($config['options'])) { <nl> + $config['options'] = []; <nl> + } <nl> $config['options'][] = \"-e 'ssh $sshArguments'\"; <nl> } <nl> $rsync->call($host->getHostname(), $source, \"$host:$destination\", $config); <nl> @@ -449,13 +451,15 @@ function download($source, $destination, array $config = []) <nl> $host = Context::get()->getHost(); <nl> $source = parse($source); <nl> $destination = parse($destination); <nl> - $config['options'] = is_array($config['options']) ? $config['options'] : []; <nl> if ($host instanceof Localhost) { <nl> $rsync->call($host->getHostname(), $source, $destination, $config); <nl> } else { <nl> $sshArguments = $host->getSshArguments()->getCliArguments(); <nl> if (empty($sshArguments) === false) { <nl> + if (!isset($config['options']) || !is_array($config['options'])) { <nl> + $config['options'] = []; <nl> + } <nl> $config['options'][] = \"-e 'ssh $sshArguments'\"; <nl> } <nl> $rsync->call($host->getHostname(), \"$host:$source\", $destination, $config); <nl> ", "msg": "Upload and download undefined index notice\nRelates to issue"}
{"diff_id": 7328, "repo": "deployphp/deployer", "sha": "f4235f6542383b59adfbafc09cf14fbff59404e1", "time": "19.06.2017 11:35:18", "diff": "mmm a / src/Host/Storage.php <nl> ppp b / src/Host/Storage.php <nl>@@ -14,73 +14,6 @@ use function Deployer\\Support\\array_flatten; <nl> class Storage <nl> { <nl> - /** <nl> - * In a multi user environment where multiple projects are located on the same instance(s) <nl> - * if two or more users are deploying at the same time on the same environment, <nl> - * the generated hosts files are overwritten or worse, the deploy will fail <nl> - * due to file permissions <nl> - * <nl> - * Make the persistent storage folder configurable or use the system tmp <nl> - * as default if not possible <nl> - * <nl> - * @return string <nl> - * @throws Exception <nl> - */ <nl> - private static function _getPersistentStorageLocation() { <nl> - $config = \\Deployer\\Deployer::get()->config; <nl> - <nl> - // use the system temporary folder and the current pid as default <nl> - // persistent storage in case we can't use the configured value <nl> - // or we can't create the default location <nl> - $tmp = sys_get_temp_dir() . '/' . posix_getpid(); <nl> - <nl> - // get the location for the deployer configuration <nl> - $deployerConfig = $config->has('deployer_config') ? $config->get('deployer_config') : null; <nl> - <nl> - if ( !is_null($deployerConfig) ) { <nl> - // check if the folder exists and it's writable <nl> - if ( !(is_dir($deployerConfig) && is_writable($deployerConfig)) ) { <nl> - throw new Exception(\"Deployer folder `$deployerConfig` doesn't exists or doesn't writable.\"); <nl> - } <nl> - } else { <nl> - // not configured, generate deployer folder name <nl> - <nl> - // use the home dir of the current user <nl> - // and the repository name <nl> - $userInfo = posix_getpwuid(posix_getuid()); <nl> - <nl> - // if for some reason we couldn't find a valid home folder <nl> - // or if it's not writable, use the default location <nl> - if ( !isset($userInfo['dir']) || !(is_dir($userInfo['dir']) && is_writable($userInfo['dir'])) ) { <nl> - return $tmp; <nl> - } <nl> - <nl> - // we have a folder name <nl> - $deployerConfig = $userInfo['dir'] . '/.deployer'; <nl> - <nl> - //if it doesn't exists, create it <nl> - if ( !file_exists($deployerConfig) ) { <nl> - mkdir($deployerConfig, 0777, true); <nl> - } <nl> - <nl> - //it exists, check if it's a folder and if it's writable <nl> - if ( !(is_dir($deployerConfig) && is_writable($deployerConfig)) ) { <nl> - return $tmp; <nl> - } <nl> - } <nl> - <nl> - // we will store the persistent data per repository <nl> - $configRepository = $config->has('repository') ? $config->get('repository') : null; <nl> - if (empty($configRepository)) { <nl> - return $tmp; <nl> - } <nl> - <nl> - // we now have the repository name <nl> - $repository = str_replace('/', '_', substr($configRepository, (strrpos($configRepository, ':') + 1))); <nl> - <nl> - return $deployerConfig . '/' . $repository; <nl> - } <nl> - <nl> /** <nl> * @param Host[] $hosts <nl> */ <nl> @@ -94,7 +27,7 @@ class Storage <nl> $values[$key] = $host->get($key); <nl> } <nl> - $file = self::_getPersistentStorageLocation() . '/' . $host->getHostname() . '.dep'; <nl> + $file = self::getPersistentStorageLocation() . '/' . $host->getHostname() . '.dep'; <nl> $values['host_config_storage'] = $file; <nl> $persistentCollection = new PersistentCollection($file, $values); <nl> @@ -150,4 +83,79 @@ class Storage <nl> $persistentCollection->load(); <nl> $host->getConfig()->setCollection($persistentCollection); <nl> } <nl> + <nl> + /** <nl> + * In a multi user environment where multiple projects are located on the same instance(s) <nl> + * if two or more users are deploying at the same time on the same environment, <nl> + * the generated hosts files are overwritten or worse, the deploy will fail <nl> + * due to file permissions <nl> + * <nl> + * Make the persistent storage folder configurable or use the system tmp <nl> + * as default if not possible <nl> + * <nl> + * @return string <nl> + * @throws Exception <nl> + */ <nl> + private static function getPersistentStorageLocation() { <nl> + $config = \\Deployer\\Deployer::get()->config; <nl> + <nl> + // use the system temporary folder and the current pid as default <nl> + // persistent storage in case we can't use the configured value <nl> + // or we can't create the default location <nl> + $tmp = sys_get_temp_dir() . '/' . posix_getpid(); <nl> + <nl> + // use the home dir of the current user <nl> + // and the repository name <nl> + <nl> + //posix compatible <nl> + if (function_exists('posix_getpwuid')) { <nl> + $userInfo = posix_getpwuid(posix_getuid()); <nl> + <nl> + // if for some reason we couldn't find a valid home folder <nl> + // or if it's not writable, use the default location <nl> + if ( !isset($userInfo['dir']) || !(is_dir($userInfo['dir']) && is_writable($userInfo['dir'])) ) { <nl> + return $tmp; <nl> + } <nl> + <nl> + // we have a folder name <nl> + $homeDir = $userInfo['dir']; <nl> + } else { <nl> + if (getenv('HOME')) { <nl> + // MacOS and other *nix <nl> + $homeDir = getenv('HOME'); <nl> + } else if (getenv('HOMEDRIVE') && getenv('HOMEPATH')) { <nl> + // Windows 8+ <nl> + $homeDir = getenv('HOMEDRIVE') . getenv('HOMEPATH'); <nl> + } <nl> + } <nl> + <nl> + if (empty($homeDir)) { <nl> + // unable to get the home dir <nl> + return $tmp; <nl> + } else { <nl> + // we have a folder name <nl> + $persistentStorage = $homeDir . '/.deployer'; <nl> + } <nl> + <nl> + //if it doesn't exists, create it <nl> + if ( !file_exists($persistentStorage) ) { <nl> + mkdir($persistentStorage, 0777, true); <nl> + } <nl> + <nl> + //it exists, check if it's a folder and if it's writable <nl> + if ( !(is_dir($persistentStorage) && is_writable($persistentStorage)) ) { <nl> + return $tmp; <nl> + } <nl> + <nl> + // we will store the persistent data per repository <nl> + $configRepository = $config->has('repository') ? $config->get('repository') : null; <nl> + if (empty($configRepository)) { <nl> + return $tmp; <nl> + } <nl> + <nl> + // we now have the repository name <nl> + $repository = str_replace('/', '_', substr($configRepository, (strrpos($configRepository, ':') + 1))); <nl> + <nl> + return $persistentStorage . '/' . $repository; <nl> + } <nl> } <nl> ", "msg": "Using getenv to find the home folder on non posix compatible systems.\nRemoved the option to used a configuration variable to set the persistent storage location."}
{"diff_id": 7329, "repo": "deployphp/deployer", "sha": "ced4a16418e58f3151691b2b2ce3cc7b21d4640b", "time": "19.06.2017 12:19:55", "diff": "mmm a / src/Host/Storage.php <nl> ppp b / src/Host/Storage.php <nl>@@ -102,7 +102,7 @@ class Storage <nl> // use the system temporary folder and the current pid as default <nl> // persistent storage in case we can't use the configured value <nl> // or we can't create the default location <nl> - $tmp = sys_get_temp_dir() . '/' . posix_getpid(); <nl> + $tmp = sys_get_temp_dir() . '/' . (function_exists('posix_getpid') ? posix_getpid() : getmypid()); <nl> // use the home dir of the current user <nl> // and the repository name <nl> ", "msg": "Using getmypid on non posix compatible systems to get the PID of the running process."}
{"diff_id": 7331, "repo": "deployphp/deployer", "sha": "b8d7a6cb6b668e318a10b298a9f69561e61d31a0", "time": "26.06.2017 18:59:14", "diff": "mmm a / src/Executor/ParallelExecutor.php <nl> ppp b / src/Executor/ParallelExecutor.php <nl>@@ -252,7 +252,7 @@ class ParallelExecutor implements ExecutorInterface <nl> foreach (['log'] as $option) { <nl> $value = $this->input->getOption($option); <nl> if ($value) { <nl> - $input .= \" --$option $value\"; <nl> + $input .= \" --$option=$value\"; <nl> } <nl> } <nl> @@ -268,7 +268,7 @@ class ParallelExecutor implements ExecutorInterface <nl> foreach ($this->console->getUserDefinition()->getOptions() as $option) { <nl> $value = $this->input->getOption($option->getName()); <nl> if ($value) { <nl> - $input .= \" --{$option->getName()} $value\"; <nl> + $input .= \" --{$option->getName()}=$value\"; <nl> } <nl> } <nl> ", "msg": "Handle option value with equal sign\noption should be handled with an equal sign."}
{"diff_id": 7359, "repo": "deployphp/deployer", "sha": "2eb22563770593a8abaed60b7f03210350870dd6", "time": "25.10.2018 02:48:09", "diff": "mmm a / src/Task/Task.php <nl> ppp b / src/Task/Task.php <nl>@@ -261,18 +261,24 @@ class Task <nl> /** <nl> * @param string $task <nl> + * <nl> + * @return $this <nl> */ <nl> public function addBefore(string $task) <nl> { <nl> array_unshift($this->before, $task); <nl> + return $this; <nl> } <nl> /** <nl> * @param string $task <nl> + * <nl> + * @return $this <nl> */ <nl> public function addAfter(string $task) <nl> { <nl> array_push($this->after, $task); <nl> + return $this; <nl> } <nl> /** <nl> ", "msg": "Return self in addBefore and addAfter methods to follow builder pattern\n* Update Task.php\naddBefore and addAfter methods should follow builder pattern\n* Update Task.php"}
{"diff_id": 7373, "repo": "deployphp/deployer", "sha": "0d6f45475a89abb0f0fe8d5158a006f7d0bcc160", "time": "29.05.2020 13:52:24", "diff": "mmm a / None <nl> ppp b / recipe/shopware6.php <nl>+<?php <nl> +namespace Deployer; <nl> + <nl> +set('repository', 'git@github.com:shopware/production.git'); <nl> + <nl> +set('shared_files', [ <nl> + '.env' <nl> +]); <nl> +set('shared_dirs', [ <nl> + 'var', <nl> + 'public/media', <nl> + 'public/thumbnail' <nl> +]); <nl> +set('writable_dirs', [ <nl> + 'var', <nl> + 'public/media', <nl> + 'public/thumbnail' <nl> +]); <nl> +set('static_folders', []); <nl> +set('writable_dirs', [ <nl> + 'public' <nl> +]); <nl> + <nl> +task('sw:update_code', function(){ <nl> + run('git clone {{repository}} {{release_path}};'); <nl> +}); <nl> +task('sw:deploy',' <nl> + cd {{release_path}}; <nl> + composer install; <nl> + '); <nl> + <nl> +task('sw:theme:compile', function(){ <nl> + run('cd {{release_path}} && bin/console theme:compile;'); <nl> +}); <nl> +task('sw:cache:clear', function(){ <nl> + run('cd {{release_path}} && bin/console cache:clear;'); <nl> +}); <nl> +/** <nl> + * Main task <nl> + */ <nl> +task('deploy', [ <nl> + 'deploy:prepare', <nl> + 'deploy:lock', <nl> + 'deploy:release', <nl> + 'deploy:update_code', <nl> + 'sw:deploy', <nl> + 'deploy:shared', <nl> + 'deploy:writable', <nl> + 'sw:theme:compile', <nl> + 'sw:cache:clear', <nl> + 'deploy:clear_paths', <nl> + 'deploy:symlink', <nl> + 'deploy:unlock', <nl> + 'cleanup', <nl> + 'success' <nl> +])->desc('Deploy your project'); <nl> + <nl> +after('deploy', 'success'); <nl> +after('deploy:failed', 'deploy:unlock'); <nl> ", "msg": "Shopware6 installation routine\nDue to the lack of ANY shopware6 installation routine, here's my little beginning of it. If you think it can be made better, I am very happy to have your ideas on board of this."}
{"diff_id": 7412, "repo": "deployphp/deployer", "sha": "da432e01399489a896e880e9469c01ffad5491e6", "time": "24.12.2020 12:55:11", "diff": "mmm a / recipe/deploy/vendors.php <nl> ppp b / recipe/deploy/vendors.php <nl>@@ -18,7 +18,7 @@ set('bin/composer', function () { <nl> return '{{bin/php}} {{deploy_path}}/.dep/composer.phar'; <nl> } <nl> - warning(\"Composer binary didn't found. Installing latest composer to \\\"{{deploy_path}}/.dep/composer.phar\\\".\"); <nl> + warning(\"Composer binary wasn't found. Installing latest composer to \\\"{{deploy_path}}/.dep/composer.phar\\\".\"); <nl> run(\"cd {{deploy_path}} && curl -sS https://getcomposer.org/installer | {{bin/php}}\"); <nl> run('mv {{deploy_path}}/composer.phar {{deploy_path}}/.dep/composer.phar'); <nl> return '{{bin/php}} {{deploy_path}}/.dep/composer.phar'; <nl> ", "msg": "Warning message sentence correction\nCorrected warning message to read a little better."}
{"diff_id": 7521, "repo": "deployphp/deployer", "sha": "377970ef24c98ed8e0d28e4d2e5d831bfb08b624", "time": "10.09.2022 09:18:17", "diff": "mmm a / recipe/deploy/release.php <nl> ppp b / recipe/deploy/release.php <nl>@@ -104,7 +104,16 @@ task('deploy:release', function () { <nl> // Check what there is no such release path. <nl> if (test(\"[ -d $releasePath ]\")) { <nl> - throw new Exception(\"Release name \\\"$releaseName\\\" already exists.\\nRelease name can be overridden via:\\n dep deploy -o release_name=$releaseName\"); <nl> + $freeReleaseName = '...'; <nl> + // Check what $releaseName is integer. <nl> + if (ctype_digit($releaseName)) { <nl> + $freeReleaseName = intval($releaseName); <nl> + // Find free release name. <nl> + while (test(\"[ -d releases/$freeReleaseName ]\")) { <nl> + $freeReleaseName++; <nl> + } <nl> + } <nl> + throw new Exception(\"Release name \\\"$releaseName\\\" already exists.\\nRelease name can be overridden via:\\n dep deploy -o release_name=$freeReleaseName\"); <nl> } <nl> // Save release_name. <nl> ", "msg": "Improve error message: show next free release"}
{"diff_id": 7539, "repo": "kunstmaan/kunstmaanadminbundle", "sha": "7d5d1080f9b6af318ff08ee15d08f7e534334e43", "time": "23.03.2017 12:45:23", "diff": "mmm a / Helper/Security/Acl/Permission/PermissionAdmin.php <nl> ppp b / Helper/Security/Acl/Permission/PermissionAdmin.php <nl>@@ -233,7 +233,7 @@ class PermissionAdmin <nl> $user = $this->tokenStorage->getToken()->getUser(); <nl> $this->createAclChangeSet($this->resource, $changes, $user); <nl> - $cmd = 'php ' . $this->kernel->getRootDir() . '/console kuma:acl:apply'; <nl> + $cmd = 'php bin/console kuma:acl:apply'; <nl> $cmd .= ' --env=' . $this->kernel->getEnvironment(); <nl> $this->shellHelper->runInBackground($cmd); <nl> ", "msg": "[AdminBundle]: fix permissionadmin for sf3"}
{"diff_id": 7540, "repo": "kunstmaan/kunstmaanadminbundle", "sha": "69089c2f59fcc2feade441ad535c75d80ad530d8", "time": "30.03.2017 16:34:11", "diff": "mmm a / Entity/BaseUser.php <nl> ppp b / Entity/BaseUser.php <nl>@@ -64,7 +64,7 @@ abstract class BaseUser extends AbstractUser <nl> * <nl> * @param int $id <nl> * <nl> - * @return User <nl> + * @return BaseUser <nl> */ <nl> public function setId($id) <nl> { <nl> @@ -118,7 +118,7 @@ abstract class BaseUser extends AbstractUser <nl> * <nl> * @param string $adminLocale <nl> * <nl> - * @return User <nl> + * @return BaseUser <nl> */ <nl> public function setAdminLocale($adminLocale) <nl> { <nl> @@ -192,4 +192,13 @@ abstract class BaseUser extends AbstractUser <nl> * @return string <nl> */ <nl> abstract public function getFormTypeClass(); <nl> + <nl> + /** <nl> + * {@inheritdoc} <nl> + */ <nl> + public function isAccountNonLocked() <nl> + { <nl> + return $this->isEnabled(); <nl> + } <nl> + <nl> } <nl> ", "msg": "[AdminBundle]: fix fos user enabled state"}
{"diff_id": 7571, "repo": "kunstmaan/kunstmaanadminbundle", "sha": "93649e457c1a1f368265527832193f267b216b90", "time": "21.01.2019 13:14:42", "diff": "mmm a / Helper/VersionCheck/VersionChecker.php <nl> ppp b / Helper/VersionCheck/VersionChecker.php <nl>@@ -103,7 +103,7 @@ class VersionChecker <nl> $console = realpath($this->container->get('kernel')->getRootDir().'/../bin/console'); <nl> $installed = filectime($console); <nl> $bundles = $this->parseComposer(); <nl> - $title = $this->container->getParameter('websitetitle'); <nl> + $title = $this->container->getParameter('kunstmaan_admin.website_title'); <nl> $jsonData = json_encode(array( <nl> 'host' => $host, <nl> ", "msg": "[AdminBundle] Use correct parameter to retrieve website title"}
{"diff_id": 7572, "repo": "kunstmaan/kunstmaanadminbundle", "sha": "f08145378b2de2edc3c788bdbc3e4af9ef9e07fc", "time": "30.01.2019 14:13:51", "diff": "mmm a / Tests/unit/Helper/Security/Acl/AclHelperTest.php <nl> ppp b / Tests/unit/Helper/Security/Acl/AclHelperTest.php <nl>@@ -322,7 +322,7 @@ class AclHelperTest extends TestCase <nl> public function testGetAllowedEntityIdsNoEntity() <nl> { <nl> - $this->setExpectedException('InvalidArgumentException'); <nl> + $this->expectException('InvalidArgumentException'); <nl> $this->object->getAllowedEntityIds(new PermissionDefinition(array('view'))); <nl> } <nl> ", "msg": "[AdminBundle] fixed phpunit deprecation"}
{"diff_id": 7574, "repo": "kunstmaan/kunstmaanadminbundle", "sha": "ed1b081405dceb70a0047a4109463aa43b41492a", "time": "07.02.2019 15:48:08", "diff": "mmm a / DependencyInjection/Configuration.php <nl> ppp b / DependencyInjection/Configuration.php <nl>@@ -20,8 +20,13 @@ class Configuration implements ConfigurationInterface <nl> */ <nl> public function getConfigTreeBuilder() <nl> { <nl> - $treeBuilder = new TreeBuilder(); <nl> + $treeBuilder = new TreeBuilder('kunstmaan_admin'); <nl> + if (method_exists($treeBuilder, 'getRootNode')) { <nl> + $rootNode = $treeBuilder->getRootNode(); <nl> + } else { <nl> + // BC layer for symfony/config 4.1 and older <nl> $rootNode = $treeBuilder->root('kunstmaan_admin'); <nl> + } <nl> $rootNode <nl> ->fixXmlConfig('admin_locale') <nl> ", "msg": "[AllBundles] Fix sf4 rootNode deprecation"}
{"diff_id": 7577, "repo": "kunstmaan/kunstmaanadminbundle", "sha": "4987a336c20c58abc60a997395f06184c040ffb0", "time": "08.04.2019 09:17:55", "diff": "mmm a / Helper/VersionCheck/VersionChecker.php <nl> ppp b / Helper/VersionCheck/VersionChecker.php <nl>@@ -100,7 +100,7 @@ class VersionChecker <nl> } <nl> $host = $this->container->get('request_stack')->getCurrentRequest()->getHttpHost(); <nl> - $console = realpath($this->container->get('kernel')->getRootDir().'/../bin/console'); <nl> + $console = realpath($this->container->get('kernel')->getProjectDir().'/bin/console'); <nl> $installed = filectime($console); <nl> $bundles = $this->parseComposer(); <nl> $title = $this->container->getParameter('kunstmaan_admin.website_title'); <nl> @@ -160,8 +160,7 @@ class VersionChecker <nl> protected function getLockPath() <nl> { <nl> $kernel = $this->container->get('kernel'); <nl> - $dir = $kernel->getRootDir(); <nl> - $rootPath = dirname($dir); <nl> + $rootPath = $kernel->getProjectDir(); <nl> return $rootPath.'/composer.lock'; <nl> } <nl> ", "msg": "[AllBundles] Replace deprecated getRootDir calls"}
{"diff_id": 7580, "repo": "kunstmaan/kunstmaanadminbundle", "sha": "7ce497b9c971bfbbc93fc1af09118fbcde207ccb", "time": "11.06.2019 14:49:07", "diff": "mmm a / Composer/ScriptHandler.php <nl> ppp b / Composer/ScriptHandler.php <nl>@@ -7,6 +7,11 @@ use Symfony\\Component\\Filesystem\\Exception\\IOException; <nl> use Symfony\\Component\\Filesystem\\Filesystem; <nl> use Symfony\\Component\\Yaml\\Parser; <nl> +@trigger_error(sprintf('The composer script class \"%s\" is deprecated in KunstmaanAdminBundle 5.4 and will be removed in KunstmaanAdminBundle 6.0. If you use this script handler, remove it from your composer.json scripts section.', __CLASS__), E_USER_DEPRECATED); <nl> + <nl> +/** <nl> + * NEXT_MAJOR remove the symfony/filesystem and symfony/yaml as direct dependency of the admin-bundle (if unused in other classes) <nl> + */ <nl> class ScriptHandler <nl> { <nl> protected static $options = array( <nl> ", "msg": "[AdminBundle] Deprecate unused composer script class"}
{"diff_id": 7596, "repo": "kunstmaan/kunstmaanadminbundle", "sha": "6227078e50bb69a48ffb9d747311ff81651419f3", "time": "14.09.2020 13:54:22", "diff": "mmm a / DependencyInjection/KunstmaanAdminExtension.php <nl> ppp b / DependencyInjection/KunstmaanAdminExtension.php <nl>@@ -119,8 +119,6 @@ class KunstmaanAdminExtension extends Extension implements PrependExtensionInter <nl> $container->prependExtensionConfig('twig', $twigConfig); <nl> // NEXT_MAJOR: Remove templating dependency <nl> - $frameworkConfig['templating']['engines'] = ['twig']; <nl> - $container->prependExtensionConfig('framework', $frameworkConfig); <nl> $configs = $container->getExtensionConfig($this->getAlias()); <nl> $this->processConfiguration(new Configuration(), $configs); <nl> ", "msg": "[NodeSearchBundle] Introduce SearchViewRenderer service to deprecate/remove remaining templating usages"}
{"diff_id": 7598, "repo": "kunstmaan/kunstmaanadminbundle", "sha": "ca02347e0c2f9a309c4e823d5565feee4c3d68d4", "time": "05.11.2020 21:52:43", "diff": "mmm a / EventListener/ConsoleExceptionListener.php <nl> ppp b / EventListener/ConsoleExceptionListener.php <nl>@@ -7,8 +7,6 @@ use Symfony\\Component\\Console\\Event\\ConsoleErrorEvent; <nl> use Symfony\\Component\\Console\\Event\\ConsoleExceptionEvent; <nl> /** <nl> - * Class ConsoleExceptionListener. <nl> - * <nl> * @deprecated in KunstmaanAdminBundle 5.1 and will be removed in KunstmaanNodeBundle 6.0. <nl> */ <nl> class ConsoleExceptionListener <nl> @@ -16,9 +14,6 @@ class ConsoleExceptionListener <nl> /** @var LoggerInterface */ <nl> private $logger; <nl> - /** <nl> - * ConsoleExceptionListener constructor. <nl> - */ <nl> public function __construct(LoggerInterface $logger) <nl> { <nl> $this->logger = $logger; <nl> @@ -37,10 +32,6 @@ class ConsoleExceptionListener <nl> $this->logCommandError($command, $exception); <nl> } <nl> - /** <nl> - * @param $command <nl> - * @param $error <nl> - */ <nl> private function logCommandError($command, $error) <nl> { <nl> $message = sprintf( <nl> ", "msg": "[AdminBundle] Enhancement: Remove useless PHPDoc"}
{"diff_id": 7606, "repo": "kunstmaan/kunstmaanadminbundle", "sha": "1bbb8c3c85e01391d67b0049e2ba68de175d7413", "time": "15.09.2021 23:04:05", "diff": "mmm a / Entity/BaseUser.php <nl> ppp b / Entity/BaseUser.php <nl>@@ -7,13 +7,15 @@ use Doctrine\\ORM\\Mapping as ORM; <nl> use FOS\\UserBundle\\Model\\GroupInterface; <nl> use Kunstmaan\\AdminBundle\\Validator\\Constraints\\PasswordRestrictions; <nl> use Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntity; <nl> -use Symfony\\Component\\Security\\Core\\User\\EquatableInterface; <nl> use Symfony\\Component\\Security\\Core\\User\\UserInterface as BaseUserInterface; <nl> use Symfony\\Component\\Validator\\Constraints\\Email; <nl> use Symfony\\Component\\Validator\\Constraints\\NotBlank; <nl> use Symfony\\Component\\Validator\\Mapping\\ClassMetadata; <nl> -abstract class BaseUser implements UserInterface, EquatableInterface <nl> +/** <nl> + * NEXT_MAJOR implement EquatableInterface <nl> + */ <nl> +abstract class BaseUser implements UserInterface <nl> { <nl> /** <nl> * @ORM\\Id <nl> ", "msg": "[AdminBundle] Fix User incompatibility after new authentication changes"}
{"diff_id": 7652, "repo": "doctrine/dbal", "sha": "f4437acbea43b27d95f76fcead0e0694e2693f3b", "time": "23.06.2017 22:27:15", "diff": "mmm a / lib/Doctrine/DBAL/Connection.php <nl> ppp b / lib/Doctrine/DBAL/Connection.php <nl>@@ -603,33 +603,33 @@ class Connection implements DriverConnection <nl> } <nl> /** <nl> - * Gathers criteria for an update or delete call. <nl> + * Gathers conditions for an update or delete call. <nl> * <nl> * @param array $identifiers Input array of columns to values <nl> * <nl> * @return string[][] a triplet with: <nl> - * - the first key being the column names <nl> + * - the first key being the columns <nl> * - the second key being the values <nl> - * - the third key being the criteria strings <nl> + * - the third key being the conditions <nl> */ <nl> - private function gatherCriteria(array $identifiers) <nl> + private function gatherConditions(array $identifiers) <nl> { <nl> $columns = []; <nl> $values = []; <nl> - $criteria = []; <nl> + $conditions = []; <nl> foreach ($identifiers as $columnName => $value) { <nl> if (null === $value) { <nl> - $criteria[] = $this->getDatabasePlatform()->getIsNullExpression($columnName); <nl> + $conditions[] = $this->getDatabasePlatform()->getIsNullExpression($columnName); <nl> continue; <nl> } <nl> $columns[] = $columnName; <nl> $values[] = $value; <nl> - $criteria[] = $columnName . ' = ?'; <nl> + $conditions[] = $columnName . ' = ?'; <nl> } <nl> - return [$columns, $values, $criteria]; <nl> + return [$columns, $values, $conditions]; <nl> } <nl> /** <nl> @@ -651,12 +651,12 @@ class Connection implements DriverConnection <nl> throw InvalidArgumentException::fromEmptyCriteria(); <nl> } <nl> - list($columnList, $paramValues, $criteria) = $this->gatherCriteria($identifier); <nl> + list($columns, $values, $conditions) = $this->gatherConditions($identifier); <nl> return $this->executeUpdate( <nl> - 'DELETE FROM ' . $tableExpression . ' WHERE ' . implode(' AND ', $criteria), <nl> - $paramValues, <nl> - is_string(key($types)) ? $this->extractTypeValues($columnList, $types) : $types <nl> + 'DELETE FROM ' . $tableExpression . ' WHERE ' . implode(' AND ', $conditions), <nl> + $values, <nl> + is_string(key($types)) ? $this->extractTypeValues($columns, $types) : $types <nl> ); <nl> } <nl> @@ -714,28 +714,28 @@ class Connection implements DriverConnection <nl> */ <nl> public function update($tableExpression, array $data, array $identifier, array $types = array()) <nl> { <nl> - $columnList = array(); <nl> + $setColumns = array(); <nl> + $setValues = array(); <nl> $set = array(); <nl> - $paramValues = array(); <nl> foreach ($data as $columnName => $value) { <nl> - $columnList[] = $columnName; <nl> + $setColumns[] = $columnName; <nl> + $setValues[] = $value; <nl> $set[] = $columnName . ' = ?'; <nl> - $paramValues[] = $value; <nl> } <nl> - list($whereColumns, $whereValues, $criteria) = $this->gatherCriteria($identifier); <nl> - $columnList = array_merge($columnList, $whereColumns); <nl> - $paramValues = array_merge($paramValues, $whereValues); <nl> + list($conditionColumns, $conditionValues, $conditions) = $this->gatherConditions($identifier); <nl> + $columns = array_merge($setColumns, $conditionColumns); <nl> + $values = array_merge($setValues, $conditionValues); <nl> if (is_string(key($types))) { <nl> - $types = $this->extractTypeValues($columnList, $types); <nl> + $types = $this->extractTypeValues($columns, $types); <nl> } <nl> $sql = 'UPDATE ' . $tableExpression . ' SET ' . implode(', ', $set) <nl> - . ' WHERE ' . implode(' AND ', $criteria); <nl> + . ' WHERE ' . implode(' AND ', $conditions); <nl> - return $this->executeUpdate($sql, $paramValues, $types); <nl> + return $this->executeUpdate($sql, $values, $types); <nl> } <nl> /** <nl> @@ -755,21 +755,21 @@ class Connection implements DriverConnection <nl> return $this->executeUpdate('INSERT INTO ' . $tableExpression . ' ()' . ' VALUES ()'); <nl> } <nl> - $columnList = array(); <nl> - $paramPlaceholders = array(); <nl> - $paramValues = array(); <nl> + $columns = array(); <nl> + $values = array(); <nl> + $set = array(); <nl> foreach ($data as $columnName => $value) { <nl> - $columnList[] = $columnName; <nl> - $paramPlaceholders[] = '?'; <nl> - $paramValues[] = $value; <nl> + $columns[] = $columnName; <nl> + $values[] = $value; <nl> + $set[] = '?'; <nl> } <nl> return $this->executeUpdate( <nl> - 'INSERT INTO ' . $tableExpression . ' (' . implode(', ', $columnList) . ')' . <nl> - ' VALUES (' . implode(', ', $paramPlaceholders) . ')', <nl> - $paramValues, <nl> - is_string(key($types)) ? $this->extractTypeValues($columnList, $types) : $types <nl> + 'INSERT INTO ' . $tableExpression . ' (' . implode(', ', $columns) . ')' . <nl> + ' VALUES (' . implode(', ', $set) . ')', <nl> + $values, <nl> + is_string(key($types)) ? $this->extractTypeValues($columns, $types) : $types <nl> ); <nl> } <nl> ", "msg": "Connection: insert/update/delete variable naming cleanup"}
{"diff_id": 7665, "repo": "doctrine/dbal", "sha": "240101ffa7e14c95871aa78ca2fa6e362ff90eb7", "time": "31.08.2017 17:09:04", "diff": "mmm a / lib/Doctrine/DBAL/Types/Type.php <nl> ppp b / lib/Doctrine/DBAL/Types/Type.php <nl>@@ -338,7 +338,7 @@ abstract class Type <nl> /** <nl> * If this Doctrine Type maps to an already mapped database type, <nl> - * reverse schema engineering can't take them apart. You need to mark <nl> + * reverse schema engineering can't tell them apart. You need to mark <nl> * one of those types as commented, which will have Doctrine use an SQL <nl> * comment to typehint the actual Doctrine Type. <nl> * <nl> ", "msg": "Use intended semantics\nI think distinguish was the intended meaning here, not dismantle."}
{"diff_id": 7666, "repo": "doctrine/dbal", "sha": "b66d704748f5e1c75f3510b0a7264c98b07b523a", "time": "09.09.2017 09:45:44", "diff": "mmm a / lib/Doctrine/DBAL/Platforms/AbstractPlatform.php <nl> ppp b / lib/Doctrine/DBAL/Platforms/AbstractPlatform.php <nl>namespace Doctrine\\DBAL\\Platforms; <nl> -use Doctrine\\DBAL\\DBALException; <nl> +use Doctrine\\Common\\EventManager; <nl> use Doctrine\\DBAL\\Connection; <nl> -use Doctrine\\DBAL\\Schema\\Identifier; <nl> -use Doctrine\\DBAL\\Types; <nl> +use Doctrine\\DBAL\\DBALException; <nl> +use Doctrine\\DBAL\\Event\\SchemaAlterTableAddColumnEventArgs; <nl> +use Doctrine\\DBAL\\Event\\SchemaAlterTableChangeColumnEventArgs; <nl> +use Doctrine\\DBAL\\Event\\SchemaAlterTableEventArgs; <nl> +use Doctrine\\DBAL\\Event\\SchemaAlterTableRemoveColumnEventArgs; <nl> +use Doctrine\\DBAL\\Event\\SchemaAlterTableRenameColumnEventArgs; <nl> +use Doctrine\\DBAL\\Event\\SchemaCreateTableColumnEventArgs; <nl> +use Doctrine\\DBAL\\Event\\SchemaCreateTableEventArgs; <nl> +use Doctrine\\DBAL\\Event\\SchemaDropTableEventArgs; <nl> +use Doctrine\\DBAL\\Events; <nl> +use Doctrine\\DBAL\\Schema\\Column; <nl> +use Doctrine\\DBAL\\Schema\\ColumnDiff; <nl> use Doctrine\\DBAL\\Schema\\Constraint; <nl> +use Doctrine\\DBAL\\Schema\\ForeignKeyConstraint; <nl> +use Doctrine\\DBAL\\Schema\\Identifier; <nl> +use Doctrine\\DBAL\\Schema\\Index; <nl> use Doctrine\\DBAL\\Schema\\Sequence; <nl> use Doctrine\\DBAL\\Schema\\Table; <nl> -use Doctrine\\DBAL\\Schema\\Index; <nl> -use Doctrine\\DBAL\\Schema\\ForeignKeyConstraint; <nl> use Doctrine\\DBAL\\Schema\\TableDiff; <nl> -use Doctrine\\DBAL\\Schema\\Column; <nl> -use Doctrine\\DBAL\\Schema\\ColumnDiff; <nl> +use Doctrine\\DBAL\\Types; <nl> use Doctrine\\DBAL\\Types\\Type; <nl> -use Doctrine\\DBAL\\Events; <nl> -use Doctrine\\Common\\EventManager; <nl> -use Doctrine\\DBAL\\Event\\SchemaCreateTableEventArgs; <nl> -use Doctrine\\DBAL\\Event\\SchemaCreateTableColumnEventArgs; <nl> -use Doctrine\\DBAL\\Event\\SchemaDropTableEventArgs; <nl> -use Doctrine\\DBAL\\Event\\SchemaAlterTableEventArgs; <nl> -use Doctrine\\DBAL\\Event\\SchemaAlterTableAddColumnEventArgs; <nl> -use Doctrine\\DBAL\\Event\\SchemaAlterTableRemoveColumnEventArgs; <nl> -use Doctrine\\DBAL\\Event\\SchemaAlterTableChangeColumnEventArgs; <nl> -use Doctrine\\DBAL\\Event\\SchemaAlterTableRenameColumnEventArgs; <nl> /** <nl> * Base class for all DatabasePlatforms. The DatabasePlatforms are the central <nl> ", "msg": "Sort use statements\nIt groups things naturally."}
{"diff_id": 7682, "repo": "doctrine/dbal", "sha": "f81afb19ff98d93d7c74994ce30d70ed804d3069", "time": "13.10.2017 09:49:31", "diff": "mmm a / lib/Doctrine/DBAL/Driver/AbstractMySQLDriver.php <nl> ppp b / lib/Doctrine/DBAL/Driver/AbstractMySQLDriver.php <nl>@@ -127,7 +127,7 @@ abstract class AbstractMySQLDriver implements Driver, ExceptionConverterDriver, <nl> /** <nl> * {@inheritdoc} <nl> * <nl> - * @return AbstractPlatform|MariaDb1027Platform|MySQL57Platform|MySqlPlatform <nl> + * @return AbstractPlatform <nl> * @throws DBALException <nl> */ <nl> public function createDatabasePlatformForVersion($version) <nl> ", "msg": "morozov removed type doc: AbstractPlatform cover everything"}
{"diff_id": 7690, "repo": "doctrine/dbal", "sha": "e9c99321eaf53f99a507e0a17bb41a5e02cea629", "time": "15.11.2017 14:27:56", "diff": "mmm a / tests/Doctrine/Tests/DBAL/Functional/Schema/MySqlSchemaManagerTest.php <nl> ppp b / tests/Doctrine/Tests/DBAL/Functional/Schema/MySqlSchemaManagerTest.php <nl>@@ -451,13 +451,29 @@ class MySqlSchemaManagerTest extends SchemaManagerFunctionalTestCase <nl> * Ensure default values (un-)escaping is properly done by mysql platforms. <nl> * The test is voluntarily relying on schema introspection due to current <nl> * doctrine limitations. Once #2850 is landed, this test can be removed. <nl> + * @see https://dev.mysql.com/doc/refman/5.7/en/string-literals.html <nl> */ <nl> public function testEnsureDefaultsAreUnescapedFromSchemaIntrospection() : void <nl> { <nl> $platform = $this->_sm->getDatabasePlatform(); <nl> $this->_conn->query('DROP TABLE IF EXISTS test_column_defaults_with_create'); <nl> - $default = \"a\\\\0b\\\\'c\\\"d\\te\\\\Zf\\\\\\\\g''h\"; <nl> + // https://dev.mysql.com/doc/refman/5.7/en/string-literals.html <nl> + $escapeSequences = [ <nl> + \"\\\\0\", // An ASCII NUL (X'00') character <nl> + \"\\\\'\", \"''\", // Single quote <nl> + '\\\\\"', '\"\"', // Double quote <nl> + '\\\\b', // A backspace character <nl> + '\\\\n', // A new-line character <nl> + '\\\\r', // A carriage return character <nl> + '\\\\t', // A tab character <nl> + '\\\\Z', // ASCII 26 (Control+Z) <nl> + '\\\\\\\\', // A backslash (\\) character <nl> + '\\\\%', // A percent (%) character <nl> + '\\\\_', // An underscore (_) character <nl> + ]; <nl> + $default = implode('+', $escapeSequences); <nl> + <nl> $sql = \"CREATE TABLE test_column_defaults_with_create( <nl> col1 VARCHAR(255) NULL DEFAULT {$platform->quoteStringLiteral($default)} <nl> )\"; <nl> ", "msg": "Improves readability of escape sequences"}
{"diff_id": 7706, "repo": "doctrine/dbal", "sha": "5e2b7f8959794e97d9fc653da5d61358b708095a", "time": "26.12.2017 21:19:27", "diff": "mmm a / lib/Doctrine/DBAL/Driver/Connection.php <nl> ppp b / lib/Doctrine/DBAL/Driver/Connection.php <nl>@@ -36,14 +36,14 @@ interface Connection <nl> * <nl> * @return \\Doctrine\\DBAL\\Driver\\Statement <nl> */ <nl> - function prepare($prepareString); <nl> + public function prepare($prepareString); <nl> /** <nl> * Executes an SQL statement, returning a result set as a Statement object. <nl> * <nl> * @return \\Doctrine\\DBAL\\Driver\\Statement <nl> */ <nl> - function query(); <nl> + public function query(); <nl> /** <nl> * Quotes a string for use in a query. <nl> @@ -53,7 +53,7 @@ interface Connection <nl> * <nl> * @return mixed <nl> */ <nl> - function quote($input, $type=\\PDO::PARAM_STR); <nl> + public function quote($input, $type = \\PDO::PARAM_STR); <nl> /** <nl> * Executes an SQL statement and return the number of affected rows. <nl> @@ -62,7 +62,7 @@ interface Connection <nl> * <nl> * @return int <nl> */ <nl> - function exec($statement); <nl> + public function exec($statement); <nl> /** <nl> * Returns the ID of the last inserted row or sequence value. <nl> @@ -71,40 +71,40 @@ interface Connection <nl> * <nl> * @return string <nl> */ <nl> - function lastInsertId($name = null); <nl> + public function lastInsertId($name = null); <nl> /** <nl> * Initiates a transaction. <nl> * <nl> * @return bool TRUE on success or FALSE on failure. <nl> */ <nl> - function beginTransaction(); <nl> + public function beginTransaction(); <nl> /** <nl> * Commits a transaction. <nl> * <nl> * @return bool TRUE on success or FALSE on failure. <nl> */ <nl> - function commit(); <nl> + public function commit(); <nl> /** <nl> * Rolls back the current transaction, as initiated by beginTransaction(). <nl> * <nl> * @return bool TRUE on success or FALSE on failure. <nl> */ <nl> - function rollBack(); <nl> + public function rollBack(); <nl> /** <nl> * Returns the error code associated with the last operation on the database handle. <nl> * <nl> * @return string|null The error code, or null if no operation has been run on the database handle. <nl> */ <nl> - function errorCode(); <nl> + public function errorCode(); <nl> /** <nl> * Returns extended error information associated with the last operation on the database handle. <nl> * <nl> * @return array <nl> */ <nl> - function errorInfo(); <nl> + public function errorInfo(); <nl> } <nl> ", "msg": "Added visibility for interface methods as required by the coding standard"}
{"diff_id": 7707, "repo": "doctrine/dbal", "sha": "a979518cbbed3fef9bda43ee897a3ffbb4469b50", "time": "31.12.2017 19:26:15", "diff": "mmm a / lib/Doctrine/DBAL/Connection.php <nl> ppp b / lib/Doctrine/DBAL/Connection.php <nl>@@ -82,14 +82,14 @@ class Connection implements DriverConnection <nl> * <nl> * @var int <nl> */ <nl> - const PARAM_INT_ARRAY = 101; <nl> + const PARAM_INT_ARRAY = ParameterType::INTEGER + self::ARRAY_PARAM_OFFSET; <nl> /** <nl> * Represents an array of strings to be expanded by Doctrine SQL parsing. <nl> * <nl> * @var int <nl> */ <nl> - const PARAM_STR_ARRAY = 102; <nl> + const PARAM_STR_ARRAY = ParameterType::STRING + self::ARRAY_PARAM_OFFSET; <nl> /** <nl> * Offset by which PARAM_* constants are detected as arrays of the param type. <nl> ", "msg": "Expressed PARAM_*_ARRAY through other constants to eliminate the dependency on the actual constant values"}
{"diff_id": 7709, "repo": "doctrine/dbal", "sha": "3306fa7bc354edfbb7eb51b6b437daebd718d9c4", "time": "07.02.2018 00:34:47", "diff": "mmm a / lib/Doctrine/DBAL/Query/Expression/ExpressionBuilder.php <nl> ppp b / lib/Doctrine/DBAL/Query/Expression/ExpressionBuilder.php <nl>namespace Doctrine\\DBAL\\Query\\Expression; <nl> use Doctrine\\DBAL\\Connection; <nl> +use function func_get_args; <nl> +use function func_num_args; <nl> +use function sprintf; <nl> /** <nl> * ExpressionBuilder class is responsible to dynamically create SQL query parts. <nl> @@ -256,7 +259,8 @@ class ExpressionBuilder <nl> */ <nl> public function like($x, $y) <nl> { <nl> - return $this->comparison($x, 'LIKE', $y); <nl> + return $this->comparison($x, 'LIKE', $y) . <nl> + (func_num_args() >= 3 ? sprintf(\" ESCAPE '%s'\", func_get_args()[2]) : ''); <nl> } <nl> /** <nl> @@ -269,7 +273,8 @@ class ExpressionBuilder <nl> */ <nl> public function notLike($x, $y) <nl> { <nl> - return $this->comparison($x, 'NOT LIKE', $y); <nl> + return $this->comparison($x, 'NOT LIKE', $y) . <nl> + (func_num_args() >= 3 ? sprintf(\" ESCAPE '%s'\", func_get_args()[2]) : ''); <nl> } <nl> /** <nl> ", "msg": "Make building LIKE expression with escaping easier\nIt was possible to provide escaping through the second argument but that\nwas more like a hack."}
{"diff_id": 7715, "repo": "doctrine/dbal", "sha": "35982f2cb3d3c6c94aa621b66ebfe527aadc2bd5", "time": "09.02.2018 20:58:36", "diff": "mmm a / tests/Doctrine/Tests/DBAL/Functional/LikeWildcardsEscapingTest.php <nl> ppp b / tests/Doctrine/Tests/DBAL/Functional/LikeWildcardsEscapingTest.php <nl>namespace Doctrine\\Tests\\DBAL\\Functional; <nl> -use Doctrine\\DBAL\\Platforms\\OraclePlatform; <nl> use Doctrine\\Tests\\DbalFunctionalTestCase; <nl> +use function sprintf; <nl> +use function str_replace; <nl> final class LikeWildcardsEscapingTest extends DbalFunctionalTestCase <nl> { <nl> @@ -12,12 +13,15 @@ final class LikeWildcardsEscapingTest extends DbalFunctionalTestCase <nl> $string = '_25% off_ your next purchase \\o/'; <nl> $escapeChar = '!'; <nl> $databasePlatform = $this->_conn->getDatabasePlatform(); <nl> - $stmt = $this->_conn->prepare(sprintf( <nl> - \"SELECT (CASE WHEN '%s' LIKE '%s' ESCAPE '%s' THEN 1 ELSE 0 END)\" . <nl> - ($databasePlatform instanceof OraclePlatform ? ' FROM dual' : ''), <nl> + $stmt = $this->_conn->prepare(str_replace( <nl> + '1', <nl> + sprintf( <nl> + \"(CASE WHEN '%s' LIKE '%s' ESCAPE '%s' THEN 1 ELSE 0 END)\", <nl> $string, <nl> $databasePlatform->escapeStringForLike($string, $escapeChar), <nl> $escapeChar <nl> + ), <nl> + $databasePlatform->getDummySelectSQL() <nl> )); <nl> $stmt->execute(); <nl> $this->assertTrue((bool) $stmt->fetchColumn()); <nl> ", "msg": "Use dummy SELECT SQL\nThis should take care of most idiosyncracies."}
{"diff_id": 7720, "repo": "doctrine/dbal", "sha": "cadd79c690e0b49bcd53cf991455607cc375f37e", "time": "14.03.2018 23:34:31", "diff": "mmm a / lib/Doctrine/DBAL/Driver/SQLSrv/SQLSrvConnection.php <nl> ppp b / lib/Doctrine/DBAL/Driver/SQLSrv/SQLSrvConnection.php <nl>@@ -136,11 +136,11 @@ class SQLSrvConnection implements Connection, ServerInfoAwareConnection <nl> if ($name !== null) { <nl> $stmt = $this->prepare('SELECT CONVERT(VARCHAR(MAX), current_value) FROM sys.sequences WHERE name = ?'); <nl> $stmt->execute([$name]); <nl> - <nl> - return $stmt->fetchColumn(); <nl> + } else { <nl> + $stmt = $this->query('SELECT @@IDENTITY'); <nl> } <nl> - return $this->lastInsertId->getId(); <nl> + return $stmt->fetchColumn(); <nl> } <nl> /** <nl> ", "msg": "Fixed fetching last inserted ID from a SQL Server connection"}
{"diff_id": 7736, "repo": "doctrine/dbal", "sha": "b1afc40d1d43430f802d00bc4529b9197c051a0e", "time": "27.11.2018 23:40:56", "diff": "mmm a / tests/Doctrine/Tests/DBAL/Functional/Schema/OracleSchemaManagerTest.php <nl> ppp b / tests/Doctrine/Tests/DBAL/Functional/Schema/OracleSchemaManagerTest.php <nl>@@ -11,20 +11,25 @@ use function array_map; <nl> class OracleSchemaManagerTest extends SchemaManagerFunctionalTestCase <nl> { <nl> + /** @var bool */ <nl> + private static $privilegesGranted = false; <nl> + <nl> protected function setUp() <nl> { <nl> parent::setUp(); <nl> - if (! isset($GLOBALS['db_username'])) { <nl> - $this->markTestSkipped('Foo'); <nl> + if (self::$privilegesGranted) { <nl> + return; <nl> } <nl> - $username = $GLOBALS['db_username']; <nl> + if (! isset($GLOBALS['db_username'])) { <nl> + self::markTestSkipped('Username must be explicitly specified in connection parameters for this test'); <nl> + } <nl> - $query = 'GRANT ALL PRIVILEGES TO ' . $username; <nl> + TestUtil::getTempConnection() <nl> + ->exec('GRANT ALL PRIVILEGES TO ' . $GLOBALS['db_username']); <nl> - $conn = TestUtil::getTempConnection(); <nl> - $conn->executeUpdate($query); <nl> + self::$privilegesGranted = true; <nl> } <nl> public function testRenameTable() <nl> ", "msg": "Fixed a potential cause of TNS:no appropriate service handler found"}
{"diff_id": 7744, "repo": "doctrine/dbal", "sha": "ccc6a0afab3be41dc985968cb6c0108f5c7508c4", "time": "08.02.2019 15:31:19", "diff": "mmm a / lib/Doctrine/DBAL/Platforms/SQLServerPlatform.php <nl> ppp b / lib/Doctrine/DBAL/Platforms/SQLServerPlatform.php <nl>@@ -1278,7 +1278,7 @@ SQL <nl> // Even if the TOP n is very large, the use of a CTE will <nl> // allow the SQL Server query planner to optimize it so it doesn't <nl> // actually scan the entire range covered by the TOP clause. <nl> - if (! preg_match('/^(\\s*SELECT\\s+(?:DISTINCT\\s+)?)(.*)$/im', $query, $matches)) { <nl> + if (! preg_match('/^(\\s*SELECT\\s+(?:DISTINCT\\s+)?)(.*)$/is', $query, $matches)) { <nl> return $query; <nl> } <nl> ", "msg": "Fixed regression on SQL Server introduced by a recent rework"}
{"diff_id": 7754, "repo": "doctrine/dbal", "sha": "442c684336b77491d94110089504e6f803d45eea", "time": "16.09.2019 17:07:46", "diff": "mmm a / lib/Doctrine/DBAL/Driver/StatementIterator.php <nl> ppp b / lib/Doctrine/DBAL/Driver/StatementIterator.php <nl>@@ -6,10 +6,10 @@ use IteratorAggregate; <nl> class StatementIterator implements IteratorAggregate <nl> { <nl> - /** @var Statement */ <nl> + /** @var ResultStatement */ <nl> private $statement; <nl> - public function __construct(Statement $statement) <nl> + public function __construct(ResultStatement $statement) <nl> { <nl> $this->statement = $statement; <nl> } <nl> ", "msg": "Relax statement type declaration\nfetch() is part of the ResultStatement interface. Using Statement as a\ntype declaration needlessly constrains people to use this class only\nwith implementations of Statement."}
{"diff_id": 7768, "repo": "doctrine/dbal", "sha": "a56eeee8a96ed34c1effcbe5f2263aa471a54909", "time": "29.03.2020 15:32:33", "diff": "mmm a / lib/Doctrine/DBAL/Tools/Dumper.php <nl> ppp b / lib/Doctrine/DBAL/Tools/Dumper.php <nl>@@ -17,7 +17,6 @@ use function explode; <nl> use function extension_loaded; <nl> use function get_class; <nl> use function html_entity_decode; <nl> -use function ini_get; <nl> use function ini_set; <nl> use function is_array; <nl> use function is_object; <nl> @@ -55,14 +54,11 @@ final class Dumper <nl> */ <nl> public static function dump($var, int $maxDepth = 2) : string <nl> { <nl> - $html = ini_get('html_errors'); <nl> - <nl> - if ($html !== true) { <nl> - ini_set('html_errors', true); <nl> - } <nl> + $html = ini_set('html_errors', '1'); <nl> + assert(is_string($html)); <nl> if (extension_loaded('xdebug')) { <nl> - ini_set('xdebug.var_display_max_depth', $maxDepth); <nl> + ini_set('xdebug.var_display_max_depth', (string) $maxDepth); <nl> } <nl> $var = self::export($var, $maxDepth); <nl> ", "msg": "Use strings to work with ini_get() and ini_set()\nAdditionally, set the new value and get the old one in one ini_set() call."}
{"diff_id": 7771, "repo": "doctrine/dbal", "sha": "d45fd7ad5c712ff7237d80218ed423e4fd2c59df", "time": "03.04.2020 18:29:56", "diff": "mmm a / tests/Platforms/OraclePlatformTest.php <nl> ppp b / tests/Platforms/OraclePlatformTest.php <nl>@@ -87,7 +87,7 @@ class OraclePlatformTest extends AbstractPlatformTestCase <nl> } <nl> /** <nl> - * @return mixed[] <nl> + * {@inheritDoc} <nl> */ <nl> public function getGenerateTableWithMultiColumnUniqueIndexSql() : array <nl> { <nl> @@ -405,7 +405,7 @@ class OraclePlatformTest extends AbstractPlatformTestCase <nl> } <nl> /** <nl> - * @return mixed[] <nl> + * {@inheritDoc} <nl> */ <nl> protected function getQuotedColumnInPrimaryKeySQL() : array <nl> { <nl> @@ -413,7 +413,7 @@ class OraclePlatformTest extends AbstractPlatformTestCase <nl> } <nl> /** <nl> - * @return mixed[] <nl> + * {@inheritDoc} <nl> */ <nl> protected function getQuotedColumnInIndexSQL() : array <nl> { <nl> @@ -424,7 +424,7 @@ class OraclePlatformTest extends AbstractPlatformTestCase <nl> } <nl> /** <nl> - * @return mixed[] <nl> + * {@inheritDoc} <nl> */ <nl> protected function getQuotedNameInIndexSQL() : array <nl> { <nl> @@ -435,7 +435,7 @@ class OraclePlatformTest extends AbstractPlatformTestCase <nl> } <nl> /** <nl> - * @return mixed[] <nl> + * {@inheritDoc} <nl> */ <nl> protected function getQuotedColumnInForeignKeySQL() : array <nl> { <nl> ", "msg": "Fixed return values types to match the parent method types"}
{"diff_id": 7786, "repo": "doctrine/dbal", "sha": "8f7ea5263fda57ddd03591bf9ac77b26e9034b89", "time": "23.04.2020 00:00:39", "diff": "mmm a / tests/Doctrine/Tests/DBAL/DriverManagerTest.php <nl> ppp b / tests/Doctrine/Tests/DBAL/DriverManagerTest.php <nl>@@ -242,7 +242,7 @@ class DriverManagerTest extends DbalTestCase <nl> } <nl> /** <nl> - * @return array<string, array<int, mixed>> <nl> + * @return array<string, list<mixed>> <nl> */ <nl> public function databaseUrls() : iterable <nl> { <nl> ", "msg": "Use list\nIt is more simple and more accurate"}
{"diff_id": 7788, "repo": "doctrine/dbal", "sha": "633f9e36524fc44bcc16b0d98b54bbc17686867f", "time": "23.04.2020 07:36:53", "diff": "mmm a / tests/Doctrine/Tests/DBAL/Schema/ComparatorTest.php <nl> ppp b / tests/Doctrine/Tests/DBAL/Schema/ComparatorTest.php <nl>@@ -872,6 +872,7 @@ class ComparatorTest extends TestCase <nl> /** <nl> * @group DBAL-106 <nl> + * @psalm-suppress NullArgument <nl> */ <nl> public function testDiffDecimalWithNullPrecision() : void <nl> { <nl> ", "msg": "Suppress deliberate error\nWe are testing what happens when providing the wrong type."}
{"diff_id": 7796, "repo": "doctrine/dbal", "sha": "682012fcf7e69ba7f599a27d9944c249e3db315a", "time": "25.04.2020 12:00:41", "diff": "mmm a / tests/Doctrine/Tests/DBAL/DriverManagerTest.php <nl> ppp b / tests/Doctrine/Tests/DBAL/DriverManagerTest.php <nl>@@ -107,6 +107,7 @@ class DriverManagerTest extends DbalTestCase <nl> /** <nl> * @requires extension pdo_sqlite <nl> + * @psalm-suppress InvalidArgument <nl> */ <nl> public function testInvalidWrapperClass() : void <nl> { <nl> ", "msg": "Suppress InvalidArgument error\nThis is precisely what we are testing here."}
{"diff_id": 7809, "repo": "doctrine/dbal", "sha": "abb6800d48a29244d22b0f5b2b0d5639d74f4e34", "time": "19.06.2020 17:44:58", "diff": "mmm a / lib/Doctrine/DBAL/Driver/PDOConnection.php <nl> ppp b / lib/Doctrine/DBAL/Driver/PDOConnection.php <nl>@@ -38,7 +38,10 @@ class PDOConnection extends PDO implements Connection, ServerInfoAwareConnection <nl> public function exec($statement) <nl> { <nl> try { <nl> - return parent::exec($statement); <nl> + $result = parent::exec($statement); <nl> + assert($result !== false); <nl> + <nl> + return $result; <nl> } catch (\\PDOException $exception) { <nl> throw new PDOException($exception); <nl> } <nl> ", "msg": "PDO APIs need additional assertions due to the existing error suppression mode"}
{"diff_id": 7832, "repo": "doctrine/dbal", "sha": "76564ab8cbc0820b63927cb606fefaf7309a1dc6", "time": "16.08.2020 21:18:53", "diff": "mmm a / tests/Doctrine/Tests/TestUtil.php <nl> ppp b / tests/Doctrine/Tests/TestUtil.php <nl>@@ -175,6 +175,11 @@ class TestUtil <nl> 'dbname', <nl> 'port', <nl> 'server', <nl> + 'ssl_key', <nl> + 'ssl_cert', <nl> + 'ssl_ca', <nl> + 'ssl_capath', <nl> + 'ssl_cipher', <nl> 'unix_socket', <nl> ] as $parameter <nl> ) { <nl> ", "msg": "Add the possibility to specify SSL-related parameters in test configuration"}
{"diff_id": 7849, "repo": "doctrine/dbal", "sha": "9e97067b46689358a73c4ebf63db3ca18bb7712b", "time": "02.10.2020 15:02:36", "diff": "mmm a / tests/Doctrine/Tests/DBAL/Functional/ResultCacheTest.php <nl> ppp b / tests/Doctrine/Tests/DBAL/Functional/ResultCacheTest.php <nl>@@ -243,7 +243,7 @@ class ResultCacheTest extends DbalFunctionalTestCase <nl> } <nl> /** <nl> - * @param array<int, array<int, int|string>>|list<int> $expectedResult <nl> + * @param list<mixed> $expectedResult <nl> */ <nl> private function assertCacheNonCacheSelectSameFetchModeAreEqual(array $expectedResult, int $fetchMode): void <nl> { <nl> ", "msg": "Loosen an unnecessarily strict type"}
{"diff_id": 7873, "repo": "doctrine/dbal", "sha": "29fc5c6590a1f02ce61583b8bd42a8c54bab9975", "time": "01.11.2020 16:38:34", "diff": "mmm a / lib/Doctrine/DBAL/Driver/PDOOracle/Driver.php <nl> ppp b / lib/Doctrine/DBAL/Driver/PDOOracle/Driver.php <nl>@@ -10,10 +10,6 @@ use PDOException; <nl> /** <nl> * PDO Oracle driver. <nl> * <nl> - * WARNING: PDO Oracle is not maintained by Oracle or anyone in the PHP community, <nl> - * which leads us to the recommendation to use the \"oci8\" driver to connect <nl> - * to Oracle instead. <nl> - * <nl> * @deprecated Use {@link PDO\\OCI\\Driver} instead. <nl> */ <nl> class Driver extends AbstractOracleDriver <nl> ", "msg": "Remove no longer valid comment - pdo_oci is maintaned by php people"}
{"diff_id": 7898, "repo": "doctrine/dbal", "sha": "f33960fead4e282e497d7579da331b32c5c75abe", "time": "06.03.2021 18:14:44", "diff": "mmm a / lib/Doctrine/DBAL/Driver/PDOStatement.php <nl> ppp b / lib/Doctrine/DBAL/Driver/PDOStatement.php <nl>@@ -6,6 +6,7 @@ use Doctrine\\DBAL\\Driver\\PDO\\Exception; <nl> use Doctrine\\DBAL\\Driver\\Statement as StatementInterface; <nl> use Doctrine\\DBAL\\FetchMode; <nl> use Doctrine\\DBAL\\ParameterType; <nl> +use Doctrine\\Deprecations\\Deprecation; <nl> use PDO; <nl> use PDOException; <nl> @@ -13,10 +14,6 @@ use function array_slice; <nl> use function assert; <nl> use function func_get_args; <nl> use function is_array; <nl> -use function sprintf; <nl> -use function trigger_error; <nl> - <nl> -use const E_USER_DEPRECATED; <nl> /** <nl> * The PDO implementation of the Statement interface. <nl> @@ -274,10 +271,13 @@ class PDOStatement extends \\PDOStatement implements StatementInterface, Result <nl> { <nl> if (! isset(self::PARAM_TYPE_MAP[$type])) { <nl> // TODO: next major: throw an exception <nl> - @trigger_error(sprintf( <nl> - 'Using a PDO parameter type (%d given) is deprecated and will cause an error in Doctrine DBAL 3.0', <nl> + Deprecation::trigger( <nl> + 'doctrine/dbal', <nl> + 'https://github.com/doctrine/dbal/pull/3088', <nl> + 'Using a PDO parameter type (%d given) is deprecated, ' . <nl> + 'use \\Doctrine\\DBAL\\Types\\Types constants instead.', <nl> $type <nl> - ), E_USER_DEPRECATED); <nl> + ); <nl> return $type; <nl> } <nl> @@ -293,12 +293,13 @@ class PDOStatement extends \\PDOStatement implements StatementInterface, Result <nl> private function convertFetchMode(int $fetchMode): int <nl> { <nl> if (! isset(self::FETCH_MODE_MAP[$fetchMode])) { <nl> - // TODO: next major: throw an exception <nl> - @trigger_error(sprintf( <nl> - 'Using a PDO fetch mode or their combination (%d given)' . <nl> + Deprecation::trigger( <nl> + 'doctrine/dbal', <nl> + 'https://github.com/doctrine/dbal/pull/3088', <nl> + 'Using an unsupported PDO fetch mode or a bitmask of fetch modes (%d given)' . <nl> ' is deprecated and will cause an error in Doctrine DBAL 3.0', <nl> $fetchMode <nl> - ), E_USER_DEPRECATED); <nl> + ); <nl> return $fetchMode; <nl> } <nl> ", "msg": "Deprecate usage of PDO Fetch Mode and Param constants."}
{"diff_id": 7901, "repo": "doctrine/dbal", "sha": "74f4a287d5f00db673b3ca19206404a03f41012b", "time": "06.03.2021 23:56:34", "diff": "mmm a / lib/Doctrine/DBAL/Logging/EchoSQLLogger.php <nl> ppp b / lib/Doctrine/DBAL/Logging/EchoSQLLogger.php <nl>namespace Doctrine\\DBAL\\Logging; <nl> +use Doctrine\\Deprecations\\Deprecation; <nl> + <nl> use function var_dump; <nl> use const PHP_EOL; <nl> @@ -13,6 +15,15 @@ use const PHP_EOL; <nl> */ <nl> class EchoSQLLogger implements SQLLogger <nl> { <nl> + public function __construct() <nl> + { <nl> + Deprecation::trigger( <nl> + 'doctrine/dbal', <nl> + 'https://github.com/doctrine/dbal/pull/3935', <nl> + 'EchoSQLLogger is deprecated without replacement, move the code into your project if you rely on it.' <nl> + ); <nl> + } <nl> + <nl> /** <nl> * {@inheritdoc} <nl> */ <nl> ", "msg": "Add deprecation trigger for EchoSQLLogger."}
{"diff_id": 7902, "repo": "doctrine/dbal", "sha": "d0b88d5910ad2c0044fb148703703399ec7acb34", "time": "07.03.2021 00:04:36", "diff": "mmm a / lib/Doctrine/DBAL/Query/Expression/ExpressionBuilder.php <nl> ppp b / lib/Doctrine/DBAL/Query/Expression/ExpressionBuilder.php <nl>namespace Doctrine\\DBAL\\Query\\Expression; <nl> use Doctrine\\DBAL\\Connection; <nl> +use Doctrine\\Deprecations\\Deprecation; <nl> use function func_get_arg; <nl> use function func_get_args; <nl> @@ -71,6 +72,12 @@ class ExpressionBuilder <nl> */ <nl> public function andX($x = null) <nl> { <nl> + Deprecation::trigger( <nl> + 'doctrine/dbal', <nl> + 'https://github.com/doctrine/dbal/pull/3851', <nl> + 'ExpressionBuilder::andX() is deprecated, use ExpressionBuilder::and() instead.' <nl> + ); <nl> + <nl> return new CompositeExpression(CompositeExpression::TYPE_AND, func_get_args()); <nl> } <nl> @@ -84,6 +91,12 @@ class ExpressionBuilder <nl> */ <nl> public function orX($x = null) <nl> { <nl> + Deprecation::trigger( <nl> + 'doctrine/dbal', <nl> + 'https://github.com/doctrine/dbal/pull/3851', <nl> + 'ExpressionBuilder::orX() is deprecated, use ExpressionBuilder::or() instead.' <nl> + ); <nl> + <nl> return new CompositeExpression(CompositeExpression::TYPE_OR, func_get_args()); <nl> } <nl> ", "msg": "Trigger deprecation for ExpressionBuilder::andX/orX"}
{"diff_id": 7903, "repo": "doctrine/dbal", "sha": "6b909629642dd8e8b36fe3c298ef5cb53123718b", "time": "07.03.2021 00:24:17", "diff": "mmm a / lib/Doctrine/DBAL/Query/QueryBuilder.php <nl> ppp b / lib/Doctrine/DBAL/Query/QueryBuilder.php <nl>@@ -9,6 +9,7 @@ use Doctrine\\DBAL\\ParameterType; <nl> use Doctrine\\DBAL\\Query\\Expression\\CompositeExpression; <nl> use Doctrine\\DBAL\\Query\\Expression\\ExpressionBuilder; <nl> use Doctrine\\DBAL\\Types\\Type; <nl> +use Doctrine\\Deprecations\\Deprecation; <nl> use function array_filter; <nl> use function array_key_exists; <nl> @@ -483,6 +484,15 @@ class QueryBuilder <nl> return $this; <nl> } <nl> + if (is_array($select)) { <nl> + Deprecation::trigger( <nl> + 'doctrine/dbal', <nl> + 'https://github.com/doctrine/dbal/issues/3837', <nl> + 'Passing an array for the first argument to QueryBuilder::select is deprecated, ' . <nl> + 'pass each value as an individual variadic argument instead.' <nl> + ); <nl> + } <nl> + <nl> $selects = is_array($select) ? $select : func_get_args(); <nl> return $this->add('select', $selects); <nl> @@ -533,6 +543,15 @@ class QueryBuilder <nl> return $this; <nl> } <nl> + if (is_array($select)) { <nl> + Deprecation::trigger( <nl> + 'doctrine/dbal', <nl> + 'https://github.com/doctrine/dbal/issues/3837', <nl> + 'Passing an array for the first argument to QueryBuilder::addSelect is deprecated, ' . <nl> + 'pass each value as an individual variadic argument instead.' <nl> + ); <nl> + } <nl> + <nl> $selects = is_array($select) ? $select : func_get_args(); <nl> return $this->add('select', $selects, true); <nl> @@ -911,6 +930,15 @@ class QueryBuilder <nl> return $this; <nl> } <nl> + if (is_array($groupBy)) { <nl> + Deprecation::trigger( <nl> + 'doctrine/dbal', <nl> + 'https://github.com/doctrine/dbal/issues/3837', <nl> + 'Passing an array for the first argument to QueryBuilder::groupBy is deprecated, ' . <nl> + 'pass each value as an individual variadic argument instead.' <nl> + ); <nl> + } <nl> + <nl> $groupBy = is_array($groupBy) ? $groupBy : func_get_args(); <nl> return $this->add('groupBy', $groupBy, false); <nl> @@ -940,6 +968,15 @@ class QueryBuilder <nl> return $this; <nl> } <nl> + if (is_array($groupBy)) { <nl> + Deprecation::trigger( <nl> + 'doctrine/dbal', <nl> + 'https://github.com/doctrine/dbal/issues/3837', <nl> + 'Passing an array for the first argument to QueryBuilder::addGroupBy is deprecated, ' . <nl> + 'pass each value as an individual variadic argument instead.' <nl> + ); <nl> + } <nl> + <nl> $groupBy = is_array($groupBy) ? $groupBy : func_get_args(); <nl> return $this->add('groupBy', $groupBy, true); <nl> ", "msg": "Trigger deprecation for QueryBuilder::select/addSelect/groupBy/addGroupBy with array argument."}
{"diff_id": 7904, "repo": "doctrine/dbal", "sha": "f3e971acb51b1cf74fa096667aa1d75d8098f56c", "time": "07.03.2021 00:49:38", "diff": "mmm a / lib/Doctrine/DBAL/DriverManager.php <nl> ppp b / lib/Doctrine/DBAL/DriverManager.php <nl>@@ -10,6 +10,7 @@ use Doctrine\\DBAL\\Driver\\OCI8; <nl> use Doctrine\\DBAL\\Driver\\PDO; <nl> use Doctrine\\DBAL\\Driver\\SQLAnywhere; <nl> use Doctrine\\DBAL\\Driver\\SQLSrv; <nl> +use Doctrine\\Deprecations\\Deprecation; <nl> use function array_keys; <nl> use function array_merge; <nl> @@ -217,6 +218,12 @@ final class DriverManager <nl> } <nl> if (isset($params['pdo'])) { <nl> + Deprecation::trigger( <nl> + 'doctrine/dbal', <nl> + 'https://github.com/doctrine/dbal/pull/3554', <nl> + 'Passing a user provided PDO instance directly to Doctrine is deprecated.' <nl> + ); <nl> + <nl> $params['pdo']->setAttribute(\\PDO::ATTR_ERRMODE, \\PDO::ERRMODE_EXCEPTION); <nl> $params['driver'] = 'pdo_' . $params['pdo']->getAttribute(\\PDO::ATTR_DRIVER_NAME); <nl> } <nl> ", "msg": "Trigger deprecation for passing user provided PDO instance."}
{"diff_id": 7946, "repo": "doctrine/dbal", "sha": "c5f9ffb2fb1670e1afeca730f080dcc0789f6a9b", "time": "21.10.2021 20:56:24", "diff": "mmm a / src/Driver/Mysqli/Statement.php <nl> ppp b / src/Driver/Mysqli/Statement.php <nl>@@ -205,13 +205,8 @@ final class Statement implements StatementInterface <nl> */ <nl> private function bindUntypedValues(array $values): bool <nl> { <nl> - $params = []; <nl> $types = str_repeat('s', count($values)); <nl> - foreach ($values as &$v) { <nl> - $params[] =& $v; <nl> - } <nl> - <nl> - return $this->stmt->bind_param($types, ...$params); <nl> + return $this->stmt->bind_param($types, ...$values); <nl> } <nl> } <nl> ", "msg": "Remove rudandant reference assignment"}
{"diff_id": 7953, "repo": "doctrine/dbal", "sha": "0e72fb2d6acf6e506eaee4285c555eefb3b39d4e", "time": "23.10.2021 18:10:42", "diff": "mmm a / tests/Functional/ExceptionTest.php <nl> ppp b / tests/Functional/ExceptionTest.php <nl>@@ -10,6 +10,7 @@ use Doctrine\\DBAL\\Platforms\\SqlitePlatform; <nl> use Doctrine\\DBAL\\Schema\\Schema; <nl> use Doctrine\\DBAL\\Schema\\Table; <nl> use Doctrine\\DBAL\\Tests\\FunctionalTestCase; <nl> +use Doctrine\\DBAL\\Tests\\TestUtil; <nl> use Throwable; <nl> use function array_merge; <nl> @@ -356,23 +357,14 @@ class ExceptionTest extends FunctionalTestCase <nl> $platform = $this->connection->getDatabasePlatform(); <nl> if ($platform instanceof SqlitePlatform) { <nl> - self::markTestSkipped('Only skipped if platform is not sqlite'); <nl> + self::markTestSkipped('The SQLite driver does not use a network connection'); <nl> } <nl> - $defaultParams = $this->connection->getParams(); <nl> - $params = array_merge($defaultParams, $params); <nl> - <nl> + $params = array_merge(TestUtil::getConnectionParams(), $params); <nl> $conn = DriverManager::getConnection($params); <nl> - $schema = new Schema(); <nl> - $table = $schema->createTable('no_connection'); <nl> - $table->addColumn('id', 'integer'); <nl> - <nl> $this->expectException(Exception\\ConnectionException::class); <nl> - <nl> - foreach ($schema->toSql($conn->getDatabasePlatform()) as $sql) { <nl> - $conn->executeStatement($sql); <nl> - } <nl> + $conn->connect(); <nl> } <nl> /** <nl> ", "msg": "Simplify connection exception test logic"}
{"diff_id": 7992, "repo": "doctrine/dbal", "sha": "4b753182a5dffa63db066ec49a2c7a62092945cd", "time": "08.02.2022 21:40:59", "diff": "mmm a / src/Connection.php <nl> ppp b / src/Connection.php <nl>@@ -119,7 +119,6 @@ class Connection <nl> * The parameters used during creation of the Connection instance. <nl> * <nl> * @var array<string,mixed> <nl> - * @phpstan-var array<string,mixed> <nl> * @psalm-var Params <nl> */ <nl> private $params; <nl> @@ -215,7 +214,6 @@ class Connection <nl> * <nl> * @return array<string,mixed> <nl> * @psalm-return Params <nl> - * @phpstan-return array<string,mixed> <nl> */ <nl> public function getParams() <nl> { <nl> ", "msg": "Lift restriction on PHPStan\nIt seems clever enough to understand this now."}
{"diff_id": 8018, "repo": "doctrine/dbal", "sha": "af809ecc0943ba555ffb02c760f32e3d91d49320", "time": "01.09.2022 21:07:22", "diff": "mmm a / tests/Functional/Platform/DateExpressionTest.php <nl> ppp b / tests/Functional/Platform/DateExpressionTest.php <nl>@@ -30,7 +30,7 @@ class DateExpressionTest extends FunctionalTestCase <nl> self::assertEquals($expected, $diff); <nl> } <nl> - /** @return string[][]|int[][] */ <nl> + /** @return array<string, array{string, string, int}> */ <nl> public static function differenceProvider(): iterable <nl> { <nl> $date1 = new DateTimeImmutable(); <nl> ", "msg": "Improve data provider phpdoc"}
{"diff_id": 8100, "repo": "jikan-me/jikan", "sha": "bf32fed0d43a6069cdd6057ce9159961865cd8c0", "time": "27.06.2018 21:44:30", "diff": "mmm a / src/Jikan.php <nl> ppp b / src/Jikan.php <nl>@@ -63,6 +63,16 @@ class Jikan <nl> return $this->myanimelist->getManga($request); <nl> } <nl> + /** <nl> + * @param Request\\Character $request <nl> + * <nl> + * @return Model\\Character <nl> + */ <nl> + public function Character(Request\\Character $request): Model\\Character <nl> + { <nl> + return $this->myanimelist->getCharacter($request); <nl> + } <nl> + <nl> /** <nl> * @param Request\\Seasonal $request <nl> * <nl> ", "msg": "add character - possibly was removed due to conflict"}
{"diff_id": 8117, "repo": "jikan-me/jikan", "sha": "4718f34fc03d296fec8c565c424a5fd35b35104a", "time": "29.06.2018 00:48:31", "diff": "mmm a / src/Model/UserProfile.php <nl> ppp b / src/Model/UserProfile.php <nl>@@ -52,17 +52,6 @@ class UserProfile <nl> */ <nl> private $joined; <nl> - /** <nl> - * @var string <nl> - */ <nl> - private $animeListUrl; <nl> - <nl> - /** <nl> - * @var string <nl> - */ <nl> - private $mangaListUrl; <nl> - <nl> - <nl> /** <nl> * @var \\Jikan\\Model\\AnimeStats <nl> */ <nl> @@ -142,20 +131,6 @@ class UserProfile <nl> return $this->joined; <nl> } <nl> - /** <nl> - * @return string <nl> - */ <nl> - public function getAnimeListUrl() : string { <nl> - return $this->animeListUrl; <nl> - } <nl> - <nl> - /** <nl> - * @return string <nl> - */ <nl> - public function getMangaListUrl() : string { <nl> - return $this->mangaListUrl; <nl> - } <nl> - <nl> /** <nl> * @return \\Jikan\\Model\\AnimeStats <nl> */ <nl> ", "msg": "remove animeListUrl & mangaListUrl - unnecessary"}
{"diff_id": 8163, "repo": "jikan-me/jikan", "sha": "106f347181937107acb9c091350f534af8bc6bdc", "time": "20.07.2018 19:38:40", "diff": "mmm a / src/Model/Common/DateRange.php <nl> ppp b / src/Model/Common/DateRange.php <nl>@@ -26,6 +26,11 @@ class DateRange <nl> $this->aired = $aired; <nl> } <nl> + public function __toString() <nl> + { <nl> + return $this->aired; <nl> + } <nl> + <nl> /** <nl> * @return \\DateTimeImmutable|null <nl> */ <nl> @@ -55,12 +60,4 @@ class DateRange <nl> return Parser::parseDate($aired); <nl> } <nl> - <nl> - /** <nl> - * @return string <nl> - */ <nl> - public function getAiredString(): string <nl> - { <nl> - return $this->aired; <nl> - } <nl> } <nl> ", "msg": "add __toString method to DateRange\nRemove getAiringString"}
{"diff_id": 8172, "repo": "jikan-me/jikan", "sha": "c16cd3c0fa56ba8b48d7fa450cf0e9b0fdded229", "time": "23.08.2018 05:13:14", "diff": "mmm a / src/Model/Common/DateRange.php <nl> ppp b / src/Model/Common/DateRange.php <nl>@@ -14,16 +14,16 @@ class DateRange <nl> /** <nl> * @var string <nl> */ <nl> - private $aired; <nl> + private $date; <nl> /** <nl> * DateRange constructor. <nl> * <nl> - * @param string $aired <nl> + * @param string $date <nl> */ <nl> - public function __construct(string $aired) <nl> + public function __construct(string $date) <nl> { <nl> - $this->aired = $aired; <nl> + $this->date = $date; <nl> } <nl> /** <nl> @@ -31,7 +31,7 @@ class DateRange <nl> */ <nl> public function __toString() <nl> { <nl> - return $this->aired; <nl> + return $this->date; <nl> } <nl> /** <nl> @@ -39,15 +39,15 @@ class DateRange <nl> */ <nl> public function getFrom(): ?\\DateTimeImmutable <nl> { <nl> - $aired = $this->aired; <nl> - if ($aired === 'Not available') { <nl> + $date = $this->date; <nl> + if ($date === 'Not available') { <nl> return null; <nl> } <nl> - if (strpos($aired, ' to ') !== false || strpos($aired, ' to ?') !== false) { <nl> - $aired = explode(' to ', $aired)[0]; <nl> + if (strpos($date, ' to ') !== false || strpos($date, ' to ?') !== false) { <nl> + $date = explode(' to ', $date)[0]; <nl> } <nl> - return Parser::parseDate($aired); <nl> + return Parser::parseDate($date); <nl> } <nl> /** <nl> @@ -55,12 +55,12 @@ class DateRange <nl> */ <nl> public function getUntil(): ?\\DateTimeImmutable <nl> { <nl> - $aired = $this->aired; <nl> - if (strpos($aired, ' to ') === false || strpos($aired, ' to ?') !== false) { <nl> + $date = $this->date; <nl> + if (strpos($date, ' to ') === false || strpos($date, ' to ?') !== false) { <nl> return null; <nl> } <nl> - $aired = explode(' to ', $aired)[1]; <nl> + $date = explode(' to ', $date)[1]; <nl> - return Parser::parseDate($aired); <nl> + return Parser::parseDate($date); <nl> } <nl> } <nl> ", "msg": "DateRange: `aired` -> `date` since it's used mutually by Manga as well"}
{"diff_id": 8192, "repo": "jikan-me/jikan", "sha": "3b7138c4239b977dade40a5d47378721eb6f361b", "time": "07.09.2018 21:10:52", "diff": "mmm a / src/Model/Common/MalUrl.php <nl> ppp b / src/Model/Common/MalUrl.php <nl>@@ -44,6 +44,10 @@ class MalUrl <nl> */ <nl> public function getMalId(): int <nl> { <nl> + if (preg_match('~^https://myanimelist.net/\\w+/(\\d+)$~', $this->url, $id)) { <nl> + return (int) $id[1]; <nl> + } <nl> + <nl> return <nl> ctype_digit( <nl> preg_replace('#https://myanimelist.net/\\w+/(\\d+|\\w+/(\\d+))/.*#', '$1', $this->url) <nl> ", "msg": "MalUrl: add support to parse URLs from UserHistory"}
{"diff_id": 8327, "repo": "seldaek/monolog", "sha": "25da38373af6f3b578001ea76c4a2f16451bd6d0", "time": "17.03.2017 22:49:31", "diff": "mmm a / src/Monolog/Handler/SlackHandler.php <nl> ppp b / src/Monolog/Handler/SlackHandler.php <nl>@@ -144,6 +144,17 @@ class SlackHandler extends SocketHandler <nl> protected function write(array $record) <nl> { <nl> parent::write($record); <nl> + $this->finalizeWrite(); <nl> + } <nl> + <nl> + /** <nl> + * Finalizes the request by reading some bytes and then closing the socket <nl> + * <nl> + * If we do not read some but close the socket too early, slack sometimes <nl> + * drops the request entirely. <nl> + */ <nl> + protected function finalizeWrite() <nl> + { <nl> $res = $this->getResource(); <nl> if (is_resource($res)) { <nl> @fread($res, 2048); <nl> ", "msg": "Split off work into a new method to facilitate extension, fixes"}
{"diff_id": 8342, "repo": "seldaek/monolog", "sha": "443e4a94fc00711cb618b446d071b2a027395c88", "time": "18.06.2017 18:49:55", "diff": "mmm a / src/Monolog/Handler/ErrorLogHandler.php <nl> ppp b / src/Monolog/Handler/ErrorLogHandler.php <nl>@@ -71,13 +71,14 @@ class ErrorLogHandler extends AbstractProcessingHandler <nl> */ <nl> protected function write(array $record) <nl> { <nl> - if ($this->expandNewlines) { <nl> + if (!$this->expandNewlines) { <nl> + error_log((string) $record['formatted'], $this->messageType); <nl> + return; <nl> + } <nl> + <nl> $lines = preg_split('{[\\r\\n]+}', (string) $record['formatted']); <nl> foreach ($lines as $line) { <nl> error_log($line, $this->messageType); <nl> } <nl> - } else { <nl> - error_log((string) $record['formatted'], $this->messageType); <nl> - } <nl> } <nl> } <nl> ", "msg": "Minor code cleanup on Handler/ErrorLogHandler.php\nJust some cleanup for readability."}
{"diff_id": 8344, "repo": "seldaek/monolog", "sha": "c7eb1a0f7524ac8085d45fcb864f93416aa43bb8", "time": "10.08.2017 15:40:55", "diff": "mmm a / src/Monolog/Logger.php <nl> ppp b / src/Monolog/Logger.php <nl>@@ -87,8 +87,6 @@ class Logger implements LoggerInterface <nl> const API = 2; <nl> /** <nl> - * Logging levels from syslog protocol defined in RFC 5424 <nl> - * <nl> * This is a static variable and not a constant to serve as an extension point for custom levels <nl> * <nl> * @var string[] $levels Logging levels with the levels as key <nl> ", "msg": "Remove misleading reference to RFC 5424 standard"}
{"diff_id": 8349, "repo": "seldaek/monolog", "sha": "86d0984517d7c3b44ffc5852f466b71eedabf296", "time": "18.01.2018 10:32:25", "diff": "mmm a / src/Monolog/ErrorHandler.php <nl> ppp b / src/Monolog/ErrorHandler.php <nl>@@ -166,6 +166,10 @@ class ErrorHandler <nl> call_user_func($this->previousExceptionHandler, $e); <nl> } <nl> + if (!headers_sent() && ini_get('display_errors') === 0) { <nl> + http_response_code(500); <nl> + } <nl> + <nl> exit(255); <nl> } <nl> ", "msg": "Set HTTP response code to 500 in case of exceptions\nResolves Seldaek/monolog#1096."}
{"diff_id": 8391, "repo": "seldaek/monolog", "sha": "ceebd568a2ffa1003c6a84fb9c53162bb96fd646", "time": "04.11.2018 18:41:02", "diff": "mmm a / src/Monolog/Registry.php <nl> ppp b / src/Monolog/Registry.php <nl>@@ -131,14 +131,4 @@ class Registry <nl> { <nl> return self::getInstance($name); <nl> } <nl> - <nl> - /** <nl> - * @internal <nl> - */ <nl> - public function getClass($object) <nl> - { <nl> - $class = \\get_class($object); <nl> - <nl> - return 'c' === $class[0] && 0 === strpos($class, \"class@anonymous\\0\") ? get_parent_class($class).'@anonymous' : $class; <nl> - } <nl> } <nl> ", "msg": "Remove getClass func from Registry as it was moved to Utils class"}
{"diff_id": 8405, "repo": "seldaek/monolog", "sha": "8b879fe6fae3f83c42c0342b2e4ac6b8be1f6fca", "time": "08.03.2019 15:15:58", "diff": "mmm a / src/Monolog/Handler/Slack/SlackRecord.php <nl> ppp b / src/Monolog/Handler/Slack/SlackRecord.php <nl>@@ -85,8 +85,16 @@ class SlackRecord <nl> */ <nl> private $normalizerFormatter; <nl> - public function __construct(?string $channel = null, ?string $username = null, bool $useAttachment = true, ?string $userIcon = null, bool $useShortAttachment = false, bool $includeContextAndExtra = false, array $excludeFields = array(), FormatterInterface $formatter = null) <nl> - { <nl> + public function __construct( <nl> + ?string $channel = null, <nl> + ?string $username = null, <nl> + bool $useAttachment = true, <nl> + ?string $userIcon = null, <nl> + bool $useShortAttachment = false, <nl> + bool $includeContextAndExtra = false, <nl> + array $excludeFields = array(), <nl> + FormatterInterface $formatter = null <nl> + ) { <nl> $this->channel = $channel; <nl> $this->username = $username; <nl> $this->userIcon = $userIcon !== null ? trim($userIcon, ':') : null; <nl> @@ -101,6 +109,10 @@ class SlackRecord <nl> } <nl> } <nl> + /** <nl> + * Returns required data in format that Slack <nl> + * is expecting. <nl> + */ <nl> public function getSlackData(array $record): array <nl> { <nl> $dataArray = array(); <nl> @@ -175,7 +187,7 @@ class SlackRecord <nl> } <nl> /** <nl> - * Returned a Slack message attachment color associated with <nl> + * Returns a Slack message attachment color associated with <nl> * provided level. <nl> */ <nl> public function getAttachmentColor(int $level): string <nl> ", "msg": "Readability updates\nFixes docblock, minor formatting tweak for readbility, and adds a new docblock for getSlackData record."}
{"diff_id": 8424, "repo": "seldaek/monolog", "sha": "c8b0d08cebfaee16569b0e5a9a80911cc238fe1d", "time": "05.09.2019 13:28:42", "diff": "mmm a / src/Monolog/Handler/ChromePHPHandler.php <nl> ppp b / src/Monolog/Handler/ChromePHPHandler.php <nl>@@ -43,7 +43,7 @@ class ChromePHPHandler extends AbstractProcessingHandler <nl> /** <nl> * Tracks whether we sent too much data <nl> * <nl> - * Chrome limits the headers to 256KB, so when we sent 240KB we stop sending <nl> + * Chrome limits the headers to 4KB, so when we sent 3KB we stop sending <nl> * <nl> * @var bool <nl> */ <nl> @@ -136,7 +136,7 @@ class ChromePHPHandler extends AbstractProcessingHandler <nl> $json = @json_encode(self::$json); <nl> $data = base64_encode(utf8_encode($json)); <nl> - if (strlen($data) > 240 * 1024) { <nl> + if (strlen($data) > 3 * 1024) { <nl> self::$overflowed = true; <nl> $record = array( <nl> ", "msg": "Change chrome header size limit\nDue to change in chromium header size support, the size limit enforced by the handler must be decreased."}
